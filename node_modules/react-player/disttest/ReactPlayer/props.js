var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "node_modules/react/cjs/react.production.min.js"(exports) {
    "use strict";
    var l = require_object_assign();
    var n = "function" === typeof Symbol && Symbol.for;
    var p = n ? Symbol.for("react.element") : 60103;
    var q = n ? Symbol.for("react.portal") : 60106;
    var r = n ? Symbol.for("react.fragment") : 60107;
    var t = n ? Symbol.for("react.strict_mode") : 60108;
    var u = n ? Symbol.for("react.profiler") : 60114;
    var v = n ? Symbol.for("react.provider") : 60109;
    var w = n ? Symbol.for("react.context") : 60110;
    var x = n ? Symbol.for("react.forward_ref") : 60112;
    var y = n ? Symbol.for("react.suspense") : 60113;
    var z = n ? Symbol.for("react.memo") : 60115;
    var A = n ? Symbol.for("react.lazy") : 60116;
    var B = "function" === typeof Symbol && Symbol.iterator;
    function C(a) {
      for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
        b += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var D = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } };
    var E = {};
    function F(a, b, c) {
      this.props = a;
      this.context = b;
      this.refs = E;
      this.updater = c || D;
    }
    F.prototype.isReactComponent = {};
    F.prototype.setState = function(a, b) {
      if ("object" !== typeof a && "function" !== typeof a && null != a)
        throw Error(C(85));
      this.updater.enqueueSetState(this, a, b, "setState");
    };
    F.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function G() {
    }
    G.prototype = F.prototype;
    function H(a, b, c) {
      this.props = a;
      this.context = b;
      this.refs = E;
      this.updater = c || D;
    }
    var I = H.prototype = new G();
    I.constructor = H;
    l(I, F.prototype);
    I.isPureReactComponent = true;
    var J = { current: null };
    var K = Object.prototype.hasOwnProperty;
    var L = { key: true, ref: true, __self: true, __source: true };
    function M(a, b, c) {
      var e, d = {}, g = null, k = null;
      if (null != b)
        for (e in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = "" + b.key), b)
          K.call(b, e) && !L.hasOwnProperty(e) && (d[e] = b[e]);
      var f = arguments.length - 2;
      if (1 === f)
        d.children = c;
      else if (1 < f) {
        for (var h = Array(f), m = 0; m < f; m++)
          h[m] = arguments[m + 2];
        d.children = h;
      }
      if (a && a.defaultProps)
        for (e in f = a.defaultProps, f)
          void 0 === d[e] && (d[e] = f[e]);
      return { $$typeof: p, type: a, key: g, ref: k, props: d, _owner: J.current };
    }
    function N(a, b) {
      return { $$typeof: p, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function O(a) {
      return "object" === typeof a && null !== a && a.$$typeof === p;
    }
    function escape(a) {
      var b = { "=": "=0", ":": "=2" };
      return "$" + ("" + a).replace(/[=:]/g, function(a2) {
        return b[a2];
      });
    }
    var P = /\/+/g;
    var Q = [];
    function R(a, b, c, e) {
      if (Q.length) {
        var d = Q.pop();
        d.result = a;
        d.keyPrefix = b;
        d.func = c;
        d.context = e;
        d.count = 0;
        return d;
      }
      return { result: a, keyPrefix: b, func: c, context: e, count: 0 };
    }
    function S(a) {
      a.result = null;
      a.keyPrefix = null;
      a.func = null;
      a.context = null;
      a.count = 0;
      10 > Q.length && Q.push(a);
    }
    function T(a, b, c, e) {
      var d = typeof a;
      if ("undefined" === d || "boolean" === d)
        a = null;
      var g = false;
      if (null === a)
        g = true;
      else
        switch (d) {
          case "string":
          case "number":
            g = true;
            break;
          case "object":
            switch (a.$$typeof) {
              case p:
              case q:
                g = true;
            }
        }
      if (g)
        return c(e, a, "" === b ? "." + U(a, 0) : b), 1;
      g = 0;
      b = "" === b ? "." : b + ":";
      if (Array.isArray(a))
        for (var k = 0; k < a.length; k++) {
          d = a[k];
          var f = b + U(d, k);
          g += T(d, f, c, e);
        }
      else if (null === a || "object" !== typeof a ? f = null : (f = B && a[B] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f)
        for (a = f.call(a), k = 0; !(d = a.next()).done; )
          d = d.value, f = b + U(d, k++), g += T(d, f, c, e);
      else if ("object" === d)
        throw c = "" + a, Error(C(31, "[object Object]" === c ? "object with keys {" + Object.keys(a).join(", ") + "}" : c, ""));
      return g;
    }
    function V(a, b, c) {
      return null == a ? 0 : T(a, "", b, c);
    }
    function U(a, b) {
      return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
    }
    function W(a, b) {
      a.func.call(a.context, b, a.count++);
    }
    function aa(a, b, c) {
      var e = a.result, d = a.keyPrefix;
      a = a.func.call(a.context, b, a.count++);
      Array.isArray(a) ? X(a, e, c, function(a2) {
        return a2;
      }) : null != a && (O(a) && (a = N(a, d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(P, "$&/") + "/") + c)), e.push(a));
    }
    function X(a, b, c, e, d) {
      var g = "";
      null != c && (g = ("" + c).replace(P, "$&/") + "/");
      b = R(b, g, e, d);
      V(a, aa, b);
      S(b);
    }
    var Y = { current: null };
    function Z() {
      var a = Y.current;
      if (null === a)
        throw Error(C(321));
      return a;
    }
    var ba = { ReactCurrentDispatcher: Y, ReactCurrentBatchConfig: { suspense: null }, ReactCurrentOwner: J, IsSomeRendererActing: { current: false }, assign: l };
    exports.Children = { map: function(a, b, c) {
      if (null == a)
        return a;
      var e = [];
      X(a, e, null, b, c);
      return e;
    }, forEach: function(a, b, c) {
      if (null == a)
        return a;
      b = R(null, null, b, c);
      V(a, W, b);
      S(b);
    }, count: function(a) {
      return V(a, function() {
        return null;
      }, null);
    }, toArray: function(a) {
      var b = [];
      X(a, b, null, function(a2) {
        return a2;
      });
      return b;
    }, only: function(a) {
      if (!O(a))
        throw Error(C(143));
      return a;
    } };
    exports.Component = F;
    exports.Fragment = r;
    exports.Profiler = u;
    exports.PureComponent = H;
    exports.StrictMode = t;
    exports.Suspense = y;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ba;
    exports.cloneElement = function(a, b, c) {
      if (null === a || void 0 === a)
        throw Error(C(267, a));
      var e = l({}, a.props), d = a.key, g = a.ref, k = a._owner;
      if (null != b) {
        void 0 !== b.ref && (g = b.ref, k = J.current);
        void 0 !== b.key && (d = "" + b.key);
        if (a.type && a.type.defaultProps)
          var f = a.type.defaultProps;
        for (h in b)
          K.call(b, h) && !L.hasOwnProperty(h) && (e[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);
      }
      var h = arguments.length - 2;
      if (1 === h)
        e.children = c;
      else if (1 < h) {
        f = Array(h);
        for (var m = 0; m < h; m++)
          f[m] = arguments[m + 2];
        e.children = f;
      }
      return {
        $$typeof: p,
        type: a.type,
        key: d,
        ref: g,
        props: e,
        _owner: k
      };
    };
    exports.createContext = function(a, b) {
      void 0 === b && (b = null);
      a = { $$typeof: w, _calculateChangedBits: b, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null };
      a.Provider = { $$typeof: v, _context: a };
      return a.Consumer = a;
    };
    exports.createElement = M;
    exports.createFactory = function(a) {
      var b = M.bind(null, a);
      b.type = a;
      return b;
    };
    exports.createRef = function() {
      return { current: null };
    };
    exports.forwardRef = function(a) {
      return { $$typeof: x, render: a };
    };
    exports.isValidElement = O;
    exports.lazy = function(a) {
      return { $$typeof: A, _ctor: a, _status: -1, _result: null };
    };
    exports.memo = function(a, b) {
      return { $$typeof: z, type: a, compare: void 0 === b ? null : b };
    };
    exports.useCallback = function(a, b) {
      return Z().useCallback(a, b);
    };
    exports.useContext = function(a, b) {
      return Z().useContext(a, b);
    };
    exports.useDebugValue = function() {
    };
    exports.useEffect = function(a, b) {
      return Z().useEffect(a, b);
    };
    exports.useImperativeHandle = function(a, b, c) {
      return Z().useImperativeHandle(a, b, c);
    };
    exports.useLayoutEffect = function(a, b) {
      return Z().useLayoutEffect(a, b);
    };
    exports.useMemo = function(a, b) {
      return Z().useMemo(a, b);
    };
    exports.useReducer = function(a, b, c) {
      return Z().useReducer(a, b, c);
    };
    exports.useRef = function(a) {
      return Z().useRef(a);
    };
    exports.useState = function(a) {
      return Z().useState(a);
    };
    exports.version = "16.14.0";
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    if (true) {
      module.exports = require_react_production_min();
    } else {
      module.exports = null;
    }
  }
});

// node_modules/scheduler/cjs/scheduler-unstable_mock.production.min.js
var require_scheduler_unstable_mock_production_min = __commonJS({
  "node_modules/scheduler/cjs/scheduler-unstable_mock.production.min.js"(exports) {
    "use strict";
    var f = 0;
    var g = null;
    var h = null;
    var k = -1;
    var l = null;
    var m = -1;
    var n = false;
    var p = false;
    var q = false;
    var r = false;
    function t() {
      return -1 !== m && null !== l && l.length >= m || r && q ? n = true : false;
    }
    function x() {
      if (p)
        throw Error("Already flushing work.");
      if (null !== g) {
        var a = g;
        p = true;
        try {
          var b = true;
          do
            b = a(true, f);
          while (b);
          b || (g = null);
          return true;
        } finally {
          p = false;
        }
      } else
        return false;
    }
    function z(a, b) {
      var c = a.length;
      a.push(b);
      a:
        for (; ; ) {
          var d = c - 1 >>> 1, e = a[d];
          if (void 0 !== e && 0 < A(e, b))
            a[d] = b, a[c] = e, c = d;
          else
            break a;
        }
    }
    function B(a) {
      a = a[0];
      return void 0 === a ? null : a;
    }
    function C(a) {
      var b = a[0];
      if (void 0 !== b) {
        var c = a.pop();
        if (c !== b) {
          a[0] = c;
          a:
            for (var d = 0, e = a.length; d < e; ) {
              var u = 2 * (d + 1) - 1, v = a[u], w = u + 1, y = a[w];
              if (void 0 !== v && 0 > A(v, c))
                void 0 !== y && 0 > A(y, v) ? (a[d] = y, a[w] = c, d = w) : (a[d] = v, a[u] = c, d = u);
              else if (void 0 !== y && 0 > A(y, c))
                a[d] = y, a[w] = c, d = w;
              else
                break a;
            }
        }
        return b;
      }
      return null;
    }
    function A(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return 0 !== c ? c : a.id - b.id;
    }
    var D = [];
    var E = [];
    var F = 1;
    var G = null;
    var H = 3;
    var I = false;
    var J = false;
    var K = false;
    function L(a) {
      for (var b = B(E); null !== b; ) {
        if (null === b.callback)
          C(E);
        else if (b.startTime <= a)
          C(E), b.sortIndex = b.expirationTime, z(D, b);
        else
          break;
        b = B(E);
      }
    }
    function M(a) {
      K = false;
      L(a);
      if (!J)
        if (null !== B(D))
          J = true, g = N;
        else {
          var b = B(E);
          null !== b && (a = b.startTime - a, h = M, k = f + a);
        }
    }
    function N(a, b) {
      J = false;
      K && (K = false, h = null, k = -1);
      I = true;
      var c = H;
      try {
        L(b);
        for (G = B(D); null !== G && (!(G.expirationTime > b) || a && !t()); ) {
          var d = G.callback;
          if (null !== d) {
            G.callback = null;
            H = G.priorityLevel;
            var e = d(G.expirationTime <= b);
            b = f;
            "function" === typeof e ? G.callback = e : G === B(D) && C(D);
            L(b);
          } else
            C(D);
          G = B(D);
        }
        if (null !== G)
          var u = true;
        else {
          var v = B(E);
          if (null !== v) {
            var w = v.startTime - b;
            h = M;
            k = f + w;
          }
          u = false;
        }
        return u;
      } finally {
        G = null, H = c, I = false;
      }
    }
    function O(a) {
      switch (a) {
        case 1:
          return -1;
        case 2:
          return 250;
        case 5:
          return 1073741823;
        case 4:
          return 1e4;
        default:
          return 5e3;
      }
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_advanceTime = function(a) {
      f += a;
      null !== h && k <= f && (h(f), k = -1, h = null);
    };
    exports.unstable_cancelCallback = function(a) {
      a.callback = null;
    };
    exports.unstable_clearYields = function() {
      if (null === l)
        return [];
      var a = l;
      l = null;
      return a;
    };
    exports.unstable_continueExecution = function() {
      J || I || (J = true, g = N);
    };
    exports.unstable_flushAll = function() {
      if (null !== l)
        throw Error("Log is not empty. Assert on the log of yielded values before flushing additional work.");
      x();
      if (null !== l)
        throw Error("While flushing work, something yielded a value. Use an assertion helper to assert on the log of yielded values, e.g. expect(Scheduler).toFlushAndYield([...])");
    };
    exports.unstable_flushAllWithoutAsserting = x;
    exports.unstable_flushExpired = function() {
      if (p)
        throw Error("Already flushing work.");
      if (null !== g) {
        p = true;
        try {
          g(false, f) || (g = null);
        } finally {
          p = false;
        }
      }
    };
    exports.unstable_flushNumberOfYields = function(a) {
      if (p)
        throw Error("Already flushing work.");
      if (null !== g) {
        var b = g;
        m = a;
        p = true;
        try {
          a = true;
          do
            a = b(true, f);
          while (a && !n);
          a || (g = null);
        } finally {
          m = -1, p = n = false;
        }
      }
    };
    exports.unstable_flushUntilNextPaint = function() {
      if (p)
        throw Error("Already flushing work.");
      if (null !== g) {
        var a = g;
        r = true;
        q = false;
        p = true;
        try {
          var b = true;
          do
            b = a(true, f);
          while (b && !n);
          b || (g = null);
        } finally {
          p = n = r = false;
        }
      }
    };
    exports.unstable_forceFrameRate = function() {
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return H;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return B(D);
    };
    exports.unstable_next = function(a) {
      switch (H) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;
        default:
          b = H;
      }
      var c = H;
      H = b;
      try {
        return a();
      } finally {
        H = c;
      }
    };
    exports.unstable_now = function() {
      return f;
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = function() {
      q = true;
    };
    exports.unstable_runWithPriority = function(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a = 3;
      }
      var c = H;
      H = a;
      try {
        return b();
      } finally {
        H = c;
      }
    };
    exports.unstable_scheduleCallback = function(a, b, c) {
      var d = f;
      if ("object" === typeof c && null !== c) {
        var e = c.delay;
        e = "number" === typeof e && 0 < e ? d + e : d;
        c = "number" === typeof c.timeout ? c.timeout : O(a);
      } else
        c = O(a), e = d;
      c = e + c;
      a = { id: F++, callback: b, priorityLevel: a, startTime: e, expirationTime: c, sortIndex: -1 };
      e > d ? (a.sortIndex = e, z(E, a), null === B(D) && a === B(E) && (K ? (h = null, k = -1) : K = true, h = M, k = f + (e - d))) : (a.sortIndex = c, z(D, a), J || I || (J = true, g = N));
      return a;
    };
    exports.unstable_shouldYield = function() {
      var a = f;
      L(a);
      var b = B(D);
      return b !== G && null !== G && null !== b && null !== b.callback && b.startTime <= a && b.expirationTime < G.expirationTime || t();
    };
    exports.unstable_wrapCallback = function(a) {
      var b = H;
      return function() {
        var c = H;
        H = b;
        try {
          return a.apply(this, arguments);
        } finally {
          H = c;
        }
      };
    };
    exports.unstable_yieldValue = function(a) {
      null === l ? l = [a] : l.push(a);
    };
  }
});

// node_modules/scheduler/unstable_mock.js
var require_unstable_mock = __commonJS({
  "node_modules/scheduler/unstable_mock.js"(exports, module) {
    "use strict";
    if (true) {
      module.exports = require_scheduler_unstable_mock_production_min();
    } else {
      module.exports = null;
    }
  }
});

// node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
  "node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
    "use strict";
    var f;
    var g;
    var h;
    var k;
    var l;
    if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
      p = null, q = null, t = function() {
        if (null !== p)
          try {
            var a = exports.unstable_now();
            p(true, a);
            p = null;
          } catch (b) {
            throw setTimeout(t, 0), b;
          }
      }, u = Date.now();
      exports.unstable_now = function() {
        return Date.now() - u;
      };
      f = function(a) {
        null !== p ? setTimeout(f, 0, a) : (p = a, setTimeout(t, 0));
      };
      g = function(a, b) {
        q = setTimeout(a, b);
      };
      h = function() {
        clearTimeout(q);
      };
      k = function() {
        return false;
      };
      l = exports.unstable_forceFrameRate = function() {
      };
    } else {
      w = window.performance, x = window.Date, y = window.setTimeout, z = window.clearTimeout;
      if ("undefined" !== typeof console) {
        A = window.cancelAnimationFrame;
        "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
        "function" !== typeof A && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
      }
      if ("object" === typeof w && "function" === typeof w.now)
        exports.unstable_now = function() {
          return w.now();
        };
      else {
        B = x.now();
        exports.unstable_now = function() {
          return x.now() - B;
        };
      }
      C = false, D = null, E = -1, F = 5, G = 0;
      k = function() {
        return exports.unstable_now() >= G;
      };
      l = function() {
      };
      exports.unstable_forceFrameRate = function(a) {
        0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : F = 0 < a ? Math.floor(1e3 / a) : 5;
      };
      H = new MessageChannel(), I = H.port2;
      H.port1.onmessage = function() {
        if (null !== D) {
          var a = exports.unstable_now();
          G = a + F;
          try {
            D(true, a) ? I.postMessage(null) : (C = false, D = null);
          } catch (b) {
            throw I.postMessage(null), b;
          }
        } else
          C = false;
      };
      f = function(a) {
        D = a;
        C || (C = true, I.postMessage(null));
      };
      g = function(a, b) {
        E = y(function() {
          a(exports.unstable_now());
        }, b);
      };
      h = function() {
        z(E);
        E = -1;
      };
    }
    var p;
    var q;
    var t;
    var u;
    var w;
    var x;
    var y;
    var z;
    var A;
    var B;
    var C;
    var D;
    var E;
    var F;
    var G;
    var H;
    var I;
    function J(a, b) {
      var c = a.length;
      a.push(b);
      a:
        for (; ; ) {
          var d = c - 1 >>> 1, e = a[d];
          if (void 0 !== e && 0 < K(e, b))
            a[d] = b, a[c] = e, c = d;
          else
            break a;
        }
    }
    function L(a) {
      a = a[0];
      return void 0 === a ? null : a;
    }
    function M(a) {
      var b = a[0];
      if (void 0 !== b) {
        var c = a.pop();
        if (c !== b) {
          a[0] = c;
          a:
            for (var d = 0, e = a.length; d < e; ) {
              var m = 2 * (d + 1) - 1, n = a[m], v = m + 1, r = a[v];
              if (void 0 !== n && 0 > K(n, c))
                void 0 !== r && 0 > K(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);
              else if (void 0 !== r && 0 > K(r, c))
                a[d] = r, a[v] = c, d = v;
              else
                break a;
            }
        }
        return b;
      }
      return null;
    }
    function K(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return 0 !== c ? c : a.id - b.id;
    }
    var N = [];
    var O = [];
    var P = 1;
    var Q = null;
    var R = 3;
    var S = false;
    var T = false;
    var U = false;
    function V(a) {
      for (var b = L(O); null !== b; ) {
        if (null === b.callback)
          M(O);
        else if (b.startTime <= a)
          M(O), b.sortIndex = b.expirationTime, J(N, b);
        else
          break;
        b = L(O);
      }
    }
    function W(a) {
      U = false;
      V(a);
      if (!T)
        if (null !== L(N))
          T = true, f(X);
        else {
          var b = L(O);
          null !== b && g(W, b.startTime - a);
        }
    }
    function X(a, b) {
      T = false;
      U && (U = false, h());
      S = true;
      var c = R;
      try {
        V(b);
        for (Q = L(N); null !== Q && (!(Q.expirationTime > b) || a && !k()); ) {
          var d = Q.callback;
          if (null !== d) {
            Q.callback = null;
            R = Q.priorityLevel;
            var e = d(Q.expirationTime <= b);
            b = exports.unstable_now();
            "function" === typeof e ? Q.callback = e : Q === L(N) && M(N);
            V(b);
          } else
            M(N);
          Q = L(N);
        }
        if (null !== Q)
          var m = true;
        else {
          var n = L(O);
          null !== n && g(W, n.startTime - b);
          m = false;
        }
        return m;
      } finally {
        Q = null, R = c, S = false;
      }
    }
    function Y(a) {
      switch (a) {
        case 1:
          return -1;
        case 2:
          return 250;
        case 5:
          return 1073741823;
        case 4:
          return 1e4;
        default:
          return 5e3;
      }
    }
    var Z = l;
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a) {
      a.callback = null;
    };
    exports.unstable_continueExecution = function() {
      T || S || (T = true, f(X));
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return R;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return L(N);
    };
    exports.unstable_next = function(a) {
      switch (R) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;
        default:
          b = R;
      }
      var c = R;
      R = b;
      try {
        return a();
      } finally {
        R = c;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = Z;
    exports.unstable_runWithPriority = function(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a = 3;
      }
      var c = R;
      R = a;
      try {
        return b();
      } finally {
        R = c;
      }
    };
    exports.unstable_scheduleCallback = function(a, b, c) {
      var d = exports.unstable_now();
      if ("object" === typeof c && null !== c) {
        var e = c.delay;
        e = "number" === typeof e && 0 < e ? d + e : d;
        c = "number" === typeof c.timeout ? c.timeout : Y(a);
      } else
        c = Y(a), e = d;
      c = e + c;
      a = { id: P++, callback: b, priorityLevel: a, startTime: e, expirationTime: c, sortIndex: -1 };
      e > d ? (a.sortIndex = e, J(O, a), null === L(N) && a === L(O) && (U ? h() : U = true, g(W, e - d))) : (a.sortIndex = c, J(N, a), T || S || (T = true, f(X)));
      return a;
    };
    exports.unstable_shouldYield = function() {
      var a = exports.unstable_now();
      V(a);
      var b = L(N);
      return b !== Q && null !== Q && null !== b && null !== b.callback && b.startTime <= a && b.expirationTime < Q.expirationTime || k();
    };
    exports.unstable_wrapCallback = function(a) {
      var b = R;
      return function() {
        var c = R;
        R = b;
        try {
          return a.apply(this, arguments);
        } finally {
          R = c;
        }
      };
    };
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    if (true) {
      module.exports = require_scheduler_production_min();
    } else {
      module.exports = null;
    }
  }
});

// node_modules/react-test-renderer/cjs/react-test-renderer.production.min.js
var require_react_test_renderer_production_min = __commonJS({
  "node_modules/react-test-renderer/cjs/react-test-renderer.production.min.js"(exports, module) {
    "use strict";
    var aa = require_object_assign();
    var ba = require_unstable_mock();
    var ca = require_react();
    var m = require_scheduler();
    function n(a) {
      for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
        b += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    function da(a, b) {
      for (var c = 0; c < b.length; c++) {
        var d = b[c];
        d.enumerable = d.enumerable || false;
        d.configurable = true;
        "value" in d && (d.writable = true);
        Object.defineProperty(a, d.key, d);
      }
    }
    function ea(a, b, c) {
      b && da(a.prototype, b);
      c && da(a, c);
      return a;
    }
    var t = ca.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    t.hasOwnProperty("ReactCurrentDispatcher") || (t.ReactCurrentDispatcher = { current: null });
    t.hasOwnProperty("ReactCurrentBatchConfig") || (t.ReactCurrentBatchConfig = { suspense: null });
    var y = "function" === typeof Symbol && Symbol.for;
    var fa = y ? Symbol.for("react.element") : 60103;
    var ha = y ? Symbol.for("react.portal") : 60106;
    var ia = y ? Symbol.for("react.fragment") : 60107;
    var ja = y ? Symbol.for("react.strict_mode") : 60108;
    var ka = y ? Symbol.for("react.profiler") : 60114;
    var la = y ? Symbol.for("react.provider") : 60109;
    var ma = y ? Symbol.for("react.context") : 60110;
    var na = y ? Symbol.for("react.concurrent_mode") : 60111;
    var oa = y ? Symbol.for("react.forward_ref") : 60112;
    var pa = y ? Symbol.for("react.suspense") : 60113;
    var qa = y ? Symbol.for("react.suspense_list") : 60120;
    var ra = y ? Symbol.for("react.memo") : 60115;
    var sa = y ? Symbol.for("react.lazy") : 60116;
    var ta = y ? Symbol.for("react.block") : 60121;
    var ua = "function" === typeof Symbol && Symbol.iterator;
    function va(a) {
      if (null === a || "object" !== typeof a)
        return null;
      a = ua && a[ua] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    function wa(a) {
      if (-1 === a._status) {
        a._status = 0;
        var b = a._ctor;
        b = b();
        a._result = b;
        b.then(function(b2) {
          0 === a._status && (b2 = b2.default, a._status = 1, a._result = b2);
        }, function(b2) {
          0 === a._status && (a._status = 2, a._result = b2);
        });
      }
    }
    function xa(a) {
      if (null == a)
        return null;
      if ("function" === typeof a)
        return a.displayName || a.name || null;
      if ("string" === typeof a)
        return a;
      switch (a) {
        case ia:
          return "Fragment";
        case ha:
          return "Portal";
        case ka:
          return "Profiler";
        case ja:
          return "StrictMode";
        case pa:
          return "Suspense";
        case qa:
          return "SuspenseList";
      }
      if ("object" === typeof a)
        switch (a.$$typeof) {
          case ma:
            return "Context.Consumer";
          case la:
            return "Context.Provider";
          case oa:
            var b = a.render;
            b = b.displayName || b.name || "";
            return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");
          case ra:
            return xa(a.type);
          case ta:
            return xa(a.render);
          case sa:
            if (a = 1 === a._status ? a._result : null)
              return xa(a);
        }
      return null;
    }
    function ya(a) {
      var b = a, c = a;
      if (a.alternate)
        for (; b.return; )
          b = b.return;
      else {
        a = b;
        do
          b = a, 0 !== (b.effectTag & 1026) && (c = b.return), a = b.return;
        while (a);
      }
      return 3 === b.tag ? c : null;
    }
    function za(a) {
      if (ya(a) !== a)
        throw Error(n(188));
    }
    function Aa(a) {
      var b = a.alternate;
      if (!b) {
        b = ya(a);
        if (null === b)
          throw Error(n(188));
        return b !== a ? null : a;
      }
      for (var c = a, d = b; ; ) {
        var e = c.return;
        if (null === e)
          break;
        var f = e.alternate;
        if (null === f) {
          d = e.return;
          if (null !== d) {
            c = d;
            continue;
          }
          break;
        }
        if (e.child === f.child) {
          for (f = e.child; f; ) {
            if (f === c)
              return za(e), a;
            if (f === d)
              return za(e), b;
            f = f.sibling;
          }
          throw Error(n(188));
        }
        if (c.return !== d.return)
          c = e, d = f;
        else {
          for (var g = false, h = e.child; h; ) {
            if (h === c) {
              g = true;
              c = e;
              d = f;
              break;
            }
            if (h === d) {
              g = true;
              d = e;
              c = f;
              break;
            }
            h = h.sibling;
          }
          if (!g) {
            for (h = f.child; h; ) {
              if (h === c) {
                g = true;
                c = f;
                d = e;
                break;
              }
              if (h === d) {
                g = true;
                d = f;
                c = e;
                break;
              }
              h = h.sibling;
            }
            if (!g)
              throw Error(n(189));
          }
        }
        if (c.alternate !== d)
          throw Error(n(190));
      }
      if (3 !== c.tag)
        throw Error(n(188));
      return c.stateNode.current === c ? a : b;
    }
    function Ba(a) {
      a = Aa(a);
      if (!a)
        return null;
      for (var b = a; ; ) {
        if (5 === b.tag || 6 === b.tag)
          return b;
        if (b.child)
          b.child.return = b, b = b.child;
        else {
          if (b === a)
            break;
          for (; !b.sibling; ) {
            if (!b.return || b.return === a)
              return null;
            b = b.return;
          }
          b.sibling.return = b.return;
          b = b.sibling;
        }
      }
      return null;
    }
    var Ca = {};
    var Da = {};
    var Ea = /* @__PURE__ */ new WeakMap();
    function Fa(a) {
      switch (a.tag) {
        case "INSTANCE":
          var b = a.rootContainerInstance.createNodeMock;
          b = b({ type: a.type, props: a.props });
          "object" === typeof b && null !== b && Ea.set(b, a);
          return b;
        default:
          return a;
      }
    }
    function Ga(a, b) {
      var c = a.children.indexOf(b);
      -1 !== c && a.children.splice(c, 1);
      a.children.push(b);
    }
    function Ha(a, b, c) {
      var d = a.children.indexOf(b);
      -1 !== d && a.children.splice(d, 1);
      c = a.children.indexOf(c);
      a.children.splice(c, 0, b);
    }
    var Ia = setTimeout;
    var Ja = clearTimeout;
    var Ka = /^(.*)[\\\/]/;
    function La(a) {
      var b = "";
      do {
        a:
          switch (a.tag) {
            case 3:
            case 4:
            case 6:
            case 7:
            case 10:
            case 9:
              var c = "";
              break a;
            default:
              var d = a._debugOwner, e = a._debugSource, f = xa(a.type);
              c = null;
              d && (c = xa(d.type));
              d = f;
              f = "";
              e ? f = " (at " + e.fileName.replace(Ka, "") + ":" + e.lineNumber + ")" : c && (f = " (created by " + c + ")");
              c = "\n    in " + (d || "Unknown") + f;
          }
        b += c;
        a = a.return;
      } while (a);
      return b;
    }
    var Ma = [];
    var Na = -1;
    function B(a) {
      0 > Na || (a.current = Ma[Na], Ma[Na] = null, Na--);
    }
    function C(a, b) {
      Na++;
      Ma[Na] = a.current;
      a.current = b;
    }
    var Oa = {};
    var D = { current: Oa };
    var E = { current: false };
    var Pa = Oa;
    function Qa(a, b) {
      var c = a.type.contextTypes;
      if (!c)
        return Oa;
      var d = a.stateNode;
      if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
        return d.__reactInternalMemoizedMaskedChildContext;
      var e = {}, f;
      for (f in c)
        e[f] = b[f];
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
      return e;
    }
    function F(a) {
      a = a.childContextTypes;
      return null !== a && void 0 !== a;
    }
    function Ra() {
      B(E);
      B(D);
    }
    function Sa(a, b, c) {
      if (D.current !== Oa)
        throw Error(n(168));
      C(D, b);
      C(E, c);
    }
    function Ta(a, b, c) {
      var d = a.stateNode;
      a = b.childContextTypes;
      if ("function" !== typeof d.getChildContext)
        return c;
      d = d.getChildContext();
      for (var e in d)
        if (!(e in a))
          throw Error(n(108, xa(b) || "Unknown", e));
      return aa({}, c, {}, d);
    }
    function Ua(a) {
      a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Oa;
      Pa = D.current;
      C(D, a);
      C(E, E.current);
      return true;
    }
    function Va(a, b, c) {
      var d = a.stateNode;
      if (!d)
        throw Error(n(169));
      c ? (a = Ta(a, b, Pa), d.__reactInternalMemoizedMergedChildContext = a, B(E), B(D), C(D, a)) : B(E);
      C(E, c);
    }
    var Wa = m.unstable_runWithPriority;
    var Xa = m.unstable_scheduleCallback;
    var Ya = m.unstable_cancelCallback;
    var Za = m.unstable_requestPaint;
    var $a = m.unstable_now;
    var ab = m.unstable_getCurrentPriorityLevel;
    var bb = m.unstable_ImmediatePriority;
    var cb = m.unstable_UserBlockingPriority;
    var db = m.unstable_NormalPriority;
    var eb = m.unstable_LowPriority;
    var fb = m.unstable_IdlePriority;
    var gb = {};
    var hb = m.unstable_shouldYield;
    var ib = void 0 !== Za ? Za : function() {
    };
    var jb = null;
    var kb = null;
    var lb = false;
    var mb = $a();
    var G = 1e4 > mb ? $a : function() {
      return $a() - mb;
    };
    function nb() {
      switch (ab()) {
        case bb:
          return 99;
        case cb:
          return 98;
        case db:
          return 97;
        case eb:
          return 96;
        case fb:
          return 95;
        default:
          throw Error(n(332));
      }
    }
    function ob(a) {
      switch (a) {
        case 99:
          return bb;
        case 98:
          return cb;
        case 97:
          return db;
        case 96:
          return eb;
        case 95:
          return fb;
        default:
          throw Error(n(332));
      }
    }
    function pb(a, b) {
      a = ob(a);
      return Wa(a, b);
    }
    function qb(a, b, c) {
      a = ob(a);
      return Xa(a, b, c);
    }
    function rb(a) {
      null === jb ? (jb = [a], kb = Xa(bb, sb)) : jb.push(a);
      return gb;
    }
    function tb() {
      if (null !== kb) {
        var a = kb;
        kb = null;
        Ya(a);
      }
      sb();
    }
    function sb() {
      if (!lb && null !== jb) {
        lb = true;
        var a = 0;
        try {
          var b = jb;
          pb(99, function() {
            for (; a < b.length; a++) {
              var c = b[a];
              do
                c = c(true);
              while (null !== c);
            }
          });
          jb = null;
        } catch (c) {
          throw null !== jb && (jb = jb.slice(a + 1)), Xa(bb, tb), c;
        } finally {
          lb = false;
        }
      }
    }
    function ub(a, b) {
      return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
    }
    var vb = "function" === typeof Object.is ? Object.is : ub;
    var wb = Object.prototype.hasOwnProperty;
    function xb(a, b) {
      if (vb(a, b))
        return true;
      if ("object" !== typeof a || null === a || "object" !== typeof b || null === b)
        return false;
      var c = Object.keys(a), d = Object.keys(b);
      if (c.length !== d.length)
        return false;
      for (d = 0; d < c.length; d++)
        if (!wb.call(b, c[d]) || !vb(a[c[d]], b[c[d]]))
          return false;
      return true;
    }
    function H(a, b) {
      if (a && a.defaultProps) {
        b = aa({}, b);
        a = a.defaultProps;
        for (var c in a)
          void 0 === b[c] && (b[c] = a[c]);
      }
      return b;
    }
    var yb = { current: null };
    var zb = null;
    var Ab = null;
    var Bb = null;
    function Cb() {
      Bb = Ab = zb = null;
    }
    function Db(a) {
      var b = yb.current;
      B(yb);
      a.type._context._currentValue2 = b;
    }
    function Eb(a, b) {
      for (; null !== a; ) {
        var c = a.alternate;
        if (a.childExpirationTime < b)
          a.childExpirationTime = b, null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);
        else if (null !== c && c.childExpirationTime < b)
          c.childExpirationTime = b;
        else
          break;
        a = a.return;
      }
    }
    function Fb(a, b) {
      zb = a;
      Bb = Ab = null;
      a = a.dependencies;
      null !== a && null !== a.firstContext && (a.expirationTime >= b && (I = true), a.firstContext = null);
    }
    function J(a, b) {
      if (Bb !== a && false !== b && 0 !== b) {
        if ("number" !== typeof b || 1073741823 === b)
          Bb = a, b = 1073741823;
        b = { context: a, observedBits: b, next: null };
        if (null === Ab) {
          if (null === zb)
            throw Error(n(308));
          Ab = b;
          zb.dependencies = { expirationTime: 0, firstContext: b, responders: null };
        } else
          Ab = Ab.next = b;
      }
      return a._currentValue2;
    }
    var Gb = false;
    function Hb(a) {
      a.updateQueue = { baseState: a.memoizedState, baseQueue: null, shared: { pending: null }, effects: null };
    }
    function Ib(a, b) {
      a = a.updateQueue;
      b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, baseQueue: a.baseQueue, shared: a.shared, effects: a.effects });
    }
    function Jb(a, b) {
      a = { expirationTime: a, suspenseConfig: b, tag: 0, payload: null, callback: null, next: null };
      return a.next = a;
    }
    function Kb(a, b) {
      a = a.updateQueue;
      if (null !== a) {
        a = a.shared;
        var c = a.pending;
        null === c ? b.next = b : (b.next = c.next, c.next = b);
        a.pending = b;
      }
    }
    function Lb(a, b) {
      var c = a.alternate;
      null !== c && Ib(c, a);
      a = a.updateQueue;
      c = a.baseQueue;
      null === c ? (a.baseQueue = b.next = b, b.next = b) : (b.next = c.next, c.next = b);
    }
    function Mb(a, b, c, d) {
      var e = a.updateQueue;
      Gb = false;
      var f = e.baseQueue, g = e.shared.pending;
      if (null !== g) {
        if (null !== f) {
          var h = f.next;
          f.next = g.next;
          g.next = h;
        }
        f = g;
        e.shared.pending = null;
        h = a.alternate;
        null !== h && (h = h.updateQueue, null !== h && (h.baseQueue = g));
      }
      if (null !== f) {
        h = f.next;
        var k = e.baseState, l = 0, p = null, q = null, v = null;
        if (null !== h) {
          var x = h;
          do {
            g = x.expirationTime;
            if (g < d) {
              var P = { expirationTime: x.expirationTime, suspenseConfig: x.suspenseConfig, tag: x.tag, payload: x.payload, callback: x.callback, next: null };
              null === v ? (q = v = P, p = k) : v = v.next = P;
              g > l && (l = g);
            } else {
              null !== v && (v = v.next = { expirationTime: 1073741823, suspenseConfig: x.suspenseConfig, tag: x.tag, payload: x.payload, callback: x.callback, next: null });
              Nb(g, x.suspenseConfig);
              a: {
                var z = a, A = x;
                g = b;
                P = c;
                switch (A.tag) {
                  case 1:
                    z = A.payload;
                    if ("function" === typeof z) {
                      k = z.call(P, k, g);
                      break a;
                    }
                    k = z;
                    break a;
                  case 3:
                    z.effectTag = z.effectTag & -4097 | 64;
                  case 0:
                    z = A.payload;
                    g = "function" === typeof z ? z.call(P, k, g) : z;
                    if (null === g || void 0 === g)
                      break a;
                    k = aa({}, k, g);
                    break a;
                  case 2:
                    Gb = true;
                }
              }
              null !== x.callback && (a.effectTag |= 32, g = e.effects, null === g ? e.effects = [x] : g.push(x));
            }
            x = x.next;
            if (null === x || x === h)
              if (g = e.shared.pending, null === g)
                break;
              else
                x = f.next = g.next, g.next = h, e.baseQueue = f = g, e.shared.pending = null;
          } while (1);
        }
        null === v ? p = k : v.next = q;
        e.baseState = p;
        e.baseQueue = v;
        Ob(l);
        a.expirationTime = l;
        a.memoizedState = k;
      }
    }
    function Pb(a, b, c) {
      a = b.effects;
      b.effects = null;
      if (null !== a)
        for (b = 0; b < a.length; b++) {
          var d = a[b], e = d.callback;
          if (null !== e) {
            d.callback = null;
            d = e;
            e = c;
            if ("function" !== typeof d)
              throw Error(n(191, d));
            d.call(e);
          }
        }
    }
    var Qb = t.ReactCurrentBatchConfig;
    var Rb = new ca.Component().refs;
    function Sb(a, b, c, d) {
      b = a.memoizedState;
      c = c(d, b);
      c = null === c || void 0 === c ? b : aa({}, b, c);
      a.memoizedState = c;
      0 === a.expirationTime && (a.updateQueue.baseState = c);
    }
    var Wb = { isMounted: function(a) {
      return (a = a._reactInternalFiber) ? ya(a) === a : false;
    }, enqueueSetState: function(a, b, c) {
      a = a._reactInternalFiber;
      var d = Tb(), e = Qb.suspense;
      d = Ub(d, a, e);
      e = Jb(d, e);
      e.payload = b;
      void 0 !== c && null !== c && (e.callback = c);
      Kb(a, e);
      Vb(a, d);
    }, enqueueReplaceState: function(a, b, c) {
      a = a._reactInternalFiber;
      var d = Tb(), e = Qb.suspense;
      d = Ub(d, a, e);
      e = Jb(d, e);
      e.tag = 1;
      e.payload = b;
      void 0 !== c && null !== c && (e.callback = c);
      Kb(a, e);
      Vb(a, d);
    }, enqueueForceUpdate: function(a, b) {
      a = a._reactInternalFiber;
      var c = Tb(), d = Qb.suspense;
      c = Ub(c, a, d);
      d = Jb(c, d);
      d.tag = 2;
      void 0 !== b && null !== b && (d.callback = b);
      Kb(a, d);
      Vb(a, c);
    } };
    function Xb(a, b, c, d, e, f, g) {
      a = a.stateNode;
      return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !xb(c, d) || !xb(e, f) : true;
    }
    function Yb(a, b, c) {
      var d = false, e = Oa;
      var f = b.contextType;
      "object" === typeof f && null !== f ? f = J(f) : (e = F(b) ? Pa : D.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Qa(a, e) : Oa);
      b = new b(c, f);
      a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
      b.updater = Wb;
      a.stateNode = b;
      b._reactInternalFiber = a;
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
      return b;
    }
    function Zb(a, b, c, d) {
      a = b.state;
      "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
      "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
      b.state !== a && Wb.enqueueReplaceState(b, b.state, null);
    }
    function $b(a, b, c, d) {
      var e = a.stateNode;
      e.props = c;
      e.state = a.memoizedState;
      e.refs = Rb;
      Hb(a);
      var f = b.contextType;
      "object" === typeof f && null !== f ? e.context = J(f) : (f = F(b) ? Pa : D.current, e.context = Qa(a, f));
      Mb(a, c, e, d);
      e.state = a.memoizedState;
      f = b.getDerivedStateFromProps;
      "function" === typeof f && (Sb(a, b, f, c), e.state = a.memoizedState);
      "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Wb.enqueueReplaceState(e, e.state, null), Mb(a, c, e, d), e.state = a.memoizedState);
      "function" === typeof e.componentDidMount && (a.effectTag |= 4);
    }
    var ac = Array.isArray;
    function bc(a, b, c) {
      a = c.ref;
      if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c._owner) {
          c = c._owner;
          if (c) {
            if (1 !== c.tag)
              throw Error(n(309));
            var d = c.stateNode;
          }
          if (!d)
            throw Error(n(147, a));
          var e = "" + a;
          if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e)
            return b.ref;
          b = function(a2) {
            var b2 = d.refs;
            b2 === Rb && (b2 = d.refs = {});
            null === a2 ? delete b2[e] : b2[e] = a2;
          };
          b._stringRef = e;
          return b;
        }
        if ("string" !== typeof a)
          throw Error(n(284));
        if (!c._owner)
          throw Error(n(290, a));
      }
      return a;
    }
    function cc(a, b) {
      if ("textarea" !== a.type)
        throw Error(n(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, ""));
    }
    function dc(a) {
      function b(b2, c2) {
        if (a) {
          var d2 = b2.lastEffect;
          null !== d2 ? (d2.nextEffect = c2, b2.lastEffect = c2) : b2.firstEffect = b2.lastEffect = c2;
          c2.nextEffect = null;
          c2.effectTag = 8;
        }
      }
      function c(c2, d2) {
        if (!a)
          return null;
        for (; null !== d2; )
          b(c2, d2), d2 = d2.sibling;
        return null;
      }
      function d(a2, b2) {
        for (a2 = /* @__PURE__ */ new Map(); null !== b2; )
          null !== b2.key ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
        return a2;
      }
      function e(a2, b2) {
        a2 = ec(a2, b2);
        a2.index = 0;
        a2.sibling = null;
        return a2;
      }
      function f(b2, c2, d2) {
        b2.index = d2;
        if (!a)
          return c2;
        d2 = b2.alternate;
        if (null !== d2)
          return d2 = d2.index, d2 < c2 ? (b2.effectTag = 2, c2) : d2;
        b2.effectTag = 2;
        return c2;
      }
      function g(b2) {
        a && null === b2.alternate && (b2.effectTag = 2);
        return b2;
      }
      function h(a2, b2, c2, d2) {
        if (null === b2 || 6 !== b2.tag)
          return b2 = fc(c2, a2.mode, d2), b2.return = a2, b2;
        b2 = e(b2, c2);
        b2.return = a2;
        return b2;
      }
      function k(a2, b2, c2, d2) {
        if (null !== b2 && b2.elementType === c2.type)
          return d2 = e(b2, c2.props), d2.ref = bc(a2, b2, c2), d2.return = a2, d2;
        d2 = gc(c2.type, c2.key, c2.props, null, a2.mode, d2);
        d2.ref = bc(a2, b2, c2);
        d2.return = a2;
        return d2;
      }
      function l(a2, b2, c2, d2) {
        if (null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation)
          return b2 = hc(c2, a2.mode, d2), b2.return = a2, b2;
        b2 = e(b2, c2.children || []);
        b2.return = a2;
        return b2;
      }
      function p(a2, b2, c2, d2, f2) {
        if (null === b2 || 7 !== b2.tag)
          return b2 = ic(c2, a2.mode, d2, f2), b2.return = a2, b2;
        b2 = e(b2, c2);
        b2.return = a2;
        return b2;
      }
      function q(a2, b2, c2) {
        if ("string" === typeof b2 || "number" === typeof b2)
          return b2 = fc("" + b2, a2.mode, c2), b2.return = a2, b2;
        if ("object" === typeof b2 && null !== b2) {
          switch (b2.$$typeof) {
            case fa:
              return c2 = gc(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = bc(a2, null, b2), c2.return = a2, c2;
            case ha:
              return b2 = hc(b2, a2.mode, c2), b2.return = a2, b2;
          }
          if (ac(b2) || va(b2))
            return b2 = ic(b2, a2.mode, c2, null), b2.return = a2, b2;
          cc(a2, b2);
        }
        return null;
      }
      function v(a2, b2, c2, d2) {
        var e2 = null !== b2 ? b2.key : null;
        if ("string" === typeof c2 || "number" === typeof c2)
          return null !== e2 ? null : h(a2, b2, "" + c2, d2);
        if ("object" === typeof c2 && null !== c2) {
          switch (c2.$$typeof) {
            case fa:
              return c2.key === e2 ? c2.type === ia ? p(a2, b2, c2.props.children, d2, e2) : k(a2, b2, c2, d2) : null;
            case ha:
              return c2.key === e2 ? l(a2, b2, c2, d2) : null;
          }
          if (ac(c2) || va(c2))
            return null !== e2 ? null : p(a2, b2, c2, d2, null);
          cc(a2, c2);
        }
        return null;
      }
      function x(a2, b2, c2, d2, e2) {
        if ("string" === typeof d2 || "number" === typeof d2)
          return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
        if ("object" === typeof d2 && null !== d2) {
          switch (d2.$$typeof) {
            case fa:
              return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, d2.type === ia ? p(b2, a2, d2.props.children, e2, d2.key) : k(b2, a2, d2, e2);
            case ha:
              return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l(b2, a2, d2, e2);
          }
          if (ac(d2) || va(d2))
            return a2 = a2.get(c2) || null, p(b2, a2, d2, e2, null);
          cc(b2, d2);
        }
        return null;
      }
      function P(e2, g2, h2, k2) {
        for (var l2 = null, A = null, u = g2, r = g2 = 0, p2 = null; null !== u && r < h2.length; r++) {
          u.index > r ? (p2 = u, u = null) : p2 = u.sibling;
          var w = v(e2, u, h2[r], k2);
          if (null === w) {
            null === u && (u = p2);
            break;
          }
          a && u && null === w.alternate && b(e2, u);
          g2 = f(w, g2, r);
          null === A ? l2 = w : A.sibling = w;
          A = w;
          u = p2;
        }
        if (r === h2.length)
          return c(e2, u), l2;
        if (null === u) {
          for (; r < h2.length; r++)
            u = q(e2, h2[r], k2), null !== u && (g2 = f(u, g2, r), null === A ? l2 = u : A.sibling = u, A = u);
          return l2;
        }
        for (u = d(e2, u); r < h2.length; r++)
          p2 = x(u, e2, r, h2[r], k2), null !== p2 && (a && null !== p2.alternate && u.delete(null === p2.key ? r : p2.key), g2 = f(p2, g2, r), null === A ? l2 = p2 : A.sibling = p2, A = p2);
        a && u.forEach(function(a2) {
          return b(e2, a2);
        });
        return l2;
      }
      function z(e2, g2, h2, l2) {
        var k2 = va(h2);
        if ("function" !== typeof k2)
          throw Error(n(150));
        h2 = k2.call(h2);
        if (null == h2)
          throw Error(n(151));
        for (var u = k2 = null, r = g2, A = g2 = 0, p2 = null, w = h2.next(); null !== r && !w.done; A++, w = h2.next()) {
          r.index > A ? (p2 = r, r = null) : p2 = r.sibling;
          var z2 = v(e2, r, w.value, l2);
          if (null === z2) {
            null === r && (r = p2);
            break;
          }
          a && r && null === z2.alternate && b(e2, r);
          g2 = f(z2, g2, A);
          null === u ? k2 = z2 : u.sibling = z2;
          u = z2;
          r = p2;
        }
        if (w.done)
          return c(e2, r), k2;
        if (null === r) {
          for (; !w.done; A++, w = h2.next())
            w = q(e2, w.value, l2), null !== w && (g2 = f(w, g2, A), null === u ? k2 = w : u.sibling = w, u = w);
          return k2;
        }
        for (r = d(e2, r); !w.done; A++, w = h2.next())
          w = x(r, e2, A, w.value, l2), null !== w && (a && null !== w.alternate && r.delete(null === w.key ? A : w.key), g2 = f(w, g2, A), null === u ? k2 = w : u.sibling = w, u = w);
        a && r.forEach(function(a2) {
          return b(e2, a2);
        });
        return k2;
      }
      return function(a2, d2, f2, h2) {
        var k2 = "object" === typeof f2 && null !== f2 && f2.type === ia && null === f2.key;
        k2 && (f2 = f2.props.children);
        var l2 = "object" === typeof f2 && null !== f2;
        if (l2)
          switch (f2.$$typeof) {
            case fa:
              a: {
                l2 = f2.key;
                for (k2 = d2; null !== k2; ) {
                  if (k2.key === l2) {
                    switch (k2.tag) {
                      case 7:
                        if (f2.type === ia) {
                          c(a2, k2.sibling);
                          d2 = e(k2, f2.props.children);
                          d2.return = a2;
                          a2 = d2;
                          break a;
                        }
                        break;
                      default:
                        if (k2.elementType === f2.type) {
                          c(
                            a2,
                            k2.sibling
                          );
                          d2 = e(k2, f2.props);
                          d2.ref = bc(a2, k2, f2);
                          d2.return = a2;
                          a2 = d2;
                          break a;
                        }
                    }
                    c(a2, k2);
                    break;
                  } else
                    b(a2, k2);
                  k2 = k2.sibling;
                }
                f2.type === ia ? (d2 = ic(f2.props.children, a2.mode, h2, f2.key), d2.return = a2, a2 = d2) : (h2 = gc(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = bc(a2, d2, f2), h2.return = a2, a2 = h2);
              }
              return g(a2);
            case ha:
              a: {
                for (k2 = f2.key; null !== d2; ) {
                  if (d2.key === k2)
                    if (4 === d2.tag && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                      c(a2, d2.sibling);
                      d2 = e(d2, f2.children || []);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    } else {
                      c(a2, d2);
                      break;
                    }
                  else
                    b(a2, d2);
                  d2 = d2.sibling;
                }
                d2 = hc(f2, a2.mode, h2);
                d2.return = a2;
                a2 = d2;
              }
              return g(a2);
          }
        if ("string" === typeof f2 || "number" === typeof f2)
          return f2 = "" + f2, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = fc(f2, a2.mode, h2), d2.return = a2, a2 = d2), g(a2);
        if (ac(f2))
          return P(a2, d2, f2, h2);
        if (va(f2))
          return z(a2, d2, f2, h2);
        l2 && cc(a2, f2);
        if ("undefined" === typeof f2 && !k2)
          switch (a2.tag) {
            case 1:
            case 0:
              throw a2 = a2.type, Error(n(152, a2.displayName || a2.name || "Component"));
          }
        return c(a2, d2);
      };
    }
    var jc = dc(true);
    var kc = dc(false);
    var lc = {};
    var mc = { current: lc };
    var nc = { current: lc };
    var pc = { current: lc };
    function qc(a) {
      if (a === lc)
        throw Error(n(174));
      return a;
    }
    function rc(a, b) {
      C(pc, b);
      C(nc, a);
      C(mc, lc);
      B(mc);
      C(mc, Ca);
    }
    function sc() {
      B(mc);
      B(nc);
      B(pc);
    }
    function tc(a) {
      qc(pc.current);
      qc(mc.current) !== Ca && (C(nc, a), C(mc, Ca));
    }
    function uc(a) {
      nc.current === a && (B(mc), B(nc));
    }
    var K = { current: 0 };
    function vc(a) {
      for (var b = a; null !== b; ) {
        if (13 === b.tag) {
          var c = b.memoizedState, d;
          if (d = null !== c) {
            if (!(c = null === c.dehydrated))
              throw Error(n(305));
            if (!c)
              throw Error(n(305));
            d = c;
          }
          if (d)
            return b;
        } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
          if (0 !== (b.effectTag & 64))
            return b;
        } else if (null !== b.child) {
          b.child.return = b;
          b = b.child;
          continue;
        }
        if (b === a)
          break;
        for (; null === b.sibling; ) {
          if (null === b.return || b.return === a)
            return null;
          b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
      }
      return null;
    }
    function wc(a, b) {
      return { responder: a, props: b };
    }
    var xc = t.ReactCurrentDispatcher;
    var L = t.ReactCurrentBatchConfig;
    var yc = 0;
    var M = null;
    var N = null;
    var O = null;
    var zc = false;
    function Q() {
      throw Error(n(321));
    }
    function Ac(a, b) {
      if (null === b)
        return false;
      for (var c = 0; c < b.length && c < a.length; c++)
        if (!vb(a[c], b[c]))
          return false;
      return true;
    }
    function Bc(a, b, c, d, e, f) {
      yc = f;
      M = b;
      b.memoizedState = null;
      b.updateQueue = null;
      b.expirationTime = 0;
      xc.current = null === a || null === a.memoizedState ? Cc : Dc;
      a = c(d, e);
      if (b.expirationTime === yc) {
        f = 0;
        do {
          b.expirationTime = 0;
          if (!(25 > f))
            throw Error(n(301));
          f += 1;
          O = N = null;
          b.updateQueue = null;
          xc.current = Ec;
          a = c(d, e);
        } while (b.expirationTime === yc);
      }
      xc.current = Fc;
      b = null !== N && null !== N.next;
      yc = 0;
      O = N = M = null;
      zc = false;
      if (b)
        throw Error(n(300));
      return a;
    }
    function Gc() {
      var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      null === O ? M.memoizedState = O = a : O = O.next = a;
      return O;
    }
    function Hc() {
      if (null === N) {
        var a = M.alternate;
        a = null !== a ? a.memoizedState : null;
      } else
        a = N.next;
      var b = null === O ? M.memoizedState : O.next;
      if (null !== b)
        O = b, N = a;
      else {
        if (null === a)
          throw Error(n(310));
        N = a;
        a = { memoizedState: N.memoizedState, baseState: N.baseState, baseQueue: N.baseQueue, queue: N.queue, next: null };
        null === O ? M.memoizedState = O = a : O = O.next = a;
      }
      return O;
    }
    function Ic(a, b) {
      return "function" === typeof b ? b(a) : b;
    }
    function Jc(a) {
      var b = Hc(), c = b.queue;
      if (null === c)
        throw Error(n(311));
      c.lastRenderedReducer = a;
      var d = N, e = d.baseQueue, f = c.pending;
      if (null !== f) {
        if (null !== e) {
          var g = e.next;
          e.next = f.next;
          f.next = g;
        }
        d.baseQueue = e = f;
        c.pending = null;
      }
      if (null !== e) {
        e = e.next;
        d = d.baseState;
        var h = g = f = null, k = e;
        do {
          var l = k.expirationTime;
          if (l < yc) {
            var p = { expirationTime: k.expirationTime, suspenseConfig: k.suspenseConfig, action: k.action, eagerReducer: k.eagerReducer, eagerState: k.eagerState, next: null };
            null === h ? (g = h = p, f = d) : h = h.next = p;
            l > M.expirationTime && (M.expirationTime = l, Ob(l));
          } else
            null !== h && (h = h.next = { expirationTime: 1073741823, suspenseConfig: k.suspenseConfig, action: k.action, eagerReducer: k.eagerReducer, eagerState: k.eagerState, next: null }), Nb(l, k.suspenseConfig), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);
          k = k.next;
        } while (null !== k && k !== e);
        null === h ? f = d : h.next = g;
        vb(d, b.memoizedState) || (I = true);
        b.memoizedState = d;
        b.baseState = f;
        b.baseQueue = h;
        c.lastRenderedState = d;
      }
      return [b.memoizedState, c.dispatch];
    }
    function Kc(a) {
      var b = Hc(), c = b.queue;
      if (null === c)
        throw Error(n(311));
      c.lastRenderedReducer = a;
      var d = c.dispatch, e = c.pending, f = b.memoizedState;
      if (null !== e) {
        c.pending = null;
        var g = e = e.next;
        do
          f = a(f, g.action), g = g.next;
        while (g !== e);
        vb(f, b.memoizedState) || (I = true);
        b.memoizedState = f;
        null === b.baseQueue && (b.baseState = f);
        c.lastRenderedState = f;
      }
      return [f, d];
    }
    function Lc(a) {
      var b = Gc();
      "function" === typeof a && (a = a());
      b.memoizedState = b.baseState = a;
      a = b.queue = { pending: null, dispatch: null, lastRenderedReducer: Ic, lastRenderedState: a };
      a = a.dispatch = Mc.bind(null, M, a);
      return [b.memoizedState, a];
    }
    function Nc(a, b, c, d) {
      a = { tag: a, create: b, destroy: c, deps: d, next: null };
      b = M.updateQueue;
      null === b ? (b = { lastEffect: null }, M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
      return a;
    }
    function Oc() {
      return Hc().memoizedState;
    }
    function Pc(a, b, c, d) {
      var e = Gc();
      M.effectTag |= a;
      e.memoizedState = Nc(1 | b, c, void 0, void 0 === d ? null : d);
    }
    function Qc(a, b, c, d) {
      var e = Hc();
      d = void 0 === d ? null : d;
      var f = void 0;
      if (null !== N) {
        var g = N.memoizedState;
        f = g.destroy;
        if (null !== d && Ac(d, g.deps)) {
          Nc(b, c, f, d);
          return;
        }
      }
      M.effectTag |= a;
      e.memoizedState = Nc(1 | b, c, f, d);
    }
    function Rc(a, b) {
      return Pc(516, 4, a, b);
    }
    function Sc(a, b) {
      return Qc(516, 4, a, b);
    }
    function Tc(a, b) {
      return Qc(4, 2, a, b);
    }
    function Uc(a, b) {
      if ("function" === typeof b)
        return a = a(), b(a), function() {
          b(null);
        };
      if (null !== b && void 0 !== b)
        return a = a(), b.current = a, function() {
          b.current = null;
        };
    }
    function Vc(a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return Qc(4, 2, Uc.bind(null, b, a), c);
    }
    function Wc() {
    }
    function Xc(a, b) {
      Gc().memoizedState = [a, void 0 === b ? null : b];
      return a;
    }
    function Yc(a, b) {
      var c = Hc();
      b = void 0 === b ? null : b;
      var d = c.memoizedState;
      if (null !== d && null !== b && Ac(b, d[1]))
        return d[0];
      c.memoizedState = [a, b];
      return a;
    }
    function Zc(a, b) {
      var c = Hc();
      b = void 0 === b ? null : b;
      var d = c.memoizedState;
      if (null !== d && null !== b && Ac(b, d[1]))
        return d[0];
      a = a();
      c.memoizedState = [a, b];
      return a;
    }
    function $c(a, b, c) {
      var d = nb();
      pb(98 > d ? 98 : d, function() {
        a(true);
      });
      pb(97 < d ? 97 : d, function() {
        var d2 = L.suspense;
        L.suspense = void 0 === b ? null : b;
        try {
          a(false), c();
        } finally {
          L.suspense = d2;
        }
      });
    }
    function Mc(a, b, c) {
      var d = Tb(), e = Qb.suspense;
      d = Ub(d, a, e);
      e = { expirationTime: d, suspenseConfig: e, action: c, eagerReducer: null, eagerState: null, next: null };
      var f = b.pending;
      null === f ? e.next = e : (e.next = f.next, f.next = e);
      b.pending = e;
      f = a.alternate;
      if (a === M || null !== f && f === M)
        zc = true, e.expirationTime = yc, M.expirationTime = yc;
      else {
        if (0 === a.expirationTime && (null === f || 0 === f.expirationTime) && (f = b.lastRenderedReducer, null !== f))
          try {
            var g = b.lastRenderedState, h = f(g, c);
            e.eagerReducer = f;
            e.eagerState = h;
            if (vb(h, g))
              return;
          } catch (k) {
          } finally {
          }
        Vb(
          a,
          d
        );
      }
    }
    var Fc = { readContext: J, useCallback: Q, useContext: Q, useEffect: Q, useImperativeHandle: Q, useLayoutEffect: Q, useMemo: Q, useReducer: Q, useRef: Q, useState: Q, useDebugValue: Q, useResponder: Q, useDeferredValue: Q, useTransition: Q };
    var Cc = { readContext: J, useCallback: Xc, useContext: J, useEffect: Rc, useImperativeHandle: function(a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return Pc(4, 2, Uc.bind(null, b, a), c);
    }, useLayoutEffect: function(a, b) {
      return Pc(4, 2, a, b);
    }, useMemo: function(a, b) {
      var c = Gc();
      b = void 0 === b ? null : b;
      a = a();
      c.memoizedState = [
        a,
        b
      ];
      return a;
    }, useReducer: function(a, b, c) {
      var d = Gc();
      b = void 0 !== c ? c(b) : b;
      d.memoizedState = d.baseState = b;
      a = d.queue = { pending: null, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
      a = a.dispatch = Mc.bind(null, M, a);
      return [d.memoizedState, a];
    }, useRef: function(a) {
      var b = Gc();
      a = { current: a };
      return b.memoizedState = a;
    }, useState: Lc, useDebugValue: Wc, useResponder: wc, useDeferredValue: function(a, b) {
      var c = Lc(a), d = c[0], e = c[1];
      Rc(
        function() {
          var c2 = L.suspense;
          L.suspense = void 0 === b ? null : b;
          try {
            e(a);
          } finally {
            L.suspense = c2;
          }
        },
        [a, b]
      );
      return d;
    }, useTransition: function(a) {
      var b = Lc(false), c = b[0];
      b = b[1];
      return [Xc($c.bind(null, b, a), [b, a]), c];
    } };
    var Dc = { readContext: J, useCallback: Yc, useContext: J, useEffect: Sc, useImperativeHandle: Vc, useLayoutEffect: Tc, useMemo: Zc, useReducer: Jc, useRef: Oc, useState: function() {
      return Jc(Ic);
    }, useDebugValue: Wc, useResponder: wc, useDeferredValue: function(a, b) {
      var c = Jc(Ic), d = c[0], e = c[1];
      Sc(function() {
        var c2 = L.suspense;
        L.suspense = void 0 === b ? null : b;
        try {
          e(a);
        } finally {
          L.suspense = c2;
        }
      }, [a, b]);
      return d;
    }, useTransition: function(a) {
      var b = Jc(Ic), c = b[0];
      b = b[1];
      return [Yc($c.bind(null, b, a), [b, a]), c];
    } };
    var Ec = { readContext: J, useCallback: Yc, useContext: J, useEffect: Sc, useImperativeHandle: Vc, useLayoutEffect: Tc, useMemo: Zc, useReducer: Kc, useRef: Oc, useState: function() {
      return Kc(Ic);
    }, useDebugValue: Wc, useResponder: wc, useDeferredValue: function(a, b) {
      var c = Kc(Ic), d = c[0], e = c[1];
      Sc(function() {
        var c2 = L.suspense;
        L.suspense = void 0 === b ? null : b;
        try {
          e(a);
        } finally {
          L.suspense = c2;
        }
      }, [a, b]);
      return d;
    }, useTransition: function(a) {
      var b = Kc(Ic), c = b[0];
      b = b[1];
      return [Yc($c.bind(
        null,
        b,
        a
      ), [b, a]), c];
    } };
    var ad = t.ReactCurrentOwner;
    var I = false;
    function R(a, b, c, d) {
      b.child = null === a ? kc(b, null, c, d) : jc(b, a.child, c, d);
    }
    function bd(a, b, c, d, e) {
      c = c.render;
      var f = b.ref;
      Fb(b, e);
      d = Bc(a, b, c, d, f, e);
      if (null !== a && !I)
        return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), cd(a, b, e);
      b.effectTag |= 1;
      R(a, b, d, e);
      return b.child;
    }
    function dd(a, b, c, d, e, f) {
      if (null === a) {
        var g = c.type;
        if ("function" === typeof g && !ed(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps)
          return b.tag = 15, b.type = g, fd(a, b, g, d, e, f);
        a = gc(c.type, null, d, null, b.mode, f);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
      }
      g = a.child;
      if (e < f && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : xb, c(e, d) && a.ref === b.ref))
        return cd(a, b, f);
      b.effectTag |= 1;
      a = ec(g, d);
      a.ref = b.ref;
      a.return = b;
      return b.child = a;
    }
    function fd(a, b, c, d, e, f) {
      return null !== a && xb(a.memoizedProps, d) && a.ref === b.ref && (I = false, e < f) ? (b.expirationTime = a.expirationTime, cd(a, b, f)) : gd(a, b, c, d, f);
    }
    function hd(a, b) {
      var c = b.ref;
      if (null === a && null !== c || null !== a && a.ref !== c)
        b.effectTag |= 128;
    }
    function gd(a, b, c, d, e) {
      var f = F(c) ? Pa : D.current;
      f = Qa(b, f);
      Fb(b, e);
      c = Bc(a, b, c, d, f, e);
      if (null !== a && !I)
        return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), cd(a, b, e);
      b.effectTag |= 1;
      R(a, b, c, e);
      return b.child;
    }
    function id(a, b, c, d, e) {
      if (F(c)) {
        var f = true;
        Ua(b);
      } else
        f = false;
      Fb(b, e);
      if (null === b.stateNode)
        null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), Yb(b, c, d), $b(b, c, d, e), d = true;
      else if (null === a) {
        var g = b.stateNode, h = b.memoizedProps;
        g.props = h;
        var k = g.context, l = c.contextType;
        "object" === typeof l && null !== l ? l = J(l) : (l = F(c) ? Pa : D.current, l = Qa(b, l));
        var p = c.getDerivedStateFromProps, q = "function" === typeof p || "function" === typeof g.getSnapshotBeforeUpdate;
        q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Zb(b, g, d, l);
        Gb = false;
        var v = b.memoizedState;
        g.state = v;
        Mb(b, d, g, e);
        k = b.memoizedState;
        h !== d || v !== k || E.current || Gb ? ("function" === typeof p && (Sb(b, c, p, d), k = b.memoizedState), (h = Gb || Xb(b, c, h, d, v, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.effectTag |= 4)) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), d = false);
      } else
        g = b.stateNode, Ib(a, b), h = b.memoizedProps, g.props = b.type === b.elementType ? h : H(b.type, h), k = g.context, l = c.contextType, "object" === typeof l && null !== l ? l = J(l) : (l = F(c) ? Pa : D.current, l = Qa(b, l)), p = c.getDerivedStateFromProps, (q = "function" === typeof p || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Zb(b, g, d, l), Gb = false, k = b.memoizedState, g.state = k, Mb(b, d, g, e), v = b.memoizedState, h !== d || k !== v || E.current || Gb ? ("function" === typeof p && (Sb(b, c, p, d), v = b.memoizedState), (p = Gb || Xb(b, c, h, d, k, v, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, v, l), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, v, l)), "function" === typeof g.componentDidUpdate && (b.effectTag |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.effectTag |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = v), g.props = d, g.state = v, g.context = l, d = p) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), d = false);
      return jd(a, b, c, d, f, e);
    }
    function jd(a, b, c, d, e, f) {
      hd(a, b);
      var g = 0 !== (b.effectTag & 64);
      if (!d && !g)
        return e && Va(b, c, false), cd(a, b, f);
      d = b.stateNode;
      ad.current = b;
      var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
      b.effectTag |= 1;
      null !== a && g ? (b.child = jc(b, a.child, null, f), b.child = jc(b, null, h, f)) : R(a, b, h, f);
      b.memoizedState = d.state;
      e && Va(b, c, true);
      return b.child;
    }
    function kd(a) {
      var b = a.stateNode;
      b.pendingContext ? Sa(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Sa(a, b.context, false);
      rc(a, b.containerInfo);
    }
    var ld = { dehydrated: null, retryTime: 0 };
    function md(a, b, c) {
      var d = b.mode, e = b.pendingProps, f = K.current, g = false, h;
      (h = 0 !== (b.effectTag & 64)) || (h = 0 !== (f & 2) && (null === a || null !== a.memoizedState));
      h ? (g = true, b.effectTag &= -65) : null !== a && null === a.memoizedState || void 0 === e.fallback || true === e.unstable_avoidThisFallback || (f |= 1);
      C(K, f & 1);
      if (null === a) {
        if (g) {
          g = e.fallback;
          e = ic(null, d, 0, null);
          e.return = b;
          if (0 === (b.mode & 2))
            for (a = null !== b.memoizedState ? b.child.child : b.child, e.child = a; null !== a; )
              a.return = e, a = a.sibling;
          c = ic(g, d, c, null);
          c.return = b;
          e.sibling = c;
          b.memoizedState = ld;
          b.child = e;
          return c;
        }
        d = e.children;
        b.memoizedState = null;
        return b.child = kc(b, null, d, c);
      }
      if (null !== a.memoizedState) {
        a = a.child;
        d = a.sibling;
        if (g) {
          e = e.fallback;
          c = ec(a, a.pendingProps);
          c.return = b;
          if (0 === (b.mode & 2) && (g = null !== b.memoizedState ? b.child.child : b.child, g !== a.child))
            for (c.child = g; null !== g; )
              g.return = c, g = g.sibling;
          d = ec(d, e);
          d.return = b;
          c.sibling = d;
          c.childExpirationTime = 0;
          b.memoizedState = ld;
          b.child = c;
          return d;
        }
        c = jc(b, a.child, e.children, c);
        b.memoizedState = null;
        return b.child = c;
      }
      a = a.child;
      if (g) {
        g = e.fallback;
        e = ic(null, d, 0, null);
        e.return = b;
        e.child = a;
        null !== a && (a.return = e);
        if (0 === (b.mode & 2))
          for (a = null !== b.memoizedState ? b.child.child : b.child, e.child = a; null !== a; )
            a.return = e, a = a.sibling;
        c = ic(g, d, c, null);
        c.return = b;
        e.sibling = c;
        c.effectTag |= 2;
        e.childExpirationTime = 0;
        b.memoizedState = ld;
        b.child = e;
        return c;
      }
      b.memoizedState = null;
      return b.child = jc(b, a, e.children, c);
    }
    function nd(a, b) {
      a.expirationTime < b && (a.expirationTime = b);
      var c = a.alternate;
      null !== c && c.expirationTime < b && (c.expirationTime = b);
      Eb(a.return, b);
    }
    function od(a, b, c, d, e, f) {
      var g = a.memoizedState;
      null === g ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailExpiration: 0, tailMode: e, lastEffect: f } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailExpiration = 0, g.tailMode = e, g.lastEffect = f);
    }
    function pd(a, b, c) {
      var d = b.pendingProps, e = d.revealOrder, f = d.tail;
      R(a, b, d.children, c);
      d = K.current;
      if (0 !== (d & 2))
        d = d & 1 | 2, b.effectTag |= 64;
      else {
        if (null !== a && 0 !== (a.effectTag & 64))
          a:
            for (a = b.child; null !== a; ) {
              if (13 === a.tag)
                null !== a.memoizedState && nd(a, c);
              else if (19 === a.tag)
                nd(a, c);
              else if (null !== a.child) {
                a.child.return = a;
                a = a.child;
                continue;
              }
              if (a === b)
                break a;
              for (; null === a.sibling; ) {
                if (null === a.return || a.return === b)
                  break a;
                a = a.return;
              }
              a.sibling.return = a.return;
              a = a.sibling;
            }
        d &= 1;
      }
      C(K, d);
      if (0 === (b.mode & 2))
        b.memoizedState = null;
      else
        switch (e) {
          case "forwards":
            c = b.child;
            for (e = null; null !== c; )
              a = c.alternate, null !== a && null === vc(a) && (e = c), c = c.sibling;
            c = e;
            null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
            od(b, false, e, c, f, b.lastEffect);
            break;
          case "backwards":
            c = null;
            e = b.child;
            for (b.child = null; null !== e; ) {
              a = e.alternate;
              if (null !== a && null === vc(a)) {
                b.child = e;
                break;
              }
              a = e.sibling;
              e.sibling = c;
              c = e;
              e = a;
            }
            od(b, true, c, null, f, b.lastEffect);
            break;
          case "together":
            od(b, false, null, null, void 0, b.lastEffect);
            break;
          default:
            b.memoizedState = null;
        }
      return b.child;
    }
    function cd(a, b, c) {
      null !== a && (b.dependencies = a.dependencies);
      var d = b.expirationTime;
      0 !== d && Ob(d);
      if (b.childExpirationTime < c)
        return null;
      if (null !== a && b.child !== a.child)
        throw Error(n(153));
      if (null !== b.child) {
        a = b.child;
        c = ec(a, a.pendingProps);
        b.child = c;
        for (c.return = b; null !== a.sibling; )
          a = a.sibling, c = c.sibling = ec(a, a.pendingProps), c.return = b;
        c.sibling = null;
      }
      return b.child;
    }
    var qd;
    var rd;
    var sd;
    var td;
    qd = function(a, b) {
      for (var c = b.child; null !== c; ) {
        if (5 === c.tag || 6 === c.tag) {
          var d = a, e = c.stateNode, f = d.children.indexOf(e);
          -1 !== f && d.children.splice(f, 1);
          d.children.push(e);
        } else if (4 !== c.tag && null !== c.child) {
          c.child.return = c;
          c = c.child;
          continue;
        }
        if (c === b)
          break;
        for (; null === c.sibling; ) {
          if (null === c.return || c.return === b)
            return;
          c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
      }
    };
    rd = function() {
    };
    sd = function(a, b, c, d) {
      a.memoizedProps !== d && (qc(mc.current), b.updateQueue = Da) && (b.effectTag |= 4);
    };
    td = function(a, b, c, d) {
      c !== d && (b.effectTag |= 4);
    };
    function ud(a, b) {
      switch (a.tailMode) {
        case "hidden":
          b = a.tail;
          for (var c = null; null !== b; )
            null !== b.alternate && (c = b), b = b.sibling;
          null === c ? a.tail = null : c.sibling = null;
          break;
        case "collapsed":
          c = a.tail;
          for (var d = null; null !== c; )
            null !== c.alternate && (d = c), c = c.sibling;
          null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
      }
    }
    function vd(a, b, c) {
      var d = b.pendingProps;
      switch (b.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return null;
        case 1:
          return F(b.type) && Ra(), null;
        case 3:
          return sc(), B(E), B(D), a = b.stateNode, a.pendingContext && (a.context = a.pendingContext, a.pendingContext = null), rd(b), null;
        case 5:
          uc(b);
          var e = qc(pc.current);
          c = b.type;
          if (null !== a && null != b.stateNode)
            sd(a, b, c, d, e), a.ref !== b.ref && (b.effectTag |= 128);
          else {
            if (!d) {
              if (null === b.stateNode)
                throw Error(n(166));
              return null;
            }
            qc(mc.current);
            a = { type: c, props: d, isHidden: false, children: [], internalInstanceHandle: b, rootContainerInstance: e, tag: "INSTANCE" };
            qd(a, b, false, false);
            b.stateNode = a;
            null !== b.ref && (b.effectTag |= 128);
          }
          return null;
        case 6:
          if (a && null != b.stateNode)
            td(a, b, a.memoizedProps, d);
          else {
            if ("string" !== typeof d && null === b.stateNode)
              throw Error(n(166));
            qc(pc.current);
            qc(mc.current);
            b.stateNode = { text: d, isHidden: false, tag: "TEXT" };
          }
          return null;
        case 13:
          B(K);
          d = b.memoizedState;
          if (0 !== (b.effectTag & 64))
            return b.expirationTime = c, b;
          d = null !== d;
          e = false;
          if (null !== a && (c = a.memoizedState, e = null !== c, !d && null !== c && (c = a.child.sibling, null !== c))) {
            var f = b.firstEffect;
            null !== f ? (b.firstEffect = c, c.nextEffect = f) : (b.firstEffect = b.lastEffect = c, c.nextEffect = null);
            c.effectTag = 8;
          }
          if (d && !e && 0 !== (b.mode & 2))
            if (null === a && true !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (K.current & 1))
              S === wd && (S = xd);
            else {
              if (S === wd || S === xd)
                S = yd;
              0 !== zd && null !== T && (Ad(T, U), Bd(T, zd));
            }
          if (d || e)
            b.effectTag |= 4;
          return null;
        case 4:
          return sc(), rd(b), null;
        case 10:
          return Db(b), null;
        case 17:
          return F(b.type) && Ra(), null;
        case 19:
          B(K);
          d = b.memoizedState;
          if (null === d)
            return null;
          e = 0 !== (b.effectTag & 64);
          f = d.rendering;
          if (null === f)
            if (e)
              ud(d, false);
            else {
              if (S !== wd || null !== a && 0 !== (a.effectTag & 64))
                for (a = b.child; null !== a; ) {
                  f = vc(a);
                  if (null !== f) {
                    b.effectTag |= 64;
                    ud(d, false);
                    a = f.updateQueue;
                    null !== a && (b.updateQueue = a, b.effectTag |= 4);
                    null === d.lastEffect && (b.firstEffect = null);
                    b.lastEffect = d.lastEffect;
                    a = c;
                    for (d = b.child; null !== d; )
                      e = d, c = a, e.effectTag &= 2, e.nextEffect = null, e.firstEffect = null, e.lastEffect = null, f = e.alternate, null === f ? (e.childExpirationTime = 0, e.expirationTime = c, e.child = null, e.memoizedProps = null, e.memoizedState = null, e.updateQueue = null, e.dependencies = null) : (e.childExpirationTime = f.childExpirationTime, e.expirationTime = f.expirationTime, e.child = f.child, e.memoizedProps = f.memoizedProps, e.memoizedState = f.memoizedState, e.updateQueue = f.updateQueue, c = f.dependencies, e.dependencies = null === c ? null : { expirationTime: c.expirationTime, firstContext: c.firstContext, responders: c.responders }), d = d.sibling;
                    C(K, K.current & 1 | 2);
                    return b.child;
                  }
                  a = a.sibling;
                }
            }
          else {
            if (!e)
              if (a = vc(f), null !== a) {
                if (b.effectTag |= 64, e = true, a = a.updateQueue, null !== a && (b.updateQueue = a, b.effectTag |= 4), ud(d, true), null === d.tail && "hidden" === d.tailMode && !f.alternate)
                  return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;
              } else
                2 * G() - d.renderingStartTime > d.tailExpiration && 1 < c && (b.effectTag |= 64, e = true, ud(d, false), b.expirationTime = b.childExpirationTime = c - 1);
            d.isBackwards ? (f.sibling = b.child, b.child = f) : (a = d.last, null !== a ? a.sibling = f : b.child = f, d.last = f);
          }
          return null !== d.tail ? (0 === d.tailExpiration && (d.tailExpiration = G() + 500), a = d.tail, d.rendering = a, d.tail = a.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = G(), a.sibling = null, b = K.current, C(K, e ? b & 1 | 2 : b & 1), a) : null;
      }
      throw Error(n(156, b.tag));
    }
    function Cd(a) {
      switch (a.tag) {
        case 1:
          F(a.type) && Ra();
          var b = a.effectTag;
          return b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;
        case 3:
          sc();
          B(E);
          B(D);
          b = a.effectTag;
          if (0 !== (b & 64))
            throw Error(n(285));
          a.effectTag = b & -4097 | 64;
          return a;
        case 5:
          return uc(a), null;
        case 13:
          return B(K), b = a.effectTag, b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;
        case 19:
          return B(K), null;
        case 4:
          return sc(), null;
        case 10:
          return Db(a), null;
        default:
          return null;
      }
    }
    function Dd(a, b) {
      return { value: a, source: b, stack: La(b) };
    }
    var Ed = "function" === typeof WeakSet ? WeakSet : Set;
    function Fd(a, b) {
      var c = b.source, d = b.stack;
      null === d && null !== c && (d = La(c));
      null !== c && xa(c.type);
      b = b.value;
      null !== a && 1 === a.tag && xa(a.type);
      try {
        console.error(b);
      } catch (e) {
        setTimeout(function() {
          throw e;
        });
      }
    }
    function Gd(a, b) {
      try {
        b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();
      } catch (c) {
        Hd(a, c);
      }
    }
    function Id(a) {
      var b = a.ref;
      if (null !== b)
        if ("function" === typeof b)
          try {
            b(null);
          } catch (c) {
            Hd(a, c);
          }
        else
          b.current = null;
    }
    function Jd(a, b) {
      switch (b.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
          return;
        case 1:
          if (b.effectTag & 256 && null !== a) {
            var c = a.memoizedProps, d = a.memoizedState;
            a = b.stateNode;
            b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : H(b.type, c), d);
            a.__reactInternalSnapshotBeforeUpdate = b;
          }
          return;
        case 3:
        case 5:
        case 6:
        case 4:
        case 17:
          return;
      }
      throw Error(n(163));
    }
    function Kd(a, b) {
      b = b.updateQueue;
      b = null !== b ? b.lastEffect : null;
      if (null !== b) {
        var c = b = b.next;
        do {
          if ((c.tag & a) === a) {
            var d = c.destroy;
            c.destroy = void 0;
            void 0 !== d && d();
          }
          c = c.next;
        } while (c !== b);
      }
    }
    function Md(a, b) {
      b = b.updateQueue;
      b = null !== b ? b.lastEffect : null;
      if (null !== b) {
        var c = b = b.next;
        do {
          if ((c.tag & a) === a) {
            var d = c.create;
            c.destroy = d();
          }
          c = c.next;
        } while (c !== b);
      }
    }
    function Nd(a, b, c) {
      switch (c.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
          Md(3, c);
          return;
        case 1:
          a = c.stateNode;
          if (c.effectTag & 4)
            if (null === b)
              a.componentDidMount();
            else {
              var d = c.elementType === c.type ? b.memoizedProps : H(c.type, b.memoizedProps);
              a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate);
            }
          b = c.updateQueue;
          null !== b && Pb(c, b, a);
          return;
        case 3:
          b = c.updateQueue;
          if (null !== b) {
            a = null;
            if (null !== c.child)
              switch (c.child.tag) {
                case 5:
                  a = Fa(c.child.stateNode);
                  break;
                case 1:
                  a = c.child.stateNode;
              }
            Pb(c, b, a);
          }
          return;
        case 5:
          return;
        case 6:
          return;
        case 4:
          return;
        case 12:
          return;
        case 13:
          return;
        case 19:
        case 17:
        case 20:
        case 21:
          return;
      }
      throw Error(n(163));
    }
    function Od(a, b, c) {
      "function" === typeof Pd && Pd(b);
      switch (b.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
          a = b.updateQueue;
          if (null !== a && (a = a.lastEffect, null !== a)) {
            var d = a.next;
            pb(97 < c ? 97 : c, function() {
              var a2 = d;
              do {
                var c2 = a2.destroy;
                if (void 0 !== c2) {
                  var g = b;
                  try {
                    c2();
                  } catch (h) {
                    Hd(g, h);
                  }
                }
                a2 = a2.next;
              } while (a2 !== d);
            });
          }
          break;
        case 1:
          Id(b);
          c = b.stateNode;
          "function" === typeof c.componentWillUnmount && Gd(b, c);
          break;
        case 5:
          Id(b);
          break;
        case 4:
          Qd(a, b, c);
      }
    }
    function Rd(a) {
      var b = a.alternate;
      a.return = null;
      a.child = null;
      a.memoizedState = null;
      a.updateQueue = null;
      a.dependencies = null;
      a.alternate = null;
      a.firstEffect = null;
      a.lastEffect = null;
      a.pendingProps = null;
      a.memoizedProps = null;
      a.stateNode = null;
      null !== b && Rd(b);
    }
    function Sd(a) {
      return 5 === a.tag || 3 === a.tag || 4 === a.tag;
    }
    function Td(a) {
      a: {
        for (var b = a.return; null !== b; ) {
          if (Sd(b)) {
            var c = b;
            break a;
          }
          b = b.return;
        }
        throw Error(n(160));
      }
      b = c.stateNode;
      switch (c.tag) {
        case 5:
          var d = false;
          break;
        case 3:
          b = b.containerInfo;
          d = true;
          break;
        case 4:
          b = b.containerInfo;
          d = true;
          break;
        default:
          throw Error(n(161));
      }
      c.effectTag & 16 && (c.effectTag &= -17);
      a:
        b:
          for (c = a; ; ) {
            for (; null === c.sibling; ) {
              if (null === c.return || Sd(c.return)) {
                c = null;
                break a;
              }
              c = c.return;
            }
            c.sibling.return = c.return;
            for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag; ) {
              if (c.effectTag & 2)
                continue b;
              if (null === c.child || 4 === c.tag)
                continue b;
              else
                c.child.return = c, c = c.child;
            }
            if (!(c.effectTag & 2)) {
              c = c.stateNode;
              break a;
            }
          }
      d ? Ud(a, c, b) : Vd(a, c, b);
    }
    function Ud(a, b, c) {
      var d = a.tag, e = 5 === d || 6 === d;
      if (e)
        a = e ? a.stateNode : a.stateNode.instance, b ? Ha(c, a, b) : Ga(c, a);
      else if (4 !== d && (a = a.child, null !== a))
        for (Ud(a, b, c), a = a.sibling; null !== a; )
          Ud(a, b, c), a = a.sibling;
    }
    function Vd(a, b, c) {
      var d = a.tag, e = 5 === d || 6 === d;
      if (e)
        a = e ? a.stateNode : a.stateNode.instance, b ? Ha(c, a, b) : Ga(c, a);
      else if (4 !== d && (a = a.child, null !== a))
        for (Vd(a, b, c), a = a.sibling; null !== a; )
          Vd(a, b, c), a = a.sibling;
    }
    function Qd(a, b, c) {
      for (var d = b, e = false, f; ; ) {
        if (!e) {
          e = d.return;
          a:
            for (; ; ) {
              if (null === e)
                throw Error(n(160));
              f = e.stateNode;
              switch (e.tag) {
                case 5:
                  break a;
                case 3:
                  f = f.containerInfo;
                  break a;
                case 4:
                  f = f.containerInfo;
                  break a;
              }
              e = e.return;
            }
          e = true;
        }
        if (5 === d.tag || 6 === d.tag) {
          a:
            for (var g = a, h = d, k = c, l = h; ; )
              if (Od(g, l, k), null !== l.child && 4 !== l.tag)
                l.child.return = l, l = l.child;
              else {
                if (l === h)
                  break a;
                for (; null === l.sibling; ) {
                  if (null === l.return || l.return === h)
                    break a;
                  l = l.return;
                }
                l.sibling.return = l.return;
                l = l.sibling;
              }
          g = f;
          h = g.children.indexOf(d.stateNode);
          g.children.splice(h, 1);
        } else if (4 === d.tag) {
          if (null !== d.child) {
            f = d.stateNode.containerInfo;
            d.child.return = d;
            d = d.child;
            continue;
          }
        } else if (Od(a, d, c), null !== d.child) {
          d.child.return = d;
          d = d.child;
          continue;
        }
        if (d === b)
          break;
        for (; null === d.sibling; ) {
          if (null === d.return || d.return === b)
            return;
          d = d.return;
          4 === d.tag && (e = false);
        }
        d.sibling.return = d.return;
        d = d.sibling;
      }
    }
    function Wd(a, b) {
      switch (b.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
          Kd(3, b);
          return;
        case 1:
          return;
        case 5:
          a = b.stateNode;
          if (null != a) {
            var c = b.memoizedProps, d = b.type, e = b.updateQueue;
            b.updateQueue = null;
            null !== e && (a.type = d, a.props = c);
          }
          return;
        case 6:
          if (null === b.stateNode)
            throw Error(n(162));
          b.stateNode.text = b.memoizedProps;
          return;
        case 3:
          return;
        case 12:
          return;
        case 13:
          a = b;
          null === b.memoizedState ? c = false : (c = true, a = b.child, Xd = G());
          if (null !== a)
            a:
              for (d = a; ; ) {
                if (5 === d.tag)
                  e = d.stateNode, c ? e.isHidden = true : d.stateNode.isHidden = false;
                else if (6 === d.tag)
                  d.stateNode.isHidden = c ? true : false;
                else if (13 === d.tag && null !== d.memoizedState && null === d.memoizedState.dehydrated) {
                  e = d.child.sibling;
                  e.return = d;
                  d = e;
                  continue;
                } else if (null !== d.child) {
                  d.child.return = d;
                  d = d.child;
                  continue;
                }
                if (d === a)
                  break;
                for (; null === d.sibling; ) {
                  if (null === d.return || d.return === a)
                    break a;
                  d = d.return;
                }
                d.sibling.return = d.return;
                d = d.sibling;
              }
          Yd(b);
          return;
        case 19:
          Yd(b);
          return;
        case 17:
          return;
      }
      throw Error(n(163));
    }
    function Yd(a) {
      var b = a.updateQueue;
      if (null !== b) {
        a.updateQueue = null;
        var c = a.stateNode;
        null === c && (c = a.stateNode = new Ed());
        b.forEach(function(b2) {
          var d = Zd.bind(null, a, b2);
          c.has(b2) || (c.add(b2), b2.then(d, d));
        });
      }
    }
    var $d = "function" === typeof WeakMap ? WeakMap : Map;
    function ae(a, b, c) {
      c = Jb(c, null);
      c.tag = 3;
      c.payload = { element: null };
      var d = b.value;
      c.callback = function() {
        be || (be = true, ce = d);
        Fd(a, b);
      };
      return c;
    }
    function de(a, b, c) {
      c = Jb(c, null);
      c.tag = 3;
      var d = a.type.getDerivedStateFromError;
      if ("function" === typeof d) {
        var e = b.value;
        c.payload = function() {
          Fd(a, b);
          return d(e);
        };
      }
      var f = a.stateNode;
      null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
        "function" !== typeof d && (null === ee ? ee = /* @__PURE__ */ new Set([this]) : ee.add(this), Fd(a, b));
        var c2 = b.stack;
        this.componentDidCatch(b.value, { componentStack: null !== c2 ? c2 : "" });
      });
      return c;
    }
    var fe = Math.ceil;
    var ge = t.ReactCurrentDispatcher;
    var he = t.ReactCurrentOwner;
    var V = 0;
    var ie = 8;
    var je = 16;
    var ke = 32;
    var wd = 0;
    var le = 1;
    var me = 2;
    var xd = 3;
    var yd = 4;
    var ne = 5;
    var W = V;
    var T = null;
    var X = null;
    var U = 0;
    var S = wd;
    var oe = null;
    var pe = 1073741823;
    var qe = 1073741823;
    var re = null;
    var zd = 0;
    var se = false;
    var Xd = 0;
    var te = 500;
    var Y = null;
    var be = false;
    var ce = null;
    var ee = null;
    var ue = false;
    var ve = null;
    var we = 90;
    var xe = null;
    var ye = 0;
    var ze = null;
    var Ae = 0;
    function Tb() {
      return (W & (je | ke)) !== V ? 1073741821 - (G() / 10 | 0) : 0 !== Ae ? Ae : Ae = 1073741821 - (G() / 10 | 0);
    }
    function Ub(a, b, c) {
      b = b.mode;
      if (0 === (b & 2))
        return 1073741823;
      var d = nb();
      if (0 === (b & 4))
        return 99 === d ? 1073741823 : 1073741822;
      if ((W & je) !== V)
        return U;
      if (null !== c)
        a = 1073741821 - 25 * (((1073741821 - a + (c.timeoutMs | 0 || 5e3) / 10) / 25 | 0) + 1);
      else
        switch (d) {
          case 99:
            a = 1073741823;
            break;
          case 98:
            a = 1073741821 - 10 * (((1073741821 - a + 15) / 10 | 0) + 1);
            break;
          case 97:
          case 96:
            a = 1073741821 - 25 * (((1073741821 - a + 500) / 25 | 0) + 1);
            break;
          case 95:
            a = 2;
            break;
          default:
            throw Error(n(326));
        }
      null !== T && a === U && --a;
      return a;
    }
    function Vb(a, b) {
      if (50 < ye)
        throw ye = 0, ze = null, Error(n(185));
      a = Be(a, b);
      if (null !== a) {
        var c = nb();
        1073741823 === b ? (W & ie) !== V && (W & (je | ke)) === V ? Ce(a) : (Z(a), W === V && tb()) : Z(a);
        (W & 4) === V || 98 !== c && 99 !== c || (null === xe ? xe = /* @__PURE__ */ new Map([[a, b]]) : (c = xe.get(a), (void 0 === c || c > b) && xe.set(a, b)));
      }
    }
    function Be(a, b) {
      a.expirationTime < b && (a.expirationTime = b);
      var c = a.alternate;
      null !== c && c.expirationTime < b && (c.expirationTime = b);
      var d = a.return, e = null;
      if (null === d && 3 === a.tag)
        e = a.stateNode;
      else
        for (; null !== d; ) {
          c = d.alternate;
          d.childExpirationTime < b && (d.childExpirationTime = b);
          null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);
          if (null === d.return && 3 === d.tag) {
            e = d.stateNode;
            break;
          }
          d = d.return;
        }
      null !== e && (T === e && (Ob(b), S === yd && Ad(e, U)), Bd(e, b));
      return e;
    }
    function De(a) {
      var b = a.lastExpiredTime;
      if (0 !== b)
        return b;
      b = a.firstPendingTime;
      if (!Ee(a, b))
        return b;
      var c = a.lastPingedTime;
      a = a.nextKnownPendingLevel;
      a = c > a ? c : a;
      return 2 >= a && b !== a ? 0 : a;
    }
    function Z(a) {
      if (0 !== a.lastExpiredTime)
        a.callbackExpirationTime = 1073741823, a.callbackPriority = 99, a.callbackNode = rb(Ce.bind(null, a));
      else {
        var b = De(a), c = a.callbackNode;
        if (0 === b)
          null !== c && (a.callbackNode = null, a.callbackExpirationTime = 0, a.callbackPriority = 90);
        else {
          var d = Tb();
          1073741823 === b ? d = 99 : 1 === b || 2 === b ? d = 95 : (d = 10 * (1073741821 - b) - 10 * (1073741821 - d), d = 0 >= d ? 99 : 250 >= d ? 98 : 5250 >= d ? 97 : 95);
          if (null !== c) {
            var e = a.callbackPriority;
            if (a.callbackExpirationTime === b && e >= d)
              return;
            c !== gb && Ya(c);
          }
          a.callbackExpirationTime = b;
          a.callbackPriority = d;
          b = 1073741823 === b ? rb(Ce.bind(null, a)) : qb(d, Fe.bind(null, a), { timeout: 10 * (1073741821 - b) - G() });
          a.callbackNode = b;
        }
      }
    }
    function Fe(a, b) {
      Ae = 0;
      if (b) {
        b = Tb();
        var c = a.lastExpiredTime;
        if (0 === c || c > b)
          a.lastExpiredTime = b;
        Z(a);
        return null;
      }
      c = De(a);
      if (0 !== c) {
        b = a.callbackNode;
        if ((W & (je | ke)) !== V)
          throw Error(n(327));
        Ge();
        a === T && c === U || He(a, c);
        if (null !== X) {
          var d = W;
          W |= je;
          var e = Ie();
          do
            try {
              Je();
              break;
            } catch (h) {
              Ke(a, h);
            }
          while (1);
          Cb();
          W = d;
          ge.current = e;
          if (S === le)
            throw b = oe, He(a, c), Ad(a, c), Z(a), b;
          if (null === X)
            switch (e = a.finishedWork = a.current.alternate, a.finishedExpirationTime = c, d = S, T = null, d) {
              case wd:
              case le:
                throw Error(n(345));
              case me:
                c = 2 < c ? 2 : c;
                d = a.lastExpiredTime;
                if (0 === d || d > c)
                  a.lastExpiredTime = c;
                break;
              case xd:
                Ad(a, c);
                d = a.lastSuspendedTime;
                c === d && (a.nextKnownPendingLevel = Le(e));
                if (1073741823 === pe && (e = Xd + te - G(), 10 < e)) {
                  if (se) {
                    var f = a.lastPingedTime;
                    if (0 === f || f >= c) {
                      a.lastPingedTime = c;
                      He(a, c);
                      break;
                    }
                  }
                  f = De(a);
                  if (0 !== f && f !== c)
                    break;
                  if (0 !== d && d !== c) {
                    a.lastPingedTime = d;
                    break;
                  }
                  a.timeoutHandle = Ia(Me.bind(null, a), e);
                  break;
                }
                Me(a);
                break;
              case yd:
                Ad(a, c);
                d = a.lastSuspendedTime;
                c === d && (a.nextKnownPendingLevel = Le(e));
                if (se && (e = a.lastPingedTime, 0 === e || e >= c)) {
                  a.lastPingedTime = c;
                  He(a, c);
                  break;
                }
                e = De(a);
                if (0 !== e && e !== c)
                  break;
                if (0 !== d && d !== c) {
                  a.lastPingedTime = d;
                  break;
                }
                1073741823 !== qe ? d = 10 * (1073741821 - qe) - G() : 1073741823 === pe ? d = 0 : (d = 10 * (1073741821 - pe) - 5e3, e = G(), c = 10 * (1073741821 - c) - e, d = e - d, 0 > d && (d = 0), d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * fe(d / 1960)) - d, c < d && (d = c));
                if (10 < d) {
                  a.timeoutHandle = Ia(Me.bind(null, a), d);
                  break;
                }
                Me(a);
                break;
              case ne:
                if (1073741823 !== pe && null !== re) {
                  f = pe;
                  var g = re;
                  d = g.busyMinDurationMs | 0;
                  0 >= d ? d = 0 : (e = g.busyDelayMs | 0, f = G() - (10 * (1073741821 - f) - (g.timeoutMs | 0 || 5e3)), d = f <= e ? 0 : e + d - f);
                  if (10 < d) {
                    Ad(a, c);
                    a.timeoutHandle = Ia(Me.bind(null, a), d);
                    break;
                  }
                }
                Me(a);
                break;
              default:
                throw Error(n(329));
            }
          Z(a);
          if (a.callbackNode === b)
            return Fe.bind(null, a);
        }
      }
      return null;
    }
    function Ce(a) {
      var b = a.lastExpiredTime;
      b = 0 !== b ? b : 1073741823;
      if ((W & (je | ke)) !== V)
        throw Error(n(327));
      Ge();
      a === T && b === U || He(a, b);
      if (null !== X) {
        var c = W;
        W |= je;
        var d = Ie();
        do
          try {
            Ne();
            break;
          } catch (e) {
            Ke(a, e);
          }
        while (1);
        Cb();
        W = c;
        ge.current = d;
        if (S === le)
          throw c = oe, He(a, b), Ad(a, b), Z(a), c;
        if (null !== X)
          throw Error(n(261));
        a.finishedWork = a.current.alternate;
        a.finishedExpirationTime = b;
        T = null;
        Me(a);
        Z(a);
      }
      return null;
    }
    function Oe(a, b) {
      var c = W;
      W |= 1;
      try {
        return a(b);
      } finally {
        W = c, W === V && tb();
      }
    }
    function He(a, b) {
      a.finishedWork = null;
      a.finishedExpirationTime = 0;
      var c = a.timeoutHandle;
      -1 !== c && (a.timeoutHandle = -1, Ja(c));
      if (null !== X)
        for (c = X.return; null !== c; ) {
          var d = c;
          switch (d.tag) {
            case 1:
              d = d.type.childContextTypes;
              null !== d && void 0 !== d && Ra();
              break;
            case 3:
              sc();
              B(E);
              B(D);
              break;
            case 5:
              uc(d);
              break;
            case 4:
              sc();
              break;
            case 13:
              B(K);
              break;
            case 19:
              B(K);
              break;
            case 10:
              Db(d);
          }
          c = c.return;
        }
      T = a;
      X = ec(a.current, null);
      U = b;
      S = wd;
      oe = null;
      qe = pe = 1073741823;
      re = null;
      zd = 0;
      se = false;
    }
    function Ke(a, b) {
      do {
        try {
          Cb();
          xc.current = Fc;
          if (zc)
            for (var c = M.memoizedState; null !== c; ) {
              var d = c.queue;
              null !== d && (d.pending = null);
              c = c.next;
            }
          yc = 0;
          O = N = M = null;
          zc = false;
          if (null === X || null === X.return)
            return S = le, oe = b, X = null;
          a: {
            var e = a, f = X.return, g = X, h = b;
            b = U;
            g.effectTag |= 2048;
            g.firstEffect = g.lastEffect = null;
            if (null !== h && "object" === typeof h && "function" === typeof h.then) {
              var k = h;
              if (0 === (g.mode & 2)) {
                var l = g.alternate;
                l ? (g.updateQueue = l.updateQueue, g.memoizedState = l.memoizedState, g.expirationTime = l.expirationTime) : (g.updateQueue = null, g.memoizedState = null);
              }
              var p = 0 !== (K.current & 1), q = f;
              do {
                var v;
                if (v = 13 === q.tag) {
                  var x = q.memoizedState;
                  if (null !== x)
                    v = null !== x.dehydrated ? true : false;
                  else {
                    var P = q.memoizedProps;
                    v = void 0 === P.fallback ? false : true !== P.unstable_avoidThisFallback ? true : p ? false : true;
                  }
                }
                if (v) {
                  var z = q.updateQueue;
                  if (null === z) {
                    var A = /* @__PURE__ */ new Set();
                    A.add(k);
                    q.updateQueue = A;
                  } else
                    z.add(k);
                  if (0 === (q.mode & 2)) {
                    q.effectTag |= 64;
                    g.effectTag &= -2981;
                    if (1 === g.tag)
                      if (null === g.alternate)
                        g.tag = 17;
                      else {
                        var u = Jb(1073741823, null);
                        u.tag = 2;
                        Kb(g, u);
                      }
                    g.expirationTime = 1073741823;
                    break a;
                  }
                  h = void 0;
                  g = b;
                  var r = e.pingCache;
                  null === r ? (r = e.pingCache = new $d(), h = /* @__PURE__ */ new Set(), r.set(k, h)) : (h = r.get(k), void 0 === h && (h = /* @__PURE__ */ new Set(), r.set(k, h)));
                  if (!h.has(g)) {
                    h.add(g);
                    var Ld = Pe.bind(null, e, k, g);
                    k.then(Ld, Ld);
                  }
                  q.effectTag |= 4096;
                  q.expirationTime = b;
                  break a;
                }
                q = q.return;
              } while (null !== q);
              h = Error((xa(g.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + La(g));
            }
            S !== ne && (S = me);
            h = Dd(h, g);
            q = f;
            do {
              switch (q.tag) {
                case 3:
                  k = h;
                  q.effectTag |= 4096;
                  q.expirationTime = b;
                  var $e = ae(q, k, b);
                  Lb(q, $e);
                  break a;
                case 1:
                  k = h;
                  var af = q.type, oc = q.stateNode;
                  if (0 === (q.effectTag & 64) && ("function" === typeof af.getDerivedStateFromError || null !== oc && "function" === typeof oc.componentDidCatch && (null === ee || !ee.has(oc)))) {
                    q.effectTag |= 4096;
                    q.expirationTime = b;
                    var bf = de(q, k, b);
                    Lb(q, bf);
                    break a;
                  }
              }
              q = q.return;
            } while (null !== q);
          }
          X = Qe(X);
        } catch (cf) {
          b = cf;
          continue;
        }
        break;
      } while (1);
    }
    function Ie() {
      var a = ge.current;
      ge.current = Fc;
      return null === a ? Fc : a;
    }
    function Nb(a, b) {
      a < pe && 2 < a && (pe = a);
      null !== b && a < qe && 2 < a && (qe = a, re = b);
    }
    function Ob(a) {
      a > zd && (zd = a);
    }
    function Ne() {
      for (; null !== X; )
        X = Re(X);
    }
    function Je() {
      for (; null !== X && !hb(); )
        X = Re(X);
    }
    function Re(a) {
      var b = Se(a.alternate, a, U);
      a.memoizedProps = a.pendingProps;
      null === b && (b = Qe(a));
      he.current = null;
      return b;
    }
    function Qe(a) {
      X = a;
      do {
        var b = X.alternate;
        a = X.return;
        if (0 === (X.effectTag & 2048)) {
          b = vd(b, X, U);
          if (1 === U || 1 !== X.childExpirationTime) {
            for (var c = 0, d = X.child; null !== d; ) {
              var e = d.expirationTime, f = d.childExpirationTime;
              e > c && (c = e);
              f > c && (c = f);
              d = d.sibling;
            }
            X.childExpirationTime = c;
          }
          if (null !== b)
            return b;
          null !== a && 0 === (a.effectTag & 2048) && (null === a.firstEffect && (a.firstEffect = X.firstEffect), null !== X.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = X.firstEffect), a.lastEffect = X.lastEffect), 1 < X.effectTag && (null !== a.lastEffect ? a.lastEffect.nextEffect = X : a.firstEffect = X, a.lastEffect = X));
        } else {
          b = Cd(X);
          if (null !== b)
            return b.effectTag &= 2047, b;
          null !== a && (a.firstEffect = a.lastEffect = null, a.effectTag |= 2048);
        }
        b = X.sibling;
        if (null !== b)
          return b;
        X = a;
      } while (null !== X);
      S === wd && (S = ne);
      return null;
    }
    function Le(a) {
      var b = a.expirationTime;
      a = a.childExpirationTime;
      return b > a ? b : a;
    }
    function Me(a) {
      var b = nb();
      pb(99, Te.bind(null, a, b));
      return null;
    }
    function Te(a, b) {
      do
        Ge();
      while (null !== ve);
      if ((W & (je | ke)) !== V)
        throw Error(n(327));
      var c = a.finishedWork, d = a.finishedExpirationTime;
      if (null === c)
        return null;
      a.finishedWork = null;
      a.finishedExpirationTime = 0;
      if (c === a.current)
        throw Error(n(177));
      a.callbackNode = null;
      a.callbackExpirationTime = 0;
      a.callbackPriority = 90;
      a.nextKnownPendingLevel = 0;
      var e = Le(c);
      a.firstPendingTime = e;
      d <= a.lastSuspendedTime ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : d <= a.firstSuspendedTime && (a.firstSuspendedTime = d - 1);
      d <= a.lastPingedTime && (a.lastPingedTime = 0);
      d <= a.lastExpiredTime && (a.lastExpiredTime = 0);
      a === T && (X = T = null, U = 0);
      1 < c.effectTag ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, e = c.firstEffect) : e = c : e = c.firstEffect;
      if (null !== e) {
        var f = W;
        W |= ke;
        he.current = null;
        Y = e;
        do
          try {
            Ue();
          } catch (z) {
            if (null === Y)
              throw Error(n(330));
            Hd(Y, z);
            Y = Y.nextEffect;
          }
        while (null !== Y);
        Y = e;
        do
          try {
            for (var g = a, h = b; null !== Y; ) {
              var k = Y.effectTag;
              if (k & 128) {
                var l = Y.alternate;
                if (null !== l) {
                  var p = l.ref;
                  null !== p && ("function" === typeof p ? p(null) : p.current = null);
                }
              }
              switch (k & 1038) {
                case 2:
                  Td(Y);
                  Y.effectTag &= -3;
                  break;
                case 6:
                  Td(Y);
                  Y.effectTag &= -3;
                  Wd(Y.alternate, Y);
                  break;
                case 1024:
                  Y.effectTag &= -1025;
                  break;
                case 1028:
                  Y.effectTag &= -1025;
                  Wd(Y.alternate, Y);
                  break;
                case 4:
                  Wd(Y.alternate, Y);
                  break;
                case 8:
                  var q = Y;
                  Qd(g, q, h);
                  Rd(q);
              }
              Y = Y.nextEffect;
            }
          } catch (z) {
            if (null === Y)
              throw Error(n(330));
            Hd(Y, z);
            Y = Y.nextEffect;
          }
        while (null !== Y);
        a.current = c;
        Y = e;
        do
          try {
            for (k = a; null !== Y; ) {
              var v = Y.effectTag;
              v & 36 && Nd(k, Y.alternate, Y);
              if (v & 128) {
                l = void 0;
                var x = Y.ref;
                if (null !== x) {
                  var P = Y.stateNode;
                  switch (Y.tag) {
                    case 5:
                      l = Fa(P);
                      break;
                    default:
                      l = P;
                  }
                  "function" === typeof x ? x(l) : x.current = l;
                }
              }
              Y = Y.nextEffect;
            }
          } catch (z) {
            if (null === Y)
              throw Error(n(330));
            Hd(Y, z);
            Y = Y.nextEffect;
          }
        while (null !== Y);
        Y = null;
        ib();
        W = f;
      } else
        a.current = c;
      if (ue)
        ue = false, ve = a, we = b;
      else
        for (Y = e; null !== Y; )
          b = Y.nextEffect, Y.nextEffect = null, Y = b;
      b = a.firstPendingTime;
      0 === b && (ee = null);
      1073741823 === b ? a === ze ? ye++ : (ye = 0, ze = a) : ye = 0;
      "function" === typeof Ve && Ve(c.stateNode, d);
      Z(a);
      if (be)
        throw be = false, a = ce, ce = null, a;
      if ((W & ie) !== V)
        return null;
      tb();
      return null;
    }
    function Ue() {
      for (; null !== Y; ) {
        var a = Y.effectTag;
        0 !== (a & 256) && Jd(Y.alternate, Y);
        0 === (a & 512) || ue || (ue = true, qb(97, function() {
          Ge();
          return null;
        }));
        Y = Y.nextEffect;
      }
    }
    function Ge() {
      if (90 !== we) {
        var a = 97 < we ? 97 : we;
        we = 90;
        return pb(a, We);
      }
    }
    function We() {
      if (null === ve)
        return false;
      var a = ve;
      ve = null;
      if ((W & (je | ke)) !== V)
        throw Error(n(331));
      var b = W;
      W |= ke;
      for (a = a.current.firstEffect; null !== a; ) {
        try {
          var c = a;
          if (0 !== (c.effectTag & 512))
            switch (c.tag) {
              case 0:
              case 11:
              case 15:
              case 22:
                Kd(5, c), Md(5, c);
            }
        } catch (d) {
          if (null === a)
            throw Error(n(330));
          Hd(a, d);
        }
        c = a.nextEffect;
        a.nextEffect = null;
        a = c;
      }
      W = b;
      tb();
      return true;
    }
    function Xe(a, b, c) {
      b = Dd(c, b);
      b = ae(a, b, 1073741823);
      Kb(a, b);
      a = Be(a, 1073741823);
      null !== a && Z(a);
    }
    function Hd(a, b) {
      if (3 === a.tag)
        Xe(a, a, b);
      else
        for (var c = a.return; null !== c; ) {
          if (3 === c.tag) {
            Xe(c, a, b);
            break;
          } else if (1 === c.tag) {
            var d = c.stateNode;
            if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === ee || !ee.has(d))) {
              a = Dd(b, a);
              a = de(c, a, 1073741823);
              Kb(c, a);
              c = Be(c, 1073741823);
              null !== c && Z(c);
              break;
            }
          }
          c = c.return;
        }
    }
    function Pe(a, b, c) {
      var d = a.pingCache;
      null !== d && d.delete(b);
      T === a && U === c ? S === yd || S === xd && 1073741823 === pe && G() - Xd < te ? He(a, U) : se = true : Ee(a, c) && (b = a.lastPingedTime, 0 !== b && b < c || (a.lastPingedTime = c, Z(a)));
    }
    function Zd(a, b) {
      var c = a.stateNode;
      null !== c && c.delete(b);
      b = 0;
      0 === b && (b = Tb(), b = Ub(b, a, null));
      a = Be(a, b);
      null !== a && Z(a);
    }
    var Se;
    Se = function(a, b, c) {
      var d = b.expirationTime;
      if (null !== a)
        if (a.memoizedProps !== b.pendingProps || E.current)
          I = true;
        else {
          if (d < c) {
            I = false;
            switch (b.tag) {
              case 3:
                kd(b);
                break;
              case 5:
                tc(b);
                break;
              case 1:
                F(b.type) && Ua(b);
                break;
              case 4:
                rc(b, b.stateNode.containerInfo);
                break;
              case 10:
                d = b.memoizedProps.value;
                var e = b.type._context;
                C(yb, e._currentValue2);
                e._currentValue2 = d;
                break;
              case 13:
                if (null !== b.memoizedState) {
                  d = b.child.childExpirationTime;
                  if (0 !== d && d >= c)
                    return md(a, b, c);
                  C(K, K.current & 1);
                  b = cd(a, b, c);
                  return null !== b ? b.sibling : null;
                }
                C(K, K.current & 1);
                break;
              case 19:
                d = b.childExpirationTime >= c;
                if (0 !== (a.effectTag & 64)) {
                  if (d)
                    return pd(a, b, c);
                  b.effectTag |= 64;
                }
                e = b.memoizedState;
                null !== e && (e.rendering = null, e.tail = null);
                C(K, K.current);
                if (!d)
                  return null;
            }
            return cd(a, b, c);
          }
          I = false;
        }
      else
        I = false;
      b.expirationTime = 0;
      switch (b.tag) {
        case 2:
          d = b.type;
          null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);
          a = b.pendingProps;
          e = Qa(b, D.current);
          Fb(b, c);
          e = Bc(null, b, d, a, e, c);
          b.effectTag |= 1;
          if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
            b.tag = 1;
            b.memoizedState = null;
            b.updateQueue = null;
            if (F(d)) {
              var f = true;
              Ua(b);
            } else
              f = false;
            b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
            Hb(b);
            var g = d.getDerivedStateFromProps;
            "function" === typeof g && Sb(b, d, g, a);
            e.updater = Wb;
            b.stateNode = e;
            e._reactInternalFiber = b;
            $b(b, d, a, c);
            b = jd(null, b, d, true, f, c);
          } else
            b.tag = 0, R(null, b, e, c), b = b.child;
          return b;
        case 16:
          a: {
            e = b.elementType;
            null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);
            a = b.pendingProps;
            wa(e);
            if (1 !== e._status)
              throw e._result;
            e = e._result;
            b.type = e;
            f = b.tag = Ye(e);
            a = H(e, a);
            switch (f) {
              case 0:
                b = gd(null, b, e, a, c);
                break a;
              case 1:
                b = id(null, b, e, a, c);
                break a;
              case 11:
                b = bd(null, b, e, a, c);
                break a;
              case 14:
                b = dd(null, b, e, H(e.type, a), d, c);
                break a;
            }
            throw Error(n(306, e, ""));
          }
          return b;
        case 0:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : H(d, e), gd(a, b, d, e, c);
        case 1:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : H(d, e), id(a, b, d, e, c);
        case 3:
          kd(b);
          d = b.updateQueue;
          if (null === a || null === d)
            throw Error(n(282));
          d = b.pendingProps;
          e = b.memoizedState;
          e = null !== e ? e.element : null;
          Ib(a, b);
          Mb(b, d, null, c);
          d = b.memoizedState.element;
          d === e ? b = cd(a, b, c) : (R(a, b, d, c), b = b.child);
          return b;
        case 5:
          return tc(b), d = b.pendingProps.children, hd(a, b), R(a, b, d, c), b = b.child, b;
        case 6:
          return null;
        case 13:
          return md(a, b, c);
        case 4:
          return rc(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = jc(b, null, d, c) : R(a, b, d, c), b.child;
        case 11:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : H(d, e), bd(a, b, d, e, c);
        case 7:
          return R(a, b, b.pendingProps, c), b.child;
        case 8:
          return R(
            a,
            b,
            b.pendingProps.children,
            c
          ), b.child;
        case 12:
          return R(a, b, b.pendingProps.children, c), b.child;
        case 10:
          a: {
            d = b.type._context;
            e = b.pendingProps;
            g = b.memoizedProps;
            f = e.value;
            var h = b.type._context;
            C(yb, h._currentValue2);
            h._currentValue2 = f;
            if (null !== g)
              if (h = g.value, f = vb(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {
                if (g.children === e.children && !E.current) {
                  b = cd(a, b, c);
                  break a;
                }
              } else
                for (h = b.child, null !== h && (h.return = b); null !== h; ) {
                  var k = h.dependencies;
                  if (null !== k) {
                    g = h.child;
                    for (var l = k.firstContext; null !== l; ) {
                      if (l.context === d && 0 !== (l.observedBits & f)) {
                        1 === h.tag && (l = Jb(c, null), l.tag = 2, Kb(h, l));
                        h.expirationTime < c && (h.expirationTime = c);
                        l = h.alternate;
                        null !== l && l.expirationTime < c && (l.expirationTime = c);
                        Eb(h.return, c);
                        k.expirationTime < c && (k.expirationTime = c);
                        break;
                      }
                      l = l.next;
                    }
                  } else
                    g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;
                  if (null !== g)
                    g.return = h;
                  else
                    for (g = h; null !== g; ) {
                      if (g === b) {
                        g = null;
                        break;
                      }
                      h = g.sibling;
                      if (null !== h) {
                        h.return = g.return;
                        g = h;
                        break;
                      }
                      g = g.return;
                    }
                  h = g;
                }
            R(a, b, e.children, c);
            b = b.child;
          }
          return b;
        case 9:
          return e = b.type, f = b.pendingProps, d = f.children, Fb(b, c), e = J(e, f.unstable_observedBits), d = d(e), b.effectTag |= 1, R(a, b, d, c), b.child;
        case 14:
          return e = b.type, f = H(e, b.pendingProps), f = H(e.type, f), dd(a, b, e, f, d, c);
        case 15:
          return fd(a, b, b.type, b.pendingProps, d, c);
        case 17:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : H(d, e), null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, F(d) ? (a = true, Ua(b)) : a = false, Fb(b, c), Yb(b, d, e), $b(b, d, e, c), jd(
            null,
            b,
            d,
            true,
            a,
            c
          );
        case 19:
          return pd(a, b, c);
      }
      throw Error(n(156, b.tag));
    };
    var Ve = null;
    var Pd = null;
    function Ze(a) {
      if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)
        return false;
      var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (b.isDisabled || !b.supportsFiber)
        return true;
      try {
        var c = b.inject(a);
        Ve = function(a2) {
          try {
            b.onCommitFiberRoot(c, a2, void 0, 64 === (a2.current.effectTag & 64));
          } catch (e) {
          }
        };
        Pd = function(a2) {
          try {
            b.onCommitFiberUnmount(c, a2);
          } catch (e) {
          }
        };
      } catch (d) {
      }
      return true;
    }
    function df(a, b, c, d) {
      this.tag = a;
      this.key = c;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d;
      this.effectTag = 0;
      this.lastEffect = this.firstEffect = this.nextEffect = null;
      this.childExpirationTime = this.expirationTime = 0;
      this.alternate = null;
    }
    function ed(a) {
      a = a.prototype;
      return !(!a || !a.isReactComponent);
    }
    function Ye(a) {
      if ("function" === typeof a)
        return ed(a) ? 1 : 0;
      if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === oa)
          return 11;
        if (a === ra)
          return 14;
      }
      return 2;
    }
    function ec(a, b) {
      var c = a.alternate;
      null === c ? (c = new df(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
      c.childExpirationTime = a.childExpirationTime;
      c.expirationTime = a.expirationTime;
      c.child = a.child;
      c.memoizedProps = a.memoizedProps;
      c.memoizedState = a.memoizedState;
      c.updateQueue = a.updateQueue;
      b = a.dependencies;
      c.dependencies = null === b ? null : {
        expirationTime: b.expirationTime,
        firstContext: b.firstContext,
        responders: b.responders
      };
      c.sibling = a.sibling;
      c.index = a.index;
      c.ref = a.ref;
      return c;
    }
    function gc(a, b, c, d, e, f) {
      var g = 2;
      d = a;
      if ("function" === typeof a)
        ed(a) && (g = 1);
      else if ("string" === typeof a)
        g = 5;
      else
        a:
          switch (a) {
            case ia:
              return ic(c.children, e, f, b);
            case na:
              g = 8;
              e |= 7;
              break;
            case ja:
              g = 8;
              e |= 1;
              break;
            case ka:
              return a = new df(12, c, b, e | 8), a.elementType = ka, a.type = ka, a.expirationTime = f, a;
            case pa:
              return a = new df(13, c, b, e), a.type = pa, a.elementType = pa, a.expirationTime = f, a;
            case qa:
              return a = new df(19, c, b, e), a.elementType = qa, a.expirationTime = f, a;
            default:
              if ("object" === typeof a && null !== a)
                switch (a.$$typeof) {
                  case la:
                    g = 10;
                    break a;
                  case ma:
                    g = 9;
                    break a;
                  case oa:
                    g = 11;
                    break a;
                  case ra:
                    g = 14;
                    break a;
                  case sa:
                    g = 16;
                    d = null;
                    break a;
                  case ta:
                    g = 22;
                    break a;
                }
              throw Error(n(130, null == a ? a : typeof a, ""));
          }
      b = new df(g, c, b, e);
      b.elementType = a;
      b.type = d;
      b.expirationTime = f;
      return b;
    }
    function ic(a, b, c, d) {
      a = new df(7, a, d, b);
      a.expirationTime = c;
      return a;
    }
    function fc(a, b, c) {
      a = new df(6, a, null, b);
      a.expirationTime = c;
      return a;
    }
    function hc(a, b, c) {
      b = new df(4, null !== a.children ? a.children : [], a.key, b);
      b.expirationTime = c;
      b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
      return b;
    }
    function ef(a, b, c) {
      this.tag = b;
      this.current = null;
      this.containerInfo = a;
      this.pingCache = this.pendingChildren = null;
      this.finishedExpirationTime = 0;
      this.finishedWork = null;
      this.timeoutHandle = -1;
      this.pendingContext = this.context = null;
      this.hydrate = c;
      this.callbackNode = null;
      this.callbackPriority = 90;
      this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
    }
    function ff(a, b, c) {
      a = new ef(a, b, c);
      b = new df(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
      a.current = b;
      b.stateNode = a;
      Hb(b);
      return a;
    }
    function Ee(a, b) {
      var c = a.firstSuspendedTime;
      a = a.lastSuspendedTime;
      return 0 !== c && c >= b && a <= b;
    }
    function Ad(a, b) {
      var c = a.firstSuspendedTime, d = a.lastSuspendedTime;
      c < b && (a.firstSuspendedTime = b);
      if (d > b || 0 === c)
        a.lastSuspendedTime = b;
      b <= a.lastPingedTime && (a.lastPingedTime = 0);
      b <= a.lastExpiredTime && (a.lastExpiredTime = 0);
    }
    function Bd(a, b) {
      b > a.firstPendingTime && (a.firstPendingTime = b);
      var c = a.firstSuspendedTime;
      0 !== c && (b >= c ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : b >= a.lastSuspendedTime && (a.lastSuspendedTime = b + 1), b > a.nextKnownPendingLevel && (a.nextKnownPendingLevel = b));
    }
    var gf = null;
    function hf(a) {
      if (null === gf)
        try {
          var b = ("require" + Math.random()).slice(0, 7);
          gf = (module && module[b])("timers").setImmediate;
        } catch (c) {
          gf = function(a2) {
            var b2 = new MessageChannel();
            b2.port1.onmessage = a2;
            b2.port2.postMessage(void 0);
          };
        }
      return gf(a);
    }
    function jf(a, b, c, d) {
      var e = b.current, f = Tb(), g = Qb.suspense;
      f = Ub(f, e, g);
      a:
        if (c) {
          c = c._reactInternalFiber;
          b: {
            if (ya(c) !== c || 1 !== c.tag)
              throw Error(n(170));
            var h = c;
            do {
              switch (h.tag) {
                case 3:
                  h = h.stateNode.context;
                  break b;
                case 1:
                  if (F(h.type)) {
                    h = h.stateNode.__reactInternalMemoizedMergedChildContext;
                    break b;
                  }
              }
              h = h.return;
            } while (null !== h);
            throw Error(n(171));
          }
          if (1 === c.tag) {
            var k = c.type;
            if (F(k)) {
              c = Ta(c, k, h);
              break a;
            }
          }
          c = h;
        } else
          c = Oa;
      null === b.context ? b.context = c : b.pendingContext = c;
      b = Jb(f, g);
      b.payload = { element: a };
      d = void 0 === d ? null : d;
      null !== d && (b.callback = d);
      Kb(e, b);
      Vb(e, f);
      return f;
    }
    var kf = t.IsSomeRendererActing;
    var lf = "function" === typeof m.unstable_flushAllWithoutAsserting;
    var mf = m.unstable_flushAllWithoutAsserting || function() {
      for (var a = false; Ge(); )
        a = true;
      return a;
    };
    function nf(a) {
      try {
        mf(), hf(function() {
          mf() ? nf(a) : a();
        });
      } catch (b) {
        a(b);
      }
    }
    var of = 0;
    var pf = false;
    var qf = { createNodeMock: function() {
      return null;
    } };
    function rf(a) {
      if (a.isHidden)
        return null;
      switch (a.tag) {
        case "TEXT":
          return a.text;
        case "INSTANCE":
          var b = a.props;
          var c = ["children"];
          if (null == b)
            b = {};
          else {
            var d = {}, e = Object.keys(b), f;
            for (f = 0; f < e.length; f++) {
              var g = e[f];
              0 <= c.indexOf(g) || (d[g] = b[g]);
            }
            b = d;
          }
          c = null;
          if (a.children && a.children.length)
            for (d = 0; d < a.children.length; d++)
              e = rf(a.children[d]), null !== e && (null === c ? c = [e] : c.push(e));
          a = { type: a.type, props: b, children: c };
          Object.defineProperty(a, "$$typeof", { value: Symbol.for("react.test.json") });
          return a;
        default:
          throw Error("Unexpected node type in toJSON: " + a.tag);
      }
    }
    function sf(a) {
      if (!a)
        return null;
      a = tf(a);
      return 0 === a.length ? null : 1 === a.length ? uf(a[0]) : vf(a.map(uf));
    }
    function tf(a) {
      for (var b = []; null != a; )
        b.push(a), a = a.sibling;
      return b;
    }
    function vf(a) {
      var b = [];
      for (a = [{ i: 0, array: a }]; a.length; )
        for (var c = a.pop(); c.i < c.array.length; ) {
          var d = c.array[c.i];
          c.i += 1;
          if (Array.isArray(d)) {
            a.push(c);
            a.push({ i: 0, array: d });
            break;
          }
          b.push(d);
        }
      return b;
    }
    function uf(a) {
      if (null == a)
        return null;
      switch (a.tag) {
        case 3:
          return sf(a.child);
        case 4:
          return sf(a.child);
        case 1:
          return { nodeType: "component", type: a.type, props: aa({}, a.memoizedProps), instance: a.stateNode, rendered: sf(a.child) };
        case 0:
        case 15:
          return { nodeType: "component", type: a.type, props: aa({}, a.memoizedProps), instance: null, rendered: sf(a.child) };
        case 22:
          return { nodeType: "block", type: a.type, props: aa({}, a.memoizedProps), instance: null, rendered: sf(a.child) };
        case 5:
          return { nodeType: "host", type: a.type, props: aa(
            {},
            a.memoizedProps
          ), instance: null, rendered: vf(tf(a.child).map(uf)) };
        case 6:
          return a.stateNode.text;
        case 7:
        case 10:
        case 9:
        case 8:
        case 12:
        case 11:
        case 14:
        case 17:
        case 21:
          return sf(a.child);
        default:
          throw Error(n(214, a.tag));
      }
    }
    var wf = /* @__PURE__ */ new Set([0, 1, 5, 11, 14, 15, 22, 3]);
    function xf(a) {
      var b = [], c = a;
      if (null === c.child)
        return b;
      c.child.return = c;
      c = c.child;
      a:
        for (; ; ) {
          var d = false;
          wf.has(c.tag) ? b.push(yf(c)) : 6 === c.tag ? b.push("" + c.memoizedProps) : d = true;
          if (d && null !== c.child)
            c.child.return = c, c = c.child;
          else {
            for (; null === c.sibling; ) {
              if (c.return === a)
                break a;
              c = c.return;
            }
            c.sibling.return = c.return;
            c = c.sibling;
          }
        }
      return b;
    }
    var Bf = function() {
      function a(a2) {
        if (!wf.has(a2.tag))
          throw Error(n(225, a2.tag));
        this._fiber = a2;
      }
      var b = a.prototype;
      b._currentFiber = function() {
        var a2 = Aa(this._fiber);
        if (null === a2)
          throw Error(n(224));
        return a2;
      };
      b.find = function(a2) {
        return zf(this.findAll(a2, { deep: false }), "matching custom predicate: " + a2.toString());
      };
      b.findByType = function(a2) {
        return zf(this.findAllByType(a2, { deep: false }), 'with node type: "' + (a2.displayName || a2.name) + '"');
      };
      b.findByProps = function(a2) {
        return zf(this.findAllByProps(a2, { deep: false }), "with props: " + JSON.stringify(a2));
      };
      b.findAll = function(a2) {
        return Af(this, a2, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null);
      };
      b.findAllByType = function(a2) {
        return Af(this, function(b2) {
          return b2.type === a2;
        }, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null);
      };
      b.findAllByProps = function(a2) {
        return Af(this, function(b2) {
          var c;
          if (c = b2.props)
            a: {
              for (var d in a2)
                if (b2.props[d] !== a2[d]) {
                  c = false;
                  break a;
                }
              c = true;
            }
          return c;
        }, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : null);
      };
      ea(a, [{ key: "instance", get: function() {
        return 5 === this._fiber.tag ? Fa(this._fiber.stateNode) : this._fiber.stateNode;
      } }, { key: "type", get: function() {
        return this._fiber.type;
      } }, { key: "props", get: function() {
        return this._currentFiber().memoizedProps;
      } }, { key: "parent", get: function() {
        for (var a2 = this._fiber.return; null !== a2; ) {
          if (wf.has(a2.tag)) {
            if (3 === a2.tag && 2 > xf(a2).length)
              break;
            return yf(a2);
          }
          a2 = a2.return;
        }
        return null;
      } }, { key: "children", get: function() {
        return xf(this._currentFiber());
      } }]);
      return a;
    }();
    function Af(a, b, c) {
      var d = c ? c.deep : true, e = [];
      if (b(a) && (e.push(a), !d))
        return e;
      a.children.forEach(function(a2) {
        "string" !== typeof a2 && e.push.apply(e, Af(a2, b, c));
      });
      return e;
    }
    function zf(a, b) {
      if (1 === a.length)
        return a[0];
      throw Error((0 === a.length ? "No instances found " : "Expected 1 but found " + a.length + " instances ") + b);
    }
    var Cf = { _Scheduler: ba, create: function(a, b) {
      var c = qf.createNodeMock, d = false;
      "object" === typeof b && null !== b && ("function" === typeof b.createNodeMock && (c = b.createNodeMock), true === b.unstable_isConcurrent && (d = true));
      var e = { children: [], createNodeMock: c, tag: "CONTAINER" }, f = ff(e, d ? 2 : 0, false);
      if (null == f)
        throw Error(n(215));
      jf(a, f, null, null);
      a = { _Scheduler: ba, root: void 0, toJSON: function() {
        if (null == f || null == f.current || null == e || 0 === e.children.length)
          return null;
        if (1 === e.children.length)
          return rf(e.children[0]);
        if (2 === e.children.length && true === e.children[0].isHidden && false === e.children[1].isHidden)
          return rf(e.children[1]);
        var a2 = null;
        if (e.children && e.children.length)
          for (var b2 = 0; b2 < e.children.length; b2++) {
            var c2 = rf(e.children[b2]);
            null !== c2 && (null === a2 ? a2 = [c2] : a2.push(c2));
          }
        return a2;
      }, toTree: function() {
        return null == f || null == f.current ? null : uf(f.current);
      }, update: function(a2) {
        null != f && null != f.current && jf(a2, f, null, null);
      }, unmount: function() {
        null != f && null != f.current && (jf(null, f, null, null), f = e = null);
      }, getInstance: function() {
        if (null == f || null == f.current)
          return null;
        a: {
          var a2 = f.current;
          if (a2.child)
            switch (a2.child.tag) {
              case 5:
                a2 = Fa(a2.child.stateNode);
                break a;
              default:
                a2 = a2.child.stateNode;
            }
          else
            a2 = null;
        }
        return a2;
      }, unstable_flushSync: function(a2) {
        a: {
          if ((W & (je | ke)) !== V)
            throw Error(n(187));
          var b2 = W;
          W |= 1;
          try {
            var c2 = pb(99, a2.bind(null, void 0));
            break a;
          } finally {
            W = b2, tb();
          }
          c2 = void 0;
        }
        return c2;
      } };
      Object.defineProperty(a, "root", { configurable: true, enumerable: true, get: function() {
        if (null === f)
          throw Error("Can't access .root on unmounted test renderer");
        var a2 = xf(f.current);
        if (0 === a2.length)
          throw Error("Can't access .root on unmounted test renderer");
        return 1 === a2.length ? a2[0] : yf(f.current);
      } });
      return a;
    }, unstable_batchedUpdates: Oe, act: function(a) {
      function b() {
        of--;
        kf.current = c;
      }
      false === pf && (pf = true, console.error("act(...) is not supported in production builds of React, and might not behave as expected."));
      of++;
      var c = kf.current;
      kf.current = true;
      try {
        var d = Oe(a);
      } catch (e) {
        throw b(), e;
      }
      if (null !== d && "object" === typeof d && "function" === typeof d.then)
        return { then: function(a2, f) {
          d.then(function() {
            1 < of || true === lf && true === c ? (b(), a2()) : nf(function(c2) {
              b();
              c2 ? f(c2) : a2();
            });
          }, function(a3) {
            b();
            f(a3);
          });
        } };
      try {
        1 !== of || false !== lf && false !== c || mf(), b();
      } catch (e) {
        throw b(), e;
      }
      return { then: function(a2) {
        a2();
      } };
    } };
    var Df = /* @__PURE__ */ new WeakMap();
    function yf(a) {
      var b = Df.get(a);
      void 0 === b && null !== a.alternate && (b = Df.get(a.alternate));
      void 0 === b && (b = new Bf(a), Df.set(a, b));
      return b;
    }
    (function(a) {
      var b = a.findFiberByHostInstance;
      return Ze(aa({}, a, { overrideHookState: null, overrideProps: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: t.ReactCurrentDispatcher, findHostInstanceByFiber: function(a2) {
        a2 = Ba(a2);
        return null === a2 ? null : a2.stateNode;
      }, findFiberByHostInstance: function(a2) {
        return b ? b(a2) : null;
      }, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null }));
    })({ findFiberByHostInstance: function() {
      throw Error("TestRenderer does not support findFiberByHostInstance()");
    }, bundleType: 0, version: "16.14.0", rendererPackageName: "react-test-renderer" });
    module.exports = Cf.default || Cf;
  }
});

// node_modules/react-test-renderer/index.js
var require_react_test_renderer = __commonJS({
  "node_modules/react-test-renderer/index.js"(exports, module) {
    "use strict";
    if (true) {
      module.exports = require_react_test_renderer_production_min();
    } else {
      module.exports = null;
    }
  }
});

// node_modules/load-script/index.js
var require_load_script = __commonJS({
  "node_modules/load-script/index.js"(exports, module) {
    module.exports = function load(src, opts, cb) {
      var head = document.head || document.getElementsByTagName("head")[0];
      var script = document.createElement("script");
      if (typeof opts === "function") {
        cb = opts;
        opts = {};
      }
      opts = opts || {};
      cb = cb || function() {
      };
      script.type = opts.type || "text/javascript";
      script.charset = opts.charset || "utf8";
      script.async = "async" in opts ? !!opts.async : true;
      script.src = src;
      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }
      if (opts.text) {
        script.text = "" + opts.text;
      }
      var onend = "onload" in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);
      if (!script.onload) {
        stdOnEnd(script, cb);
      }
      head.appendChild(script);
    };
    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }
    function stdOnEnd(script, cb) {
      script.onload = function() {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function() {
        this.onerror = this.onload = null;
        cb(new Error("Failed to load " + this.src), script);
      };
    }
    function ieOnEnd(script, cb) {
      script.onreadystatechange = function() {
        if (this.readyState != "complete" && this.readyState != "loaded")
          return;
        this.onreadystatechange = null;
        cb(null, script);
      };
    }
  }
});

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object2, property) {
      try {
        return property in object2;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array2, options) {
      if (!Array.isArray(array2)) {
        throw new Error("first argument should be an array");
      }
      return array2.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module.exports = deepmerge_1;
  }
});

// src/utils.js
function parseTimeParam(url, pattern) {
  if (url instanceof Array) {
    return void 0;
  }
  const match = url.match(pattern);
  if (match) {
    const stamp = match[1];
    if (stamp.match(MATCH_START_STAMP)) {
      return parseTimeString(stamp);
    }
    if (MATCH_NUMERIC.test(stamp)) {
      return parseInt(stamp);
    }
  }
  return void 0;
}
function parseTimeString(stamp) {
  let seconds = 0;
  let array2 = MATCH_START_STAMP.exec(stamp);
  while (array2 !== null) {
    const [, count, period] = array2;
    if (period === "h")
      seconds += parseInt(count, 10) * 60 * 60;
    if (period === "m")
      seconds += parseInt(count, 10) * 60;
    if (period === "s")
      seconds += parseInt(count, 10);
    array2 = MATCH_START_STAMP.exec(stamp);
  }
  return seconds;
}
function parseStartTime(url) {
  return parseTimeParam(url, MATCH_START_QUERY);
}
function parseEndTime(url) {
  return parseTimeParam(url, MATCH_END_QUERY);
}
function randomString() {
  return Math.random().toString(36).substr(2, 5);
}
function queryString(object2) {
  return Object.keys(object2).map((key) => `${key}=${object2[key]}`).join("&");
}
function getGlobal(key) {
  if (window[key]) {
    return window[key];
  }
  if (window.exports && window.exports[key]) {
    return window.exports[key];
  }
  if (window.module && window.module.exports && window.module.exports[key]) {
    return window.module.exports[key];
  }
  return null;
}
function omit(object2, ...arrays) {
  const omitKeys = [].concat(...arrays);
  const output = {};
  const keys = Object.keys(object2);
  for (const key of keys) {
    if (omitKeys.indexOf(key) === -1) {
      output[key] = object2[key];
    }
  }
  return output;
}
function callPlayer(method, ...args) {
  if (!this.player || !this.player[method]) {
    let message = `ReactPlayer: ${this.constructor.displayName} player could not call %c${method}%c \u2013 `;
    if (!this.player) {
      message += "The player was not available";
    } else if (!this.player[method]) {
      message += "The method was not available";
    }
    console.warn(message, "font-weight: bold", "");
    return null;
  }
  return this.player[method](...args);
}
function isMediaStream(url) {
  return typeof window !== "undefined" && typeof window.MediaStream !== "undefined" && url instanceof window.MediaStream;
}
function isBlobUrl(url) {
  return /^blob:/.test(url);
}
function supportsWebKitPresentationMode(video = document.createElement("video")) {
  const notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;
  return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === "function" && notMobile;
}
function enableStubOn(fn) {
  if (true) {
    const wrap = (...args) => wrap.stub(...args);
    wrap.stub = fn;
    return wrap;
  }
  return fn;
}
var import_load_script, import_deepmerge, MATCH_START_QUERY, MATCH_END_QUERY, MATCH_START_STAMP, MATCH_NUMERIC, requests, getSDK;
var init_utils = __esm({
  "src/utils.js"() {
    import_load_script = __toESM(require_load_script());
    import_deepmerge = __toESM(require_cjs());
    MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;
    MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;
    MATCH_START_STAMP = /(\d+)(h|m|s)/g;
    MATCH_NUMERIC = /^\d+$/;
    requests = {};
    getSDK = enableStubOn(function getSDK2(url, sdkGlobal, sdkReady = null, isLoaded = () => true, fetchScript = import_load_script.default) {
      const existingGlobal = getGlobal(sdkGlobal);
      if (existingGlobal && isLoaded(existingGlobal)) {
        return Promise.resolve(existingGlobal);
      }
      return new Promise((resolve, reject) => {
        if (requests[url]) {
          requests[url].push({ resolve, reject });
          return;
        }
        requests[url] = [{ resolve, reject }];
        const onLoaded = (sdk) => {
          requests[url].forEach((request) => request.resolve(sdk));
        };
        if (sdkReady) {
          const previousOnReady = window[sdkReady];
          window[sdkReady] = function() {
            if (previousOnReady)
              previousOnReady();
            onLoaded(getGlobal(sdkGlobal));
          };
        }
        fetchScript(url, (err) => {
          if (err) {
            requests[url].forEach((request) => request.reject(err));
            requests[url] = null;
          } else if (!sdkReady) {
            onLoaded(getGlobal(sdkGlobal));
          }
        });
      });
    });
  }
});

// src/patterns.js
var MATCH_URL_YOUTUBE, MATCH_URL_SOUNDCLOUD, MATCH_URL_VIMEO, MATCH_URL_FACEBOOK, MATCH_URL_FACEBOOK_WATCH, MATCH_URL_STREAMABLE, MATCH_URL_WISTIA, MATCH_URL_TWITCH_VIDEO, MATCH_URL_TWITCH_CHANNEL, MATCH_URL_DAILYMOTION, MATCH_URL_MIXCLOUD, MATCH_URL_VIDYARD, MATCH_URL_KALTURA, AUDIO_EXTENSIONS, VIDEO_EXTENSIONS, HLS_EXTENSIONS, DASH_EXTENSIONS, FLV_EXTENSIONS, canPlayFile, canPlay;
var init_patterns = __esm({
  "src/patterns.js"() {
    init_utils();
    MATCH_URL_YOUTUBE = /(?:youtu\.be\/|youtube(?:-nocookie|education)?\.com\/(?:embed\/|v\/|watch\/|watch\?v=|watch\?.+&v=|shorts\/|live\/))((\w|-){11})|youtube\.com\/playlist\?list=|youtube\.com\/user\//;
    MATCH_URL_SOUNDCLOUD = /(?:soundcloud\.com|snd\.sc)\/[^.]+$/;
    MATCH_URL_VIMEO = /vimeo\.com\/(?!progressive_redirect).+/;
    MATCH_URL_FACEBOOK = /^https?:\/\/(www\.)?facebook\.com.*\/(video(s)?|watch|story)(\.php?|\/).+$/;
    MATCH_URL_FACEBOOK_WATCH = /^https?:\/\/fb\.watch\/.+$/;
    MATCH_URL_STREAMABLE = /streamable\.com\/([a-z0-9]+)$/;
    MATCH_URL_WISTIA = /(?:wistia\.(?:com|net)|wi\.st)\/(?:medias|embed)\/(?:iframe\/)?([^?]+)/;
    MATCH_URL_TWITCH_VIDEO = /(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/;
    MATCH_URL_TWITCH_CHANNEL = /(?:www\.|go\.)?twitch\.tv\/([a-zA-Z0-9_]+)($|\?)/;
    MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?(?:[\w.#_-]+)?/;
    MATCH_URL_MIXCLOUD = /mixcloud\.com\/([^/]+\/[^/]+)/;
    MATCH_URL_VIDYARD = /vidyard.com\/(?:watch\/)?([a-zA-Z0-9-_]+)/;
    MATCH_URL_KALTURA = /^https?:\/\/[a-zA-Z]+\.kaltura.(com|org)\/p\/([0-9]+)\/sp\/([0-9]+)00\/embedIframeJs\/uiconf_id\/([0-9]+)\/partner_id\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;
    AUDIO_EXTENSIONS = /\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i;
    VIDEO_EXTENSIONS = /\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\d+]+)?($|\?)/i;
    HLS_EXTENSIONS = /\.(m3u8)($|\?)/i;
    DASH_EXTENSIONS = /\.(mpd)($|\?)/i;
    FLV_EXTENSIONS = /\.(flv)($|\?)/i;
    canPlayFile = (url) => {
      if (url instanceof Array) {
        for (const item of url) {
          if (typeof item === "string" && canPlayFile(item)) {
            return true;
          }
          if (canPlayFile(item.src)) {
            return true;
          }
        }
        return false;
      }
      if (isMediaStream(url) || isBlobUrl(url)) {
        return true;
      }
      return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);
    };
    canPlay = {
      youtube: (url) => {
        if (url instanceof Array) {
          return url.every((item) => MATCH_URL_YOUTUBE.test(item));
        }
        return MATCH_URL_YOUTUBE.test(url);
      },
      soundcloud: (url) => MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url),
      vimeo: (url) => MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url),
      facebook: (url) => MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url),
      streamable: (url) => MATCH_URL_STREAMABLE.test(url),
      wistia: (url) => MATCH_URL_WISTIA.test(url),
      twitch: (url) => MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url),
      dailymotion: (url) => MATCH_URL_DAILYMOTION.test(url),
      mixcloud: (url) => MATCH_URL_MIXCLOUD.test(url),
      vidyard: (url) => MATCH_URL_VIDYARD.test(url),
      kaltura: (url) => MATCH_URL_KALTURA.test(url),
      file: canPlayFile
    };
  }
});

// src/players/YouTube.js
var YouTube_exports = {};
__export(YouTube_exports, {
  default: () => YouTube
});
var import_react, SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, MATCH_PLAYLIST, MATCH_USER_UPLOADS, MATCH_NOCOOKIE, NOCOOKIE_HOST, YouTube;
var init_YouTube = __esm({
  "src/players/YouTube.js"() {
    import_react = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL = "https://www.youtube.com/iframe_api";
    SDK_GLOBAL = "YT";
    SDK_GLOBAL_READY = "onYouTubeIframeAPIReady";
    MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;
    MATCH_USER_UPLOADS = /user\/([a-zA-Z0-9_-]+)\/?/;
    MATCH_NOCOOKIE = /youtube-nocookie\.com/;
    NOCOOKIE_HOST = "https://www.youtube-nocookie.com";
    YouTube = class extends import_react.Component {
      static displayName = "YouTube";
      static canPlay = canPlay.youtube;
      callPlayer = callPlayer;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      getID(url) {
        if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {
          return null;
        }
        return url.match(MATCH_URL_YOUTUBE)[1];
      }
      load(url, isReady) {
        const { playing, muted, playsinline, controls, loop, config, onError } = this.props;
        const { playerVars, embedOptions } = config;
        const id = this.getID(url);
        if (isReady) {
          if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {
            this.player.loadPlaylist(this.parsePlaylist(url));
            return;
          }
          this.player.cueVideoById({
            videoId: id,
            startSeconds: parseStartTime(url) || playerVars.start,
            endSeconds: parseEndTime(url) || playerVars.end
          });
          return;
        }
        getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, (YT) => YT.loaded).then((YT) => {
          if (!this.container)
            return;
          this.player = new YT.Player(this.container, {
            width: "100%",
            height: "100%",
            videoId: id,
            playerVars: {
              autoplay: playing ? 1 : 0,
              mute: muted ? 1 : 0,
              controls: controls ? 1 : 0,
              start: parseStartTime(url),
              end: parseEndTime(url),
              origin: window.location.origin,
              playsinline: playsinline ? 1 : 0,
              ...this.parsePlaylist(url),
              ...playerVars
            },
            events: {
              onReady: () => {
                if (loop) {
                  this.player.setLoop(true);
                }
                this.props.onReady();
              },
              onPlaybackRateChange: (event) => this.props.onPlaybackRateChange(event.data),
              onPlaybackQualityChange: (event) => this.props.onPlaybackQualityChange(event),
              onStateChange: this.onStateChange,
              onError: (event) => onError(event.data)
            },
            host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : void 0,
            ...embedOptions
          });
        }, onError);
        if (embedOptions.events) {
          console.warn("Using `embedOptions.events` will likely break things. Use ReactPlayer\u2019s callback props instead, eg onReady, onPlay, onPause");
        }
      }
      parsePlaylist = (url) => {
        if (url instanceof Array) {
          return {
            listType: "playlist",
            playlist: url.map(this.getID).join(",")
          };
        }
        if (MATCH_PLAYLIST.test(url)) {
          const [, playlistId] = url.match(MATCH_PLAYLIST);
          return {
            listType: "playlist",
            list: playlistId.replace(/^UC/, "UU")
          };
        }
        if (MATCH_USER_UPLOADS.test(url)) {
          const [, username] = url.match(MATCH_USER_UPLOADS);
          return {
            listType: "user_uploads",
            list: username
          };
        }
        return {};
      };
      onStateChange = (event) => {
        const { data } = event;
        const { onPlay, onPause, onBuffer, onBufferEnd, onEnded, onReady, loop, config: { playerVars, onUnstarted } } = this.props;
        const { UNSTARTED, PLAYING, PAUSED, BUFFERING, ENDED, CUED } = window[SDK_GLOBAL].PlayerState;
        if (data === UNSTARTED)
          onUnstarted();
        if (data === PLAYING) {
          onPlay();
          onBufferEnd();
        }
        if (data === PAUSED)
          onPause();
        if (data === BUFFERING)
          onBuffer();
        if (data === ENDED) {
          const isPlaylist = !!this.callPlayer("getPlaylist");
          if (loop && !isPlaylist) {
            if (playerVars.start) {
              this.seekTo(playerVars.start);
            } else {
              this.play();
            }
          }
          onEnded();
        }
        if (data === CUED)
          onReady();
      };
      play() {
        this.callPlayer("playVideo");
      }
      pause() {
        this.callPlayer("pauseVideo");
      }
      stop() {
        if (!document.body.contains(this.callPlayer("getIframe")))
          return;
        this.callPlayer("stopVideo");
      }
      seekTo(amount, keepPlaying = false) {
        this.callPlayer("seekTo", amount);
        if (!keepPlaying && !this.props.playing) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.callPlayer("setVolume", fraction * 100);
      }
      mute = () => {
        this.callPlayer("mute");
      };
      unmute = () => {
        this.callPlayer("unMute");
      };
      setPlaybackRate(rate) {
        this.callPlayer("setPlaybackRate", rate);
      }
      setLoop(loop) {
        this.callPlayer("setLoop", loop);
      }
      getDuration() {
        return this.callPlayer("getDuration");
      }
      getCurrentTime() {
        return this.callPlayer("getCurrentTime");
      }
      getSecondsLoaded() {
        return this.callPlayer("getVideoLoadedFraction") * this.getDuration();
      }
      ref = (container) => {
        this.container = container;
      };
      render() {
        const { display } = this.props;
        const style = {
          width: "100%",
          height: "100%",
          display
        };
        return /* @__PURE__ */ import_react.default.createElement("div", { style }, /* @__PURE__ */ import_react.default.createElement("div", { ref: this.ref }));
      }
    };
  }
});

// src/players/SoundCloud.js
var SoundCloud_exports = {};
__export(SoundCloud_exports, {
  default: () => SoundCloud
});
var import_react2, SDK_URL2, SDK_GLOBAL2, SoundCloud;
var init_SoundCloud = __esm({
  "src/players/SoundCloud.js"() {
    import_react2 = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL2 = "https://w.soundcloud.com/player/api.js";
    SDK_GLOBAL2 = "SC";
    SoundCloud = class extends import_react2.Component {
      static displayName = "SoundCloud";
      static canPlay = canPlay.soundcloud;
      static loopOnEnded = true;
      callPlayer = callPlayer;
      duration = null;
      currentTime = null;
      fractionLoaded = null;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      load(url, isReady) {
        getSDK(SDK_URL2, SDK_GLOBAL2).then((SC) => {
          if (!this.iframe)
            return;
          const { PLAY, PLAY_PROGRESS, PAUSE, FINISH, ERROR } = SC.Widget.Events;
          if (!isReady) {
            this.player = SC.Widget(this.iframe);
            this.player.bind(PLAY, this.props.onPlay);
            this.player.bind(PAUSE, () => {
              const remaining = this.duration - this.currentTime;
              if (remaining < 0.05) {
                return;
              }
              this.props.onPause();
            });
            this.player.bind(PLAY_PROGRESS, (e) => {
              this.currentTime = e.currentPosition / 1e3;
              this.fractionLoaded = e.loadedProgress;
            });
            this.player.bind(FINISH, () => this.props.onEnded());
            this.player.bind(ERROR, (e) => this.props.onError(e));
          }
          this.player.load(url, {
            ...this.props.config.options,
            callback: () => {
              this.player.getDuration((duration) => {
                this.duration = duration / 1e3;
                this.props.onReady();
              });
            }
          });
        });
      }
      play() {
        this.callPlayer("play");
      }
      pause() {
        this.callPlayer("pause");
      }
      stop() {
      }
      seekTo(seconds, keepPlaying = true) {
        this.callPlayer("seekTo", seconds * 1e3);
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.callPlayer("setVolume", fraction * 100);
      }
      mute = () => {
        this.setVolume(0);
      };
      unmute = () => {
        if (this.props.volume !== null) {
          this.setVolume(this.props.volume);
        }
      };
      getDuration() {
        return this.duration;
      }
      getCurrentTime() {
        return this.currentTime;
      }
      getSecondsLoaded() {
        return this.fractionLoaded * this.duration;
      }
      ref = (iframe) => {
        this.iframe = iframe;
      };
      render() {
        const { display } = this.props;
        const style = {
          width: "100%",
          height: "100%",
          display
        };
        return /* @__PURE__ */ import_react2.default.createElement(
          "iframe",
          {
            ref: this.ref,
            src: `https://w.soundcloud.com/player/?url=${encodeURIComponent(this.props.url)}`,
            style,
            frameBorder: 0,
            allow: "autoplay"
          }
        );
      }
    };
  }
});

// src/players/Vimeo.js
var Vimeo_exports = {};
__export(Vimeo_exports, {
  default: () => Vimeo
});
var import_react3, SDK_URL3, SDK_GLOBAL3, cleanUrl, Vimeo;
var init_Vimeo = __esm({
  "src/players/Vimeo.js"() {
    import_react3 = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL3 = "https://player.vimeo.com/api/player.js";
    SDK_GLOBAL3 = "Vimeo";
    cleanUrl = (url) => {
      return url.replace("/manage/videos", "");
    };
    Vimeo = class extends import_react3.Component {
      static displayName = "Vimeo";
      static canPlay = canPlay.vimeo;
      static forceLoad = true;
      // Prevent checking isLoading when URL changes
      callPlayer = callPlayer;
      duration = null;
      currentTime = null;
      secondsLoaded = null;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      load(url) {
        this.duration = null;
        getSDK(SDK_URL3, SDK_GLOBAL3).then((Vimeo2) => {
          if (!this.container)
            return;
          const { playerOptions, title } = this.props.config;
          this.player = new Vimeo2.Player(this.container, {
            url: cleanUrl(url),
            autoplay: this.props.playing,
            muted: this.props.muted,
            loop: this.props.loop,
            playsinline: this.props.playsinline,
            controls: this.props.controls,
            ...playerOptions
          });
          this.player.ready().then(() => {
            const iframe = this.container.querySelector("iframe");
            iframe.style.width = "100%";
            iframe.style.height = "100%";
            if (title) {
              iframe.title = title;
            }
          }).catch(this.props.onError);
          this.player.on("loaded", () => {
            this.props.onReady();
            this.refreshDuration();
          });
          this.player.on("play", () => {
            this.props.onPlay();
            this.refreshDuration();
          });
          this.player.on("pause", this.props.onPause);
          this.player.on("seeked", (e) => this.props.onSeek(e.seconds));
          this.player.on("ended", this.props.onEnded);
          this.player.on("error", this.props.onError);
          this.player.on("timeupdate", ({ seconds }) => {
            this.currentTime = seconds;
          });
          this.player.on("progress", ({ seconds }) => {
            this.secondsLoaded = seconds;
          });
          this.player.on("bufferstart", this.props.onBuffer);
          this.player.on("bufferend", this.props.onBufferEnd);
          this.player.on("playbackratechange", (e) => this.props.onPlaybackRateChange(e.playbackRate));
        }, this.props.onError);
      }
      refreshDuration() {
        this.player.getDuration().then((duration) => {
          this.duration = duration;
        });
      }
      play() {
        const promise = this.callPlayer("play");
        if (promise) {
          promise.catch(this.props.onError);
        }
      }
      pause() {
        this.callPlayer("pause");
      }
      stop() {
        this.callPlayer("unload");
      }
      seekTo(seconds, keepPlaying = true) {
        this.callPlayer("setCurrentTime", seconds);
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.callPlayer("setVolume", fraction);
      }
      setMuted(muted) {
        this.callPlayer("setMuted", muted);
      }
      setLoop(loop) {
        this.callPlayer("setLoop", loop);
      }
      setPlaybackRate(rate) {
        this.callPlayer("setPlaybackRate", rate);
      }
      mute = () => {
        this.setMuted(true);
      };
      unmute = () => {
        this.setMuted(false);
      };
      getDuration() {
        return this.duration;
      }
      getCurrentTime() {
        return this.currentTime;
      }
      getSecondsLoaded() {
        return this.secondsLoaded;
      }
      ref = (container) => {
        this.container = container;
      };
      render() {
        const { display } = this.props;
        const style = {
          width: "100%",
          height: "100%",
          overflow: "hidden",
          display
        };
        return /* @__PURE__ */ import_react3.default.createElement(
          "div",
          {
            key: this.props.url,
            ref: this.ref,
            style
          }
        );
      }
    };
  }
});

// src/players/Facebook.js
var Facebook_exports = {};
__export(Facebook_exports, {
  default: () => Facebook
});
var import_react4, SDK_URL4, SDK_GLOBAL4, SDK_GLOBAL_READY2, PLAYER_ID_PREFIX, Facebook;
var init_Facebook = __esm({
  "src/players/Facebook.js"() {
    import_react4 = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL4 = "https://connect.facebook.net/en_US/sdk.js";
    SDK_GLOBAL4 = "FB";
    SDK_GLOBAL_READY2 = "fbAsyncInit";
    PLAYER_ID_PREFIX = "facebook-player-";
    Facebook = class extends import_react4.Component {
      static displayName = "Facebook";
      static canPlay = canPlay.facebook;
      static loopOnEnded = true;
      callPlayer = callPlayer;
      playerID = this.props.config.playerId || `${PLAYER_ID_PREFIX}${randomString()}`;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      load(url, isReady) {
        if (isReady) {
          getSDK(SDK_URL4, SDK_GLOBAL4, SDK_GLOBAL_READY2).then((FB) => FB.XFBML.parse());
          return;
        }
        getSDK(SDK_URL4, SDK_GLOBAL4, SDK_GLOBAL_READY2).then((FB) => {
          FB.init({
            appId: this.props.config.appId,
            xfbml: true,
            version: this.props.config.version
          });
          FB.Event.subscribe("xfbml.render", (msg) => {
            this.props.onLoaded();
          });
          FB.Event.subscribe("xfbml.ready", (msg) => {
            if (msg.type === "video" && msg.id === this.playerID) {
              this.player = msg.instance;
              this.player.subscribe("startedPlaying", this.props.onPlay);
              this.player.subscribe("paused", this.props.onPause);
              this.player.subscribe("finishedPlaying", this.props.onEnded);
              this.player.subscribe("startedBuffering", this.props.onBuffer);
              this.player.subscribe("finishedBuffering", this.props.onBufferEnd);
              this.player.subscribe("error", this.props.onError);
              if (this.props.muted) {
                this.callPlayer("mute");
              } else {
                this.callPlayer("unmute");
              }
              this.props.onReady();
              document.getElementById(this.playerID).querySelector("iframe").style.visibility = "visible";
            }
          });
        });
      }
      play() {
        this.callPlayer("play");
      }
      pause() {
        this.callPlayer("pause");
      }
      stop() {
      }
      seekTo(seconds, keepPlaying = true) {
        this.callPlayer("seek", seconds);
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.callPlayer("setVolume", fraction);
      }
      mute = () => {
        this.callPlayer("mute");
      };
      unmute = () => {
        this.callPlayer("unmute");
      };
      getDuration() {
        return this.callPlayer("getDuration");
      }
      getCurrentTime() {
        return this.callPlayer("getCurrentPosition");
      }
      getSecondsLoaded() {
        return null;
      }
      render() {
        const { attributes } = this.props.config;
        const style = {
          width: "100%",
          height: "100%"
        };
        return /* @__PURE__ */ import_react4.default.createElement(
          "div",
          {
            style,
            id: this.playerID,
            className: "fb-video",
            "data-href": this.props.url,
            "data-autoplay": this.props.playing ? "true" : "false",
            "data-allowfullscreen": "true",
            "data-controls": this.props.controls ? "true" : "false",
            ...attributes
          }
        );
      }
    };
  }
});

// src/players/Streamable.js
var Streamable_exports = {};
__export(Streamable_exports, {
  default: () => Streamable
});
var import_react5, SDK_URL5, SDK_GLOBAL5, Streamable;
var init_Streamable = __esm({
  "src/players/Streamable.js"() {
    import_react5 = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL5 = "https://cdn.embed.ly/player-0.1.0.min.js";
    SDK_GLOBAL5 = "playerjs";
    Streamable = class extends import_react5.Component {
      static displayName = "Streamable";
      static canPlay = canPlay.streamable;
      callPlayer = callPlayer;
      duration = null;
      currentTime = null;
      secondsLoaded = null;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      load(url) {
        getSDK(SDK_URL5, SDK_GLOBAL5).then((playerjs) => {
          if (!this.iframe)
            return;
          this.player = new playerjs.Player(this.iframe);
          this.player.setLoop(this.props.loop);
          this.player.on("ready", this.props.onReady);
          this.player.on("play", this.props.onPlay);
          this.player.on("pause", this.props.onPause);
          this.player.on("seeked", this.props.onSeek);
          this.player.on("ended", this.props.onEnded);
          this.player.on("error", this.props.onError);
          this.player.on("timeupdate", ({ duration, seconds }) => {
            this.duration = duration;
            this.currentTime = seconds;
          });
          this.player.on("buffered", ({ percent }) => {
            if (this.duration) {
              this.secondsLoaded = this.duration * percent;
            }
          });
          if (this.props.muted) {
            this.player.mute();
          }
        }, this.props.onError);
      }
      play() {
        this.callPlayer("play");
      }
      pause() {
        this.callPlayer("pause");
      }
      stop() {
      }
      seekTo(seconds, keepPlaying = true) {
        this.callPlayer("setCurrentTime", seconds);
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.callPlayer("setVolume", fraction * 100);
      }
      setLoop(loop) {
        this.callPlayer("setLoop", loop);
      }
      mute = () => {
        this.callPlayer("mute");
      };
      unmute = () => {
        this.callPlayer("unmute");
      };
      getDuration() {
        return this.duration;
      }
      getCurrentTime() {
        return this.currentTime;
      }
      getSecondsLoaded() {
        return this.secondsLoaded;
      }
      ref = (iframe) => {
        this.iframe = iframe;
      };
      render() {
        const id = this.props.url.match(MATCH_URL_STREAMABLE)[1];
        const style = {
          width: "100%",
          height: "100%"
        };
        return /* @__PURE__ */ import_react5.default.createElement(
          "iframe",
          {
            ref: this.ref,
            src: `https://streamable.com/o/${id}`,
            frameBorder: "0",
            scrolling: "no",
            style,
            allow: "encrypted-media; autoplay; fullscreen;"
          }
        );
      }
    };
  }
});

// src/players/Wistia.js
var Wistia_exports = {};
__export(Wistia_exports, {
  default: () => Wistia
});
var import_react6, SDK_URL6, SDK_GLOBAL6, PLAYER_ID_PREFIX2, Wistia;
var init_Wistia = __esm({
  "src/players/Wistia.js"() {
    import_react6 = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL6 = "https://fast.wistia.com/assets/external/E-v1.js";
    SDK_GLOBAL6 = "Wistia";
    PLAYER_ID_PREFIX2 = "wistia-player-";
    Wistia = class extends import_react6.Component {
      static displayName = "Wistia";
      static canPlay = canPlay.wistia;
      static loopOnEnded = true;
      callPlayer = callPlayer;
      playerID = this.props.config.playerId || `${PLAYER_ID_PREFIX2}${randomString()}`;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      load(url) {
        const { playing, muted, controls, onReady, config, onError } = this.props;
        getSDK(SDK_URL6, SDK_GLOBAL6).then((Wistia2) => {
          if (config.customControls) {
            config.customControls.forEach((control) => Wistia2.defineControl(control));
          }
          window._wq = window._wq || [];
          window._wq.push({
            id: this.playerID,
            options: {
              autoPlay: playing,
              silentAutoPlay: "allow",
              muted,
              controlsVisibleOnLoad: controls,
              fullscreenButton: controls,
              playbar: controls,
              playbackRateControl: controls,
              qualityControl: controls,
              volumeControl: controls,
              settingsControl: controls,
              smallPlayButton: controls,
              ...config.options
            },
            onReady: (player) => {
              this.player = player;
              this.unbind();
              this.player.bind("play", this.onPlay);
              this.player.bind("pause", this.onPause);
              this.player.bind("seek", this.onSeek);
              this.player.bind("end", this.onEnded);
              this.player.bind("playbackratechange", this.onPlaybackRateChange);
              onReady();
            }
          });
        }, onError);
      }
      unbind() {
        this.player.unbind("play", this.onPlay);
        this.player.unbind("pause", this.onPause);
        this.player.unbind("seek", this.onSeek);
        this.player.unbind("end", this.onEnded);
        this.player.unbind("playbackratechange", this.onPlaybackRateChange);
      }
      // Proxy methods to prevent listener leaks
      onPlay = (...args) => this.props.onPlay(...args);
      onPause = (...args) => this.props.onPause(...args);
      onSeek = (...args) => this.props.onSeek(...args);
      onEnded = (...args) => this.props.onEnded(...args);
      onPlaybackRateChange = (...args) => this.props.onPlaybackRateChange(...args);
      play() {
        this.callPlayer("play");
      }
      pause() {
        this.callPlayer("pause");
      }
      stop() {
        this.unbind();
        this.callPlayer("remove");
      }
      seekTo(seconds, keepPlaying = true) {
        this.callPlayer("time", seconds);
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.callPlayer("volume", fraction);
      }
      mute = () => {
        this.callPlayer("mute");
      };
      unmute = () => {
        this.callPlayer("unmute");
      };
      setPlaybackRate(rate) {
        this.callPlayer("playbackRate", rate);
      }
      getDuration() {
        return this.callPlayer("duration");
      }
      getCurrentTime() {
        return this.callPlayer("time");
      }
      getSecondsLoaded() {
        return null;
      }
      render() {
        const { url } = this.props;
        const videoID = url && url.match(MATCH_URL_WISTIA)[1];
        const className = `wistia_embed wistia_async_${videoID}`;
        const style = {
          width: "100%",
          height: "100%"
        };
        return /* @__PURE__ */ import_react6.default.createElement("div", { id: this.playerID, key: videoID, className, style });
      }
    };
  }
});

// src/players/Twitch.js
var Twitch_exports = {};
__export(Twitch_exports, {
  default: () => Twitch
});
var import_react7, SDK_URL7, SDK_GLOBAL7, PLAYER_ID_PREFIX3, Twitch;
var init_Twitch = __esm({
  "src/players/Twitch.js"() {
    import_react7 = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL7 = "https://player.twitch.tv/js/embed/v1.js";
    SDK_GLOBAL7 = "Twitch";
    PLAYER_ID_PREFIX3 = "twitch-player-";
    Twitch = class extends import_react7.Component {
      static displayName = "Twitch";
      static canPlay = canPlay.twitch;
      static loopOnEnded = true;
      callPlayer = callPlayer;
      playerID = this.props.config.playerId || `${PLAYER_ID_PREFIX3}${randomString()}`;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      load(url, isReady) {
        const { playsinline, onError, config, controls } = this.props;
        const isChannel = MATCH_URL_TWITCH_CHANNEL.test(url);
        const id = isChannel ? url.match(MATCH_URL_TWITCH_CHANNEL)[1] : url.match(MATCH_URL_TWITCH_VIDEO)[1];
        if (isReady) {
          if (isChannel) {
            this.player.setChannel(id);
          } else {
            this.player.setVideo("v" + id);
          }
          return;
        }
        getSDK(SDK_URL7, SDK_GLOBAL7).then((Twitch2) => {
          this.player = new Twitch2.Player(this.playerID, {
            video: isChannel ? "" : id,
            channel: isChannel ? id : "",
            height: "100%",
            width: "100%",
            playsinline,
            autoplay: this.props.playing,
            muted: this.props.muted,
            // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859
            controls: isChannel ? true : controls,
            time: parseStartTime(url),
            ...config.options
          });
          const { READY, PLAYING, PAUSE, ENDED, ONLINE, OFFLINE, SEEK } = Twitch2.Player;
          this.player.addEventListener(READY, this.props.onReady);
          this.player.addEventListener(PLAYING, this.props.onPlay);
          this.player.addEventListener(PAUSE, this.props.onPause);
          this.player.addEventListener(ENDED, this.props.onEnded);
          this.player.addEventListener(SEEK, this.props.onSeek);
          this.player.addEventListener(ONLINE, this.props.onLoaded);
          this.player.addEventListener(OFFLINE, this.props.onLoaded);
        }, onError);
      }
      play() {
        this.callPlayer("play");
      }
      pause() {
        this.callPlayer("pause");
      }
      stop() {
        this.callPlayer("pause");
      }
      seekTo(seconds, keepPlaying = true) {
        this.callPlayer("seek", seconds);
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.callPlayer("setVolume", fraction);
      }
      mute = () => {
        this.callPlayer("setMuted", true);
      };
      unmute = () => {
        this.callPlayer("setMuted", false);
      };
      getDuration() {
        return this.callPlayer("getDuration");
      }
      getCurrentTime() {
        return this.callPlayer("getCurrentTime");
      }
      getSecondsLoaded() {
        return null;
      }
      render() {
        const style = {
          width: "100%",
          height: "100%"
        };
        return /* @__PURE__ */ import_react7.default.createElement("div", { style, id: this.playerID });
      }
    };
  }
});

// src/players/DailyMotion.js
var DailyMotion_exports = {};
__export(DailyMotion_exports, {
  default: () => DailyMotion
});
var import_react8, SDK_URL8, SDK_GLOBAL8, SDK_GLOBAL_READY3, DailyMotion;
var init_DailyMotion = __esm({
  "src/players/DailyMotion.js"() {
    import_react8 = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL8 = "https://api.dmcdn.net/all.js";
    SDK_GLOBAL8 = "DM";
    SDK_GLOBAL_READY3 = "dmAsyncInit";
    DailyMotion = class extends import_react8.Component {
      static displayName = "DailyMotion";
      static canPlay = canPlay.dailymotion;
      static loopOnEnded = true;
      callPlayer = callPlayer;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      load(url) {
        const { controls, config, onError, playing } = this.props;
        const [, id] = url.match(MATCH_URL_DAILYMOTION);
        if (this.player) {
          this.player.load(id, {
            start: parseStartTime(url),
            autoplay: playing
          });
          return;
        }
        getSDK(SDK_URL8, SDK_GLOBAL8, SDK_GLOBAL_READY3, (DM) => DM.player).then((DM) => {
          if (!this.container)
            return;
          const Player2 = DM.player;
          this.player = new Player2(this.container, {
            width: "100%",
            height: "100%",
            video: id,
            params: {
              controls,
              autoplay: this.props.playing,
              mute: this.props.muted,
              start: parseStartTime(url),
              origin: window.location.origin,
              ...config.params
            },
            events: {
              apiready: this.props.onReady,
              seeked: () => this.props.onSeek(this.player.currentTime),
              video_end: this.props.onEnded,
              durationchange: this.onDurationChange,
              pause: this.props.onPause,
              playing: this.props.onPlay,
              waiting: this.props.onBuffer,
              error: (event) => onError(event)
            }
          });
        }, onError);
      }
      onDurationChange = () => {
        const duration = this.getDuration();
        this.props.onDuration(duration);
      };
      play() {
        this.callPlayer("play");
      }
      pause() {
        this.callPlayer("pause");
      }
      stop() {
      }
      seekTo(seconds, keepPlaying = true) {
        this.callPlayer("seek", seconds);
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.callPlayer("setVolume", fraction);
      }
      mute = () => {
        this.callPlayer("setMuted", true);
      };
      unmute = () => {
        this.callPlayer("setMuted", false);
      };
      getDuration() {
        return this.player.duration || null;
      }
      getCurrentTime() {
        return this.player.currentTime;
      }
      getSecondsLoaded() {
        return this.player.bufferedTime;
      }
      ref = (container) => {
        this.container = container;
      };
      render() {
        const { display } = this.props;
        const style = {
          width: "100%",
          height: "100%",
          display
        };
        return /* @__PURE__ */ import_react8.default.createElement("div", { style }, /* @__PURE__ */ import_react8.default.createElement("div", { ref: this.ref }));
      }
    };
  }
});

// src/players/Mixcloud.js
var Mixcloud_exports = {};
__export(Mixcloud_exports, {
  default: () => Mixcloud
});
var import_react9, SDK_URL9, SDK_GLOBAL9, Mixcloud;
var init_Mixcloud = __esm({
  "src/players/Mixcloud.js"() {
    import_react9 = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL9 = "https://widget.mixcloud.com/media/js/widgetApi.js";
    SDK_GLOBAL9 = "Mixcloud";
    Mixcloud = class extends import_react9.Component {
      static displayName = "Mixcloud";
      static canPlay = canPlay.mixcloud;
      static loopOnEnded = true;
      callPlayer = callPlayer;
      duration = null;
      currentTime = null;
      secondsLoaded = null;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      load(url) {
        getSDK(SDK_URL9, SDK_GLOBAL9).then((Mixcloud2) => {
          this.player = Mixcloud2.PlayerWidget(this.iframe);
          this.player.ready.then(() => {
            this.player.events.play.on(this.props.onPlay);
            this.player.events.pause.on(this.props.onPause);
            this.player.events.ended.on(this.props.onEnded);
            this.player.events.error.on(this.props.error);
            this.player.events.progress.on((seconds, duration) => {
              this.currentTime = seconds;
              this.duration = duration;
            });
            this.props.onReady();
          });
        }, this.props.onError);
      }
      play() {
        this.callPlayer("play");
      }
      pause() {
        this.callPlayer("pause");
      }
      stop() {
      }
      seekTo(seconds, keepPlaying = true) {
        this.callPlayer("seek", seconds);
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
      }
      mute = () => {
      };
      unmute = () => {
      };
      getDuration() {
        return this.duration;
      }
      getCurrentTime() {
        return this.currentTime;
      }
      getSecondsLoaded() {
        return null;
      }
      ref = (iframe) => {
        this.iframe = iframe;
      };
      render() {
        const { url, config } = this.props;
        const id = url.match(MATCH_URL_MIXCLOUD)[1];
        const style = {
          width: "100%",
          height: "100%"
        };
        const query = queryString({
          ...config.options,
          feed: `/${id}/`
        });
        return /* @__PURE__ */ import_react9.default.createElement(
          "iframe",
          {
            key: id,
            ref: this.ref,
            style,
            src: `https://www.mixcloud.com/widget/iframe/?${query}`,
            frameBorder: "0",
            allow: "autoplay"
          }
        );
      }
    };
  }
});

// src/players/Vidyard.js
var Vidyard_exports = {};
__export(Vidyard_exports, {
  default: () => Vidyard
});
var import_react10, SDK_URL10, SDK_GLOBAL10, SDK_GLOBAL_READY4, Vidyard;
var init_Vidyard = __esm({
  "src/players/Vidyard.js"() {
    import_react10 = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL10 = "https://play.vidyard.com/embed/v4.js";
    SDK_GLOBAL10 = "VidyardV4";
    SDK_GLOBAL_READY4 = "onVidyardAPI";
    Vidyard = class extends import_react10.Component {
      static displayName = "Vidyard";
      static canPlay = canPlay.vidyard;
      callPlayer = callPlayer;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      load(url) {
        const { playing, config, onError, onDuration } = this.props;
        const id = url && url.match(MATCH_URL_VIDYARD)[1];
        if (this.player) {
          this.stop();
        }
        getSDK(SDK_URL10, SDK_GLOBAL10, SDK_GLOBAL_READY4).then((Vidyard2) => {
          if (!this.container)
            return;
          Vidyard2.api.addReadyListener((data, player) => {
            if (this.player) {
              return;
            }
            this.player = player;
            this.player.on("ready", this.props.onReady);
            this.player.on("play", this.props.onPlay);
            this.player.on("pause", this.props.onPause);
            this.player.on("seek", this.props.onSeek);
            this.player.on("playerComplete", this.props.onEnded);
          }, id);
          Vidyard2.api.renderPlayer({
            uuid: id,
            container: this.container,
            autoplay: playing ? 1 : 0,
            ...config.options
          });
          Vidyard2.api.getPlayerMetadata(id).then((meta) => {
            this.duration = meta.length_in_seconds;
            onDuration(meta.length_in_seconds);
          });
        }, onError);
      }
      play() {
        this.callPlayer("play");
      }
      pause() {
        this.callPlayer("pause");
      }
      stop() {
        window.VidyardV4.api.destroyPlayer(this.player);
      }
      seekTo(amount, keepPlaying = true) {
        this.callPlayer("seek", amount);
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.callPlayer("setVolume", fraction);
      }
      mute = () => {
        this.setVolume(0);
      };
      unmute = () => {
        if (this.props.volume !== null) {
          this.setVolume(this.props.volume);
        }
      };
      setPlaybackRate(rate) {
        this.callPlayer("setPlaybackSpeed", rate);
      }
      getDuration() {
        return this.duration;
      }
      getCurrentTime() {
        return this.callPlayer("currentTime");
      }
      getSecondsLoaded() {
        return null;
      }
      ref = (container) => {
        this.container = container;
      };
      render() {
        const { display } = this.props;
        const style = {
          width: "100%",
          height: "100%",
          display
        };
        return /* @__PURE__ */ import_react10.default.createElement("div", { style }, /* @__PURE__ */ import_react10.default.createElement("div", { ref: this.ref }));
      }
    };
  }
});

// src/players/Kaltura.js
var Kaltura_exports = {};
__export(Kaltura_exports, {
  default: () => Kaltura
});
var import_react11, SDK_URL11, SDK_GLOBAL11, Kaltura;
var init_Kaltura = __esm({
  "src/players/Kaltura.js"() {
    import_react11 = __toESM(require_react());
    init_utils();
    init_patterns();
    SDK_URL11 = "https://cdn.embed.ly/player-0.1.0.min.js";
    SDK_GLOBAL11 = "playerjs";
    Kaltura = class extends import_react11.Component {
      static displayName = "Kaltura";
      static canPlay = canPlay.kaltura;
      callPlayer = callPlayer;
      duration = null;
      currentTime = null;
      secondsLoaded = null;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
      }
      load(url) {
        getSDK(SDK_URL11, SDK_GLOBAL11).then((playerjs) => {
          if (!this.iframe)
            return;
          this.player = new playerjs.Player(this.iframe);
          this.player.on("ready", () => {
            setTimeout(() => {
              this.player.isReady = true;
              this.player.setLoop(this.props.loop);
              if (this.props.muted) {
                this.player.mute();
              }
              this.addListeners(this.player, this.props);
              this.props.onReady();
            }, 500);
          });
        }, this.props.onError);
      }
      addListeners(player, props) {
        player.on("play", props.onPlay);
        player.on("pause", props.onPause);
        player.on("ended", props.onEnded);
        player.on("error", props.onError);
        player.on("timeupdate", ({ duration, seconds }) => {
          this.duration = duration;
          this.currentTime = seconds;
        });
      }
      play() {
        this.callPlayer("play");
      }
      pause() {
        this.callPlayer("pause");
      }
      stop() {
      }
      seekTo(seconds, keepPlaying = true) {
        this.callPlayer("setCurrentTime", seconds);
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.callPlayer("setVolume", fraction);
      }
      setLoop(loop) {
        this.callPlayer("setLoop", loop);
      }
      mute = () => {
        this.callPlayer("mute");
      };
      unmute = () => {
        this.callPlayer("unmute");
      };
      getDuration() {
        return this.duration;
      }
      getCurrentTime() {
        return this.currentTime;
      }
      getSecondsLoaded() {
        return this.secondsLoaded;
      }
      ref = (iframe) => {
        this.iframe = iframe;
      };
      render() {
        const style = {
          width: "100%",
          height: "100%"
        };
        return /* @__PURE__ */ import_react11.default.createElement(
          "iframe",
          {
            ref: this.ref,
            src: this.props.url,
            frameBorder: "0",
            scrolling: "no",
            style,
            allow: "encrypted-media; autoplay; fullscreen;",
            referrerPolicy: "no-referrer-when-downgrade"
          }
        );
      }
    };
  }
});

// src/players/FilePlayer.js
var FilePlayer_exports = {};
__export(FilePlayer_exports, {
  default: () => FilePlayer
});
var import_react12, HAS_NAVIGATOR, IS_IPAD_PRO, IS_IOS, IS_SAFARI, HLS_SDK_URL, HLS_GLOBAL, DASH_SDK_URL, DASH_GLOBAL, FLV_SDK_URL, FLV_GLOBAL, MATCH_DROPBOX_URL, MATCH_CLOUDFLARE_STREAM, REPLACE_CLOUDFLARE_STREAM, FilePlayer;
var init_FilePlayer = __esm({
  "src/players/FilePlayer.js"() {
    import_react12 = __toESM(require_react());
    init_utils();
    init_patterns();
    HAS_NAVIGATOR = typeof navigator !== "undefined";
    IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1;
    IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;
    IS_SAFARI = HAS_NAVIGATOR && /^((?!chrome|android).)*safari/i.test(navigator.userAgent) && !window.MSStream;
    HLS_SDK_URL = "https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js";
    HLS_GLOBAL = "Hls";
    DASH_SDK_URL = "https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js";
    DASH_GLOBAL = "dashjs";
    FLV_SDK_URL = "https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js";
    FLV_GLOBAL = "flvjs";
    MATCH_DROPBOX_URL = /www\.dropbox\.com\/.+/;
    MATCH_CLOUDFLARE_STREAM = /https:\/\/watch\.cloudflarestream\.com\/([a-z0-9]+)/;
    REPLACE_CLOUDFLARE_STREAM = "https://videodelivery.net/{id}/manifest/video.m3u8";
    FilePlayer = class extends import_react12.Component {
      static displayName = "FilePlayer";
      static canPlay = canPlay.file;
      componentDidMount() {
        this.props.onMount && this.props.onMount(this);
        this.addListeners(this.player);
        const src = this.getSource(this.props.url);
        if (src) {
          this.player.src = src;
        }
        if (IS_IOS || this.props.config.forceDisableHls) {
          this.player.load();
        }
      }
      componentDidUpdate(prevProps) {
        if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {
          this.removeListeners(this.prevPlayer, prevProps.url);
          this.addListeners(this.player);
        }
        if (this.props.url !== prevProps.url && !isMediaStream(this.props.url) && !(this.props.url instanceof Array)) {
          this.player.srcObject = null;
        }
      }
      componentWillUnmount() {
        this.player.removeAttribute("src");
        this.removeListeners(this.player);
        if (this.hls) {
          this.hls.destroy();
        }
      }
      addListeners(player) {
        const { url, playsinline } = this.props;
        player.addEventListener("play", this.onPlay);
        player.addEventListener("waiting", this.onBuffer);
        player.addEventListener("playing", this.onBufferEnd);
        player.addEventListener("pause", this.onPause);
        player.addEventListener("seeked", this.onSeek);
        player.addEventListener("ended", this.onEnded);
        player.addEventListener("error", this.onError);
        player.addEventListener("ratechange", this.onPlayBackRateChange);
        player.addEventListener("enterpictureinpicture", this.onEnablePIP);
        player.addEventListener("leavepictureinpicture", this.onDisablePIP);
        player.addEventListener("webkitpresentationmodechanged", this.onPresentationModeChange);
        if (!this.shouldUseHLS(url)) {
          player.addEventListener("canplay", this.onReady);
        }
        if (playsinline) {
          player.setAttribute("playsinline", "");
          player.setAttribute("webkit-playsinline", "");
          player.setAttribute("x5-playsinline", "");
        }
      }
      removeListeners(player, url) {
        player.removeEventListener("canplay", this.onReady);
        player.removeEventListener("play", this.onPlay);
        player.removeEventListener("waiting", this.onBuffer);
        player.removeEventListener("playing", this.onBufferEnd);
        player.removeEventListener("pause", this.onPause);
        player.removeEventListener("seeked", this.onSeek);
        player.removeEventListener("ended", this.onEnded);
        player.removeEventListener("error", this.onError);
        player.removeEventListener("ratechange", this.onPlayBackRateChange);
        player.removeEventListener("enterpictureinpicture", this.onEnablePIP);
        player.removeEventListener("leavepictureinpicture", this.onDisablePIP);
        player.removeEventListener("webkitpresentationmodechanged", this.onPresentationModeChange);
        if (!this.shouldUseHLS(url)) {
          player.removeEventListener("canplay", this.onReady);
        }
      }
      // Proxy methods to prevent listener leaks
      onReady = (...args) => this.props.onReady(...args);
      onPlay = (...args) => this.props.onPlay(...args);
      onBuffer = (...args) => this.props.onBuffer(...args);
      onBufferEnd = (...args) => this.props.onBufferEnd(...args);
      onPause = (...args) => this.props.onPause(...args);
      onEnded = (...args) => this.props.onEnded(...args);
      onError = (...args) => this.props.onError(...args);
      onPlayBackRateChange = (event) => this.props.onPlaybackRateChange(event.target.playbackRate);
      onEnablePIP = (...args) => this.props.onEnablePIP(...args);
      onDisablePIP = (e) => {
        const { onDisablePIP, playing } = this.props;
        onDisablePIP(e);
        if (playing) {
          this.play();
        }
      };
      onPresentationModeChange = (e) => {
        if (this.player && supportsWebKitPresentationMode(this.player)) {
          const { webkitPresentationMode } = this.player;
          if (webkitPresentationMode === "picture-in-picture") {
            this.onEnablePIP(e);
          } else if (webkitPresentationMode === "inline") {
            this.onDisablePIP(e);
          }
        }
      };
      onSeek = (e) => {
        this.props.onSeek(e.target.currentTime);
      };
      shouldUseAudio(props) {
        if (props.config.forceVideo) {
          return false;
        }
        if (props.config.attributes.poster) {
          return false;
        }
        return AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;
      }
      shouldUseHLS(url) {
        if (IS_SAFARI && this.props.config.forceSafariHLS || this.props.config.forceHLS) {
          return true;
        }
        if (IS_IOS || this.props.config.forceDisableHls) {
          return false;
        }
        return HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);
      }
      shouldUseDASH(url) {
        return DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;
      }
      shouldUseFLV(url) {
        return FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;
      }
      load(url) {
        const { hlsVersion, hlsOptions, dashVersion, flvVersion } = this.props.config;
        if (this.hls) {
          this.hls.destroy();
        }
        if (this.dash) {
          this.dash.reset();
        }
        if (this.shouldUseHLS(url)) {
          getSDK(HLS_SDK_URL.replace("VERSION", hlsVersion), HLS_GLOBAL).then((Hls) => {
            this.hls = new Hls(hlsOptions);
            this.hls.on(Hls.Events.MANIFEST_PARSED, () => {
              this.props.onReady();
            });
            this.hls.on(Hls.Events.ERROR, (e, data) => {
              this.props.onError(e, data, this.hls, Hls);
            });
            if (MATCH_CLOUDFLARE_STREAM.test(url)) {
              const id = url.match(MATCH_CLOUDFLARE_STREAM)[1];
              this.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace("{id}", id));
            } else {
              this.hls.loadSource(url);
            }
            this.hls.attachMedia(this.player);
            this.props.onLoaded();
          });
        }
        if (this.shouldUseDASH(url)) {
          getSDK(DASH_SDK_URL.replace("VERSION", dashVersion), DASH_GLOBAL).then((dashjs) => {
            this.dash = dashjs.MediaPlayer().create();
            this.dash.initialize(this.player, url, this.props.playing);
            this.dash.on("error", this.props.onError);
            if (parseInt(dashVersion) < 3) {
              this.dash.getDebug().setLogToBrowserConsole(false);
            } else {
              this.dash.updateSettings({ debug: { logLevel: dashjs.Debug.LOG_LEVEL_NONE } });
            }
            this.props.onLoaded();
          });
        }
        if (this.shouldUseFLV(url)) {
          getSDK(FLV_SDK_URL.replace("VERSION", flvVersion), FLV_GLOBAL).then((flvjs) => {
            this.flv = flvjs.createPlayer({ type: "flv", url });
            this.flv.attachMediaElement(this.player);
            this.flv.on(flvjs.Events.ERROR, (e, data) => {
              this.props.onError(e, data, this.flv, flvjs);
            });
            this.flv.load();
            this.props.onLoaded();
          });
        }
        if (url instanceof Array) {
          this.player.load();
        } else if (isMediaStream(url)) {
          try {
            this.player.srcObject = url;
          } catch (e) {
            this.player.src = window.URL.createObjectURL(url);
          }
        }
      }
      play() {
        const promise = this.player.play();
        if (promise) {
          promise.catch(this.props.onError);
        }
      }
      pause() {
        this.player.pause();
      }
      stop() {
        this.player.removeAttribute("src");
        if (this.dash) {
          this.dash.reset();
        }
      }
      seekTo(seconds, keepPlaying = true) {
        this.player.currentTime = seconds;
        if (!keepPlaying) {
          this.pause();
        }
      }
      setVolume(fraction) {
        this.player.volume = fraction;
      }
      mute = () => {
        this.player.muted = true;
      };
      unmute = () => {
        this.player.muted = false;
      };
      enablePIP() {
        if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {
          this.player.requestPictureInPicture();
        } else if (supportsWebKitPresentationMode(this.player) && this.player.webkitPresentationMode !== "picture-in-picture") {
          this.player.webkitSetPresentationMode("picture-in-picture");
        }
      }
      disablePIP() {
        if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {
          document.exitPictureInPicture();
        } else if (supportsWebKitPresentationMode(this.player) && this.player.webkitPresentationMode !== "inline") {
          this.player.webkitSetPresentationMode("inline");
        }
      }
      setPlaybackRate(rate) {
        try {
          this.player.playbackRate = rate;
        } catch (error) {
          this.props.onError(error);
        }
      }
      getDuration() {
        if (!this.player)
          return null;
        const { duration, seekable } = this.player;
        if (duration === Infinity && seekable.length > 0) {
          return seekable.end(seekable.length - 1);
        }
        return duration;
      }
      getCurrentTime() {
        if (!this.player)
          return null;
        return this.player.currentTime;
      }
      getSecondsLoaded() {
        if (!this.player)
          return null;
        const { buffered } = this.player;
        if (buffered.length === 0) {
          return 0;
        }
        const end = buffered.end(buffered.length - 1);
        const duration = this.getDuration();
        if (end > duration) {
          return duration;
        }
        return end;
      }
      getSource(url) {
        const useHLS = this.shouldUseHLS(url);
        const useDASH = this.shouldUseDASH(url);
        const useFLV = this.shouldUseFLV(url);
        if (url instanceof Array || isMediaStream(url) || useHLS || useDASH || useFLV) {
          return void 0;
        }
        if (MATCH_DROPBOX_URL.test(url)) {
          return url.replace("www.dropbox.com", "dl.dropboxusercontent.com");
        }
        return url;
      }
      renderSourceElement = (source, index) => {
        if (typeof source === "string") {
          return /* @__PURE__ */ import_react12.default.createElement("source", { key: index, src: source });
        }
        return /* @__PURE__ */ import_react12.default.createElement("source", { key: index, ...source });
      };
      renderTrack = (track, index) => {
        return /* @__PURE__ */ import_react12.default.createElement("track", { key: index, ...track });
      };
      ref = (player) => {
        if (this.player) {
          this.prevPlayer = this.player;
        }
        this.player = player;
      };
      render() {
        const { url, playing, loop, controls, muted, config, width, height } = this.props;
        const useAudio = this.shouldUseAudio(this.props);
        const Element2 = useAudio ? "audio" : "video";
        const style = {
          width: width === "auto" ? width : "100%",
          height: height === "auto" ? height : "100%"
        };
        return /* @__PURE__ */ import_react12.default.createElement(
          Element2,
          {
            ref: this.ref,
            src: this.getSource(url),
            style,
            preload: "auto",
            autoPlay: playing || void 0,
            controls,
            muted,
            loop,
            ...config.attributes
          },
          url instanceof Array && url.map(this.renderSourceElement),
          config.tracks.map(this.renderTrack)
        );
      }
    };
  }
});

// node_modules/memoize-one/dist/memoize-one.cjs.js
var require_memoize_one_cjs = __commonJS({
  "node_modules/memoize-one/dist/memoize-one.cjs.js"(exports, module) {
    "use strict";
    var safeIsNaN = Number.isNaN || function ponyfill(value) {
      return typeof value === "number" && value !== value;
    };
    function isEqual3(first, second) {
      if (first === second) {
        return true;
      }
      if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
      }
      return false;
    }
    function areInputsEqual(newInputs, lastInputs) {
      if (newInputs.length !== lastInputs.length) {
        return false;
      }
      for (var i = 0; i < newInputs.length; i++) {
        if (!isEqual3(newInputs[i], lastInputs[i])) {
          return false;
        }
      }
      return true;
    }
    function memoizeOne(resultFn, isEqual4) {
      if (isEqual4 === void 0) {
        isEqual4 = areInputsEqual;
      }
      var lastThis;
      var lastArgs = [];
      var lastResult;
      var calledOnce = false;
      function memoized() {
        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          newArgs[_i] = arguments[_i];
        }
        if (calledOnce && lastThis === this && isEqual4(newArgs, lastArgs)) {
          return lastResult;
        }
        lastResult = resultFn.apply(this, newArgs);
        calledOnce = true;
        lastThis = this;
        lastArgs = newArgs;
        return lastResult;
      }
      return memoized;
    }
    module.exports = memoizeOne;
  }
});

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys[i] === "_owner" || keys[i] === "__v" || keys[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys[i]], b[keys[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual3(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error;
      }
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/factoryWithThrowingShims.js
var require_factoryWithThrowingShims = __commonJS({
  "node_modules/prop-types/factoryWithThrowingShims.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    function emptyFunction() {
    }
    function emptyFunctionWithReset() {
    }
    emptyFunctionWithReset.resetWarningCache = emptyFunction;
    module.exports = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          return;
        }
        var err = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        err.name = "Invariant Violation";
        throw err;
      }
      ;
      shim.isRequired = shim;
      function getShim() {
        return shim;
      }
      ;
      var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (false) {
      ReactIs = null;
      throwOnDirectAccess = true;
      module.exports = null(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = require_factoryWithThrowingShims()();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// src/Preview.js
var Preview_exports = {};
__export(Preview_exports, {
  default: () => Preview
});
var import_react15, ICON_SIZE, cache, Preview;
var init_Preview = __esm({
  "src/Preview.js"() {
    import_react15 = __toESM(require_react());
    ICON_SIZE = "64px";
    cache = {};
    Preview = class extends import_react15.Component {
      mounted = false;
      state = {
        image: null
      };
      componentDidMount() {
        this.mounted = true;
        this.fetchImage(this.props);
      }
      componentDidUpdate(prevProps) {
        const { url, light } = this.props;
        if (prevProps.url !== url || prevProps.light !== light) {
          this.fetchImage(this.props);
        }
      }
      componentWillUnmount() {
        this.mounted = false;
      }
      fetchImage({ url, light, oEmbedUrl }) {
        if (import_react15.default.isValidElement(light)) {
          return;
        }
        if (typeof light === "string") {
          this.setState({ image: light });
          return;
        }
        if (cache[url]) {
          this.setState({ image: cache[url] });
          return;
        }
        this.setState({ image: null });
        return window.fetch(oEmbedUrl.replace("{url}", url)).then((response) => response.json()).then((data) => {
          if (data.thumbnail_url && this.mounted) {
            const image = data.thumbnail_url.replace("height=100", "height=480").replace("-d_295x166", "-d_640");
            this.setState({ image });
            cache[url] = image;
          }
        });
      }
      handleKeyPress = (e) => {
        if (e.key === "Enter" || e.key === " ") {
          this.props.onClick();
        }
      };
      render() {
        const { light, onClick, playIcon, previewTabIndex } = this.props;
        const { image } = this.state;
        const isElement = import_react15.default.isValidElement(light);
        const flexCenter = {
          display: "flex",
          alignItems: "center",
          justifyContent: "center"
        };
        const styles = {
          preview: {
            width: "100%",
            height: "100%",
            backgroundImage: image && !isElement ? `url(${image})` : void 0,
            backgroundSize: "cover",
            backgroundPosition: "center",
            cursor: "pointer",
            ...flexCenter
          },
          shadow: {
            background: "radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)",
            borderRadius: ICON_SIZE,
            width: ICON_SIZE,
            height: ICON_SIZE,
            position: isElement ? "absolute" : void 0,
            ...flexCenter
          },
          playIcon: {
            borderStyle: "solid",
            borderWidth: "16px 0 16px 26px",
            borderColor: "transparent transparent transparent white",
            marginLeft: "7px"
          }
        };
        const defaultPlayIcon = /* @__PURE__ */ import_react15.default.createElement("div", { style: styles.shadow, className: "react-player__shadow" }, /* @__PURE__ */ import_react15.default.createElement("div", { style: styles.playIcon, className: "react-player__play-icon" }));
        return /* @__PURE__ */ import_react15.default.createElement(
          "div",
          {
            style: styles.preview,
            className: "react-player__preview",
            onClick,
            tabIndex: previewTabIndex,
            onKeyPress: this.handleKeyPress
          },
          isElement ? light : null,
          playIcon || defaultPlayIcon
        );
      }
    };
  }
});

// test/ReactPlayer/props.js
var import_react17 = __toESM(require_react());
var import_react_test_renderer = __toESM(require_react_test_renderer());
import { test } from "zora";

// src/players/index.js
var import_react13 = __toESM(require_react());
init_utils();
init_patterns();
var players_default = [
  {
    key: "youtube",
    name: "YouTube",
    canPlay: canPlay.youtube,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_YouTube(), YouTube_exports)))
  },
  {
    key: "soundcloud",
    name: "SoundCloud",
    canPlay: canPlay.soundcloud,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_SoundCloud(), SoundCloud_exports)))
  },
  {
    key: "vimeo",
    name: "Vimeo",
    canPlay: canPlay.vimeo,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_Vimeo(), Vimeo_exports)))
  },
  {
    key: "facebook",
    name: "Facebook",
    canPlay: canPlay.facebook,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_Facebook(), Facebook_exports)))
  },
  {
    key: "streamable",
    name: "Streamable",
    canPlay: canPlay.streamable,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_Streamable(), Streamable_exports)))
  },
  {
    key: "wistia",
    name: "Wistia",
    canPlay: canPlay.wistia,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_Wistia(), Wistia_exports)))
  },
  {
    key: "twitch",
    name: "Twitch",
    canPlay: canPlay.twitch,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_Twitch(), Twitch_exports)))
  },
  {
    key: "dailymotion",
    name: "DailyMotion",
    canPlay: canPlay.dailymotion,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_DailyMotion(), DailyMotion_exports)))
  },
  {
    key: "mixcloud",
    name: "Mixcloud",
    canPlay: canPlay.mixcloud,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_Mixcloud(), Mixcloud_exports)))
  },
  {
    key: "vidyard",
    name: "Vidyard",
    canPlay: canPlay.vidyard,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_Vidyard(), Vidyard_exports)))
  },
  {
    key: "kaltura",
    name: "Kaltura",
    canPlay: canPlay.kaltura,
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_Kaltura(), Kaltura_exports)))
  },
  {
    key: "file",
    name: "FilePlayer",
    canPlay: canPlay.file,
    canEnablePIP: (url) => {
      return canPlay.file(url) && (document.pictureInPictureEnabled || supportsWebKitPresentationMode()) && !AUDIO_EXTENSIONS.test(url);
    },
    lazyPlayer: (0, import_react13.lazy)(() => Promise.resolve().then(() => (init_FilePlayer(), FilePlayer_exports)))
  }
];

// src/ReactPlayer.js
var import_react16 = __toESM(require_react());
var import_deepmerge2 = __toESM(require_cjs());
var import_memoize_one = __toESM(require_memoize_one_cjs());
var import_react_fast_compare2 = __toESM(require_react_fast_compare());

// src/props.js
var import_prop_types = __toESM(require_prop_types());
var { string, bool, number, array, oneOfType, shape, object, func, node } = import_prop_types.default;
var propTypes = {
  url: oneOfType([string, array, object]),
  playing: bool,
  loop: bool,
  controls: bool,
  volume: number,
  muted: bool,
  playbackRate: number,
  width: oneOfType([string, number]),
  height: oneOfType([string, number]),
  style: object,
  progressInterval: number,
  playsinline: bool,
  pip: bool,
  stopOnUnmount: bool,
  light: oneOfType([bool, string, object]),
  playIcon: node,
  previewTabIndex: number,
  fallback: node,
  oEmbedUrl: string,
  wrapper: oneOfType([
    string,
    func,
    shape({ render: func.isRequired })
  ]),
  config: shape({
    soundcloud: shape({
      options: object
    }),
    youtube: shape({
      playerVars: object,
      embedOptions: object,
      onUnstarted: func
    }),
    facebook: shape({
      appId: string,
      version: string,
      playerId: string,
      attributes: object
    }),
    dailymotion: shape({
      params: object
    }),
    vimeo: shape({
      playerOptions: object,
      title: string
    }),
    file: shape({
      attributes: object,
      tracks: array,
      forceVideo: bool,
      forceAudio: bool,
      forceHLS: bool,
      forceSafariHLS: bool,
      forceDisableHls: bool,
      forceDASH: bool,
      forceFLV: bool,
      hlsOptions: object,
      hlsVersion: string,
      dashVersion: string,
      flvVersion: string
    }),
    wistia: shape({
      options: object,
      playerId: string,
      customControls: array
    }),
    mixcloud: shape({
      options: object
    }),
    twitch: shape({
      options: object,
      playerId: string
    }),
    vidyard: shape({
      options: object
    })
  }),
  onReady: func,
  onStart: func,
  onPlay: func,
  onPause: func,
  onBuffer: func,
  onBufferEnd: func,
  onEnded: func,
  onError: func,
  onDuration: func,
  onSeek: func,
  onPlaybackRateChange: func,
  onPlaybackQualityChange: func,
  onProgress: func,
  onClickPreview: func,
  onEnablePIP: func,
  onDisablePIP: func
};
var noop = () => {
};
var defaultProps = {
  playing: false,
  loop: false,
  controls: false,
  volume: null,
  muted: false,
  playbackRate: 1,
  width: "640px",
  height: "360px",
  style: {},
  progressInterval: 1e3,
  playsinline: false,
  pip: false,
  stopOnUnmount: true,
  light: false,
  fallback: null,
  wrapper: "div",
  previewTabIndex: 0,
  oEmbedUrl: "https://noembed.com/embed?url={url}",
  config: {
    soundcloud: {
      options: {
        visual: true,
        // Undocumented, but makes player fill container and look better
        buying: false,
        liking: false,
        download: false,
        sharing: false,
        show_comments: false,
        show_playcount: false
      }
    },
    youtube: {
      playerVars: {
        playsinline: 1,
        showinfo: 0,
        rel: 0,
        iv_load_policy: 3,
        modestbranding: 1
      },
      embedOptions: {},
      onUnstarted: noop
    },
    facebook: {
      appId: "1309697205772819",
      version: "v3.3",
      playerId: null,
      attributes: {}
    },
    dailymotion: {
      params: {
        api: 1,
        "endscreen-enable": false
      }
    },
    vimeo: {
      playerOptions: {
        autopause: false,
        byline: false,
        portrait: false,
        title: false
      },
      title: null
    },
    file: {
      attributes: {},
      tracks: [],
      forceVideo: false,
      forceAudio: false,
      forceHLS: false,
      forceDASH: false,
      forceFLV: false,
      hlsOptions: {},
      hlsVersion: "1.1.4",
      dashVersion: "3.1.3",
      flvVersion: "1.5.0",
      forceDisableHls: false
    },
    wistia: {
      options: {},
      playerId: null,
      customControls: null
    },
    mixcloud: {
      options: {
        hide_cover: 1
      }
    },
    twitch: {
      options: {},
      playerId: null
    },
    vidyard: {
      options: {}
    }
  },
  onReady: noop,
  onStart: noop,
  onPlay: noop,
  onPause: noop,
  onBuffer: noop,
  onBufferEnd: noop,
  onEnded: noop,
  onError: noop,
  onDuration: noop,
  onSeek: noop,
  onPlaybackRateChange: noop,
  onPlaybackQualityChange: noop,
  onProgress: noop,
  onClickPreview: noop,
  onEnablePIP: noop,
  onDisablePIP: noop
};

// src/ReactPlayer.js
init_utils();

// src/Player.js
var import_react14 = __toESM(require_react());
var import_react_fast_compare = __toESM(require_react_fast_compare());
init_utils();
var SEEK_ON_PLAY_EXPIRY = 5e3;
var Player = class extends import_react14.Component {
  static displayName = "Player";
  static propTypes = propTypes;
  static defaultProps = defaultProps;
  mounted = false;
  isReady = false;
  isPlaying = false;
  // Track playing state internally to prevent bugs
  isLoading = true;
  // Use isLoading to prevent onPause when switching URL
  loadOnReady = null;
  startOnPlay = true;
  seekOnPlay = null;
  onDurationCalled = false;
  componentDidMount() {
    this.mounted = true;
  }
  componentWillUnmount() {
    clearTimeout(this.progressTimeout);
    clearTimeout(this.durationCheckTimeout);
    if (this.isReady && this.props.stopOnUnmount) {
      this.player.stop();
      if (this.player.disablePIP) {
        this.player.disablePIP();
      }
    }
    this.mounted = false;
  }
  componentDidUpdate(prevProps) {
    if (!this.player) {
      return;
    }
    const { url, playing, volume, muted, playbackRate, pip, loop, activePlayer, disableDeferredLoading } = this.props;
    if (!(0, import_react_fast_compare.default)(prevProps.url, url)) {
      if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !isMediaStream(url)) {
        console.warn(`ReactPlayer: the attempt to load ${url} is being deferred until the player has loaded`);
        this.loadOnReady = url;
        return;
      }
      this.isLoading = true;
      this.startOnPlay = true;
      this.onDurationCalled = false;
      this.player.load(url, this.isReady);
    }
    if (!prevProps.playing && playing && !this.isPlaying) {
      this.player.play();
    }
    if (prevProps.playing && !playing && this.isPlaying) {
      this.player.pause();
    }
    if (!prevProps.pip && pip && this.player.enablePIP) {
      this.player.enablePIP();
    }
    if (prevProps.pip && !pip && this.player.disablePIP) {
      this.player.disablePIP();
    }
    if (prevProps.volume !== volume && volume !== null) {
      this.player.setVolume(volume);
    }
    if (prevProps.muted !== muted) {
      if (muted) {
        this.player.mute();
      } else {
        this.player.unmute();
        if (volume !== null) {
          setTimeout(() => this.player.setVolume(volume));
        }
      }
    }
    if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {
      this.player.setPlaybackRate(playbackRate);
    }
    if (prevProps.loop !== loop && this.player.setLoop) {
      this.player.setLoop(loop);
    }
  }
  handlePlayerMount = (player) => {
    if (this.player) {
      this.progress();
      return;
    }
    this.player = player;
    this.player.load(this.props.url);
    this.progress();
  };
  getDuration() {
    if (!this.isReady)
      return null;
    return this.player.getDuration();
  }
  getCurrentTime() {
    if (!this.isReady)
      return null;
    return this.player.getCurrentTime();
  }
  getSecondsLoaded() {
    if (!this.isReady)
      return null;
    return this.player.getSecondsLoaded();
  }
  getInternalPlayer = (key) => {
    if (!this.player)
      return null;
    return this.player[key];
  };
  progress = () => {
    if (this.props.url && this.player && this.isReady) {
      const playedSeconds = this.getCurrentTime() || 0;
      const loadedSeconds = this.getSecondsLoaded();
      const duration = this.getDuration();
      if (duration) {
        const progress = {
          playedSeconds,
          played: playedSeconds / duration
        };
        if (loadedSeconds !== null) {
          progress.loadedSeconds = loadedSeconds;
          progress.loaded = loadedSeconds / duration;
        }
        if (progress.playedSeconds !== this.prevPlayed || progress.loadedSeconds !== this.prevLoaded) {
          this.props.onProgress(progress);
        }
        this.prevPlayed = progress.playedSeconds;
        this.prevLoaded = progress.loadedSeconds;
      }
    }
    this.progressTimeout = setTimeout(this.progress, this.props.progressFrequency || this.props.progressInterval);
  };
  seekTo(amount, type, keepPlaying) {
    if (!this.isReady) {
      if (amount !== 0) {
        this.seekOnPlay = amount;
        setTimeout(() => {
          this.seekOnPlay = null;
        }, SEEK_ON_PLAY_EXPIRY);
      }
      return;
    }
    const isFraction = !type ? amount > 0 && amount < 1 : type === "fraction";
    if (isFraction) {
      const duration = this.player.getDuration();
      if (!duration) {
        console.warn("ReactPlayer: could not seek using fraction \u2013\xA0duration not yet available");
        return;
      }
      this.player.seekTo(duration * amount, keepPlaying);
      return;
    }
    this.player.seekTo(amount, keepPlaying);
  }
  handleReady = () => {
    if (!this.mounted)
      return;
    this.isReady = true;
    this.isLoading = false;
    const { onReady, playing, volume, muted } = this.props;
    onReady();
    if (!muted && volume !== null) {
      this.player.setVolume(volume);
    }
    if (this.loadOnReady) {
      this.player.load(this.loadOnReady, true);
      this.loadOnReady = null;
    } else if (playing) {
      this.player.play();
    }
    this.handleDurationCheck();
  };
  handlePlay = () => {
    this.isPlaying = true;
    this.isLoading = false;
    const { onStart, onPlay, playbackRate } = this.props;
    if (this.startOnPlay) {
      if (this.player.setPlaybackRate && playbackRate !== 1) {
        this.player.setPlaybackRate(playbackRate);
      }
      onStart();
      this.startOnPlay = false;
    }
    onPlay();
    if (this.seekOnPlay) {
      this.seekTo(this.seekOnPlay);
      this.seekOnPlay = null;
    }
    this.handleDurationCheck();
  };
  handlePause = (e) => {
    this.isPlaying = false;
    if (!this.isLoading) {
      this.props.onPause(e);
    }
  };
  handleEnded = () => {
    const { activePlayer, loop, onEnded } = this.props;
    if (activePlayer.loopOnEnded && loop) {
      this.seekTo(0);
    }
    if (!loop) {
      this.isPlaying = false;
      onEnded();
    }
  };
  handleError = (...args) => {
    this.isLoading = false;
    this.props.onError(...args);
  };
  handleDurationCheck = () => {
    clearTimeout(this.durationCheckTimeout);
    const duration = this.getDuration();
    if (duration) {
      if (!this.onDurationCalled) {
        this.props.onDuration(duration);
        this.onDurationCalled = true;
      }
    } else {
      this.durationCheckTimeout = setTimeout(this.handleDurationCheck, 100);
    }
  };
  handleLoaded = () => {
    this.isLoading = false;
  };
  render() {
    const Player2 = this.props.activePlayer;
    if (!Player2) {
      return null;
    }
    return /* @__PURE__ */ import_react14.default.createElement(
      Player2,
      {
        ...this.props,
        onMount: this.handlePlayerMount,
        onReady: this.handleReady,
        onPlay: this.handlePlay,
        onPause: this.handlePause,
        onEnded: this.handleEnded,
        onLoaded: this.handleLoaded,
        onError: this.handleError
      }
    );
  }
};

// src/ReactPlayer.js
var Preview2 = (0, import_react16.lazy)(() => Promise.resolve().then(() => (init_Preview(), Preview_exports)));
var IS_BROWSER = typeof window !== "undefined" && window.document;
var IS_GLOBAL = typeof global !== "undefined" && global.window && global.window.document;
var SUPPORTED_PROPS = Object.keys(propTypes);
var UniversalSuspense = IS_BROWSER || IS_GLOBAL ? import_react16.Suspense : () => null;
var customPlayers = [];
var createReactPlayer = (players, fallback2) => {
  return class ReactPlayer extends import_react16.Component {
    static displayName = "ReactPlayer";
    static propTypes = propTypes;
    static defaultProps = defaultProps;
    static addCustomPlayer = (player) => {
      customPlayers.push(player);
    };
    static removeCustomPlayers = () => {
      customPlayers.length = 0;
    };
    static canPlay = (url) => {
      for (const Player2 of [...customPlayers, ...players]) {
        if (Player2.canPlay(url)) {
          return true;
        }
      }
      return false;
    };
    static canEnablePIP = (url) => {
      for (const Player2 of [...customPlayers, ...players]) {
        if (Player2.canEnablePIP && Player2.canEnablePIP(url)) {
          return true;
        }
      }
      return false;
    };
    state = {
      showPreview: !!this.props.light
    };
    // Use references, as refs is used by React
    references = {
      wrapper: (wrapper) => {
        this.wrapper = wrapper;
      },
      player: (player) => {
        this.player = player;
      }
    };
    shouldComponentUpdate(nextProps, nextState) {
      return !(0, import_react_fast_compare2.default)(this.props, nextProps) || !(0, import_react_fast_compare2.default)(this.state, nextState);
    }
    componentDidUpdate(prevProps) {
      const { light } = this.props;
      if (!prevProps.light && light) {
        this.setState({ showPreview: true });
      }
      if (prevProps.light && !light) {
        this.setState({ showPreview: false });
      }
    }
    handleClickPreview = (e) => {
      this.setState({ showPreview: false });
      this.props.onClickPreview(e);
    };
    showPreview = () => {
      this.setState({ showPreview: true });
    };
    getDuration = () => {
      if (!this.player)
        return null;
      return this.player.getDuration();
    };
    getCurrentTime = () => {
      if (!this.player)
        return null;
      return this.player.getCurrentTime();
    };
    getSecondsLoaded = () => {
      if (!this.player)
        return null;
      return this.player.getSecondsLoaded();
    };
    getInternalPlayer = (key = "player") => {
      if (!this.player)
        return null;
      return this.player.getInternalPlayer(key);
    };
    seekTo = (fraction, type, keepPlaying) => {
      if (!this.player)
        return null;
      this.player.seekTo(fraction, type, keepPlaying);
    };
    handleReady = () => {
      this.props.onReady(this);
    };
    getActivePlayer = (0, import_memoize_one.default)((url) => {
      for (const player of [...customPlayers, ...players]) {
        if (player.canPlay(url)) {
          return player;
        }
      }
      if (fallback2) {
        return fallback2;
      }
      return null;
    });
    getConfig = (0, import_memoize_one.default)((url, key) => {
      const { config } = this.props;
      return import_deepmerge2.default.all([
        defaultProps.config,
        defaultProps.config[key] || {},
        config,
        config[key] || {}
      ]);
    });
    getAttributes = (0, import_memoize_one.default)((url) => {
      return omit(this.props, SUPPORTED_PROPS);
    });
    renderPreview(url) {
      if (!url)
        return null;
      const { light, playIcon, previewTabIndex, oEmbedUrl } = this.props;
      return /* @__PURE__ */ import_react16.default.createElement(
        Preview2,
        {
          url,
          light,
          playIcon,
          previewTabIndex,
          oEmbedUrl,
          onClick: this.handleClickPreview
        }
      );
    }
    renderActivePlayer = (url) => {
      if (!url)
        return null;
      const player = this.getActivePlayer(url);
      if (!player)
        return null;
      const config = this.getConfig(url, player.key);
      return /* @__PURE__ */ import_react16.default.createElement(
        Player,
        {
          ...this.props,
          key: player.key,
          ref: this.references.player,
          config,
          activePlayer: player.lazyPlayer || player,
          onReady: this.handleReady
        }
      );
    };
    render() {
      const { url, style, width, height, fallback: fallback3, wrapper: Wrapper } = this.props;
      const { showPreview } = this.state;
      const attributes = this.getAttributes(url);
      const wrapperRef = typeof Wrapper === "string" ? this.references.wrapper : void 0;
      return /* @__PURE__ */ import_react16.default.createElement(Wrapper, { ref: wrapperRef, style: { ...style, width, height }, ...attributes }, /* @__PURE__ */ import_react16.default.createElement(UniversalSuspense, { fallback: fallback3 }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));
    }
  };
};

// src/index.js
var fallback = players_default[players_default.length - 1];
var src_default = createReactPlayer(players_default, fallback);

// test/ReactPlayer/props.js
test("className", (t) => {
  const wrapper = (0, import_react_test_renderer.create)(/* @__PURE__ */ import_react17.default.createElement(src_default, { className: "react-player" }));
  t.equal(wrapper.getInstance().props.className, "react-player");
});
test("style", (t) => {
  const wrapper = (0, import_react_test_renderer.create)(/* @__PURE__ */ import_react17.default.createElement(src_default, { style: { marginTop: "1rem" } }));
  t.equal(wrapper.getInstance().props.style.marginTop, "1rem");
});
test("wrapper - string", (t) => {
  const wrapper = (0, import_react_test_renderer.create)(/* @__PURE__ */ import_react17.default.createElement(src_default, { wrapper: "span" }));
  t.equal(wrapper.toJSON().type, "span");
});
test("wrapper - element", (t) => {
  const Element2 = () => null;
  const wrapper = (0, import_react_test_renderer.create)(/* @__PURE__ */ import_react17.default.createElement(src_default, { wrapper: Element2 }));
  t.ok(wrapper.root.findByType(Element2));
});
/*! Bundled license information:

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react/cjs/react.production.min.js:
  (** @license React v16.14.0
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler-unstable_mock.production.min.js:
  (** @license React v0.19.1
   * scheduler-unstable_mock.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (** @license React v0.19.1
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-test-renderer/cjs/react-test-renderer.production.min.js:
  (** @license React v16.14.0
   * react-test-renderer.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
