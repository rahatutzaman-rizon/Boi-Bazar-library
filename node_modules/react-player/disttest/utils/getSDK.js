var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/load-script/index.js
var require_load_script = __commonJS({
  "node_modules/load-script/index.js"(exports, module) {
    module.exports = function load(src, opts, cb) {
      var head = document.head || document.getElementsByTagName("head")[0];
      var script = document.createElement("script");
      if (typeof opts === "function") {
        cb = opts;
        opts = {};
      }
      opts = opts || {};
      cb = cb || function() {
      };
      script.type = opts.type || "text/javascript";
      script.charset = opts.charset || "utf8";
      script.async = "async" in opts ? !!opts.async : true;
      script.src = src;
      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }
      if (opts.text) {
        script.text = "" + opts.text;
      }
      var onend = "onload" in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);
      if (!script.onload) {
        stdOnEnd(script, cb);
      }
      head.appendChild(script);
    };
    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }
    function stdOnEnd(script, cb) {
      script.onload = function() {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function() {
        this.onerror = this.onload = null;
        cb(new Error("Failed to load " + this.src), script);
      };
    }
    function ieOnEnd(script, cb) {
      script.onreadystatechange = function() {
        if (this.readyState != "complete" && this.readyState != "loaded")
          return;
        this.onreadystatechange = null;
        cb(null, script);
      };
    }
  }
});

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module.exports = deepmerge_1;
  }
});

// test/utils/getSDK.js
import { test } from "zora";
import sinon from "sinon";

// src/utils.js
var import_load_script = __toESM(require_load_script());
var import_deepmerge = __toESM(require_cjs());
function getGlobal(key) {
  if (window[key]) {
    return window[key];
  }
  if (window.exports && window.exports[key]) {
    return window.exports[key];
  }
  if (window.module && window.module.exports && window.module.exports[key]) {
    return window.module.exports[key];
  }
  return null;
}
var requests = {};
var getSDK = enableStubOn(function getSDK2(url, sdkGlobal, sdkReady = null, isLoaded = () => true, fetchScript = import_load_script.default) {
  const existingGlobal = getGlobal(sdkGlobal);
  if (existingGlobal && isLoaded(existingGlobal)) {
    return Promise.resolve(existingGlobal);
  }
  return new Promise((resolve, reject) => {
    if (requests[url]) {
      requests[url].push({ resolve, reject });
      return;
    }
    requests[url] = [{ resolve, reject }];
    const onLoaded = (sdk) => {
      requests[url].forEach((request) => request.resolve(sdk));
    };
    if (sdkReady) {
      const previousOnReady = window[sdkReady];
      window[sdkReady] = function() {
        if (previousOnReady)
          previousOnReady();
        onLoaded(getGlobal(sdkGlobal));
      };
    }
    fetchScript(url, (err) => {
      if (err) {
        requests[url].forEach((request) => request.reject(err));
        requests[url] = null;
      } else if (!sdkReady) {
        onLoaded(getGlobal(sdkGlobal));
      }
    });
  });
});
function enableStubOn(fn) {
  if (true) {
    const wrap = (...args) => wrap.stub(...args);
    wrap.stub = fn;
    return wrap;
  }
  return fn;
}

// test/utils/getSDK.js
var delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
globalThis.window = {};
var beforeEach = () => {
  window.SDK = null;
  window.SDKReady = null;
};
test("serial", async (t) => {
  await t.test("loads script", async (t2) => {
    beforeEach();
    const loadScriptOverride = sinon.fake(async (url, cb) => {
      await delay(15);
      window.SDK = "sdk";
      cb();
    });
    const sdk = await getSDK("http://example.com/abc.js", "SDK", void 0, void 0, loadScriptOverride);
    t2.is(sdk, "sdk");
    t2.ok(loadScriptOverride.calledOnce);
  });
  await t.test("throws on error", async (t2) => {
    beforeEach();
    const loadScriptOverride = sinon.fake(async (url, cb) => {
      await delay(15);
      cb(new Error("Load error"));
    });
    try {
      await getSDK("http://example.com/throws.js", "SDK", void 0, void 0, loadScriptOverride);
      t2.fail("Should throw");
    } catch (err) {
      t2.is(err.message, "Load error");
    }
    t2.ok(loadScriptOverride.calledOnce);
  });
  await t.test("does not fetch again when loaded", async (t2) => {
    beforeEach();
    const loadScriptOverride = sinon.fake();
    window.SDK = "sdk";
    const sdk = await getSDK("http://example.com/def.js", "SDK", void 0, void 0, loadScriptOverride);
    t2.is(sdk, "sdk");
    t2.ok(loadScriptOverride.notCalled);
  });
  await t.test("does not fetch again when loading", async (t2) => {
    beforeEach();
    const loadScriptOverride = sinon.fake(async (url, cb) => {
      await delay(15);
      window.SDK = "sdk";
      cb();
    });
    const result = await Promise.all([
      getSDK("http://example.com/ghi.js", "SDK", void 0, void 0, loadScriptOverride),
      getSDK("http://example.com/ghi.js", "SDK", void 0, void 0, loadScriptOverride)
    ]);
    t2.is(result[0], "sdk");
    t2.is(result[1], "sdk");
    t2.ok(loadScriptOverride.calledOnce);
  });
  await t.test("does fetch again after fetch error", async (t2) => {
    beforeEach();
    const loadScriptOverrideError = sinon.fake(async (url, cb) => {
      await delay(15);
      cb(new Error("Load error"));
    });
    const loadScriptOverride = sinon.fake(async (url, cb) => {
      await delay(15);
      window.SDK = "sdk";
      cb();
    });
    try {
      await getSDK("http://example.com/pqr.js", "SDK", void 0, void 0, loadScriptOverrideError);
      t2.fail("Should throw");
    } catch (err) {
      t2.is(err.message, "Load error");
    }
    const sdk = await getSDK("http://example.com/pqr.js", "SDK", void 0, void 0, loadScriptOverride);
    t2.is(sdk, "sdk");
    t2.ok(loadScriptOverrideError.calledOnce);
    t2.ok(loadScriptOverride.calledOnce);
  });
  await t.test("waits for sdkReady callback", async (t2) => {
    beforeEach();
    const loadScriptOverride = sinon.fake(async (url, cb) => {
      cb();
      await delay(15);
      window.SDK = "sdk";
      window.SDKReady();
    });
    const sdk = await getSDK("http://example.com/jkl.js", "SDK", "SDKReady", void 0, loadScriptOverride);
    t2.is(sdk, "sdk");
    t2.ok(loadScriptOverride.calledOnce);
  });
  await t.test("multiple sdkReady callbacks", async (t2) => {
    beforeEach();
    const loadScriptOverride = sinon.fake(async (url, cb) => {
      cb();
      await delay(15);
      window.SDK = "sdk";
      window.SDKReady();
    });
    const result = await Promise.all([
      await getSDK("http://example.com/mno.js", "SDK", "SDKReady", void 0, loadScriptOverride),
      await getSDK("http://example.com/mno.js", "SDK", "SDKReady", void 0, loadScriptOverride)
    ]);
    t2.is(result[0], "sdk");
    t2.is(result[1], "sdk");
    t2.ok(loadScriptOverride.calledOnce);
  });
});
//# sourceMappingURL=data:application/json;base64,
