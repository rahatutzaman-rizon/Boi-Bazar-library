var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/load-script/index.js
var require_load_script = __commonJS({
  "node_modules/load-script/index.js"(exports, module) {
    module.exports = function load(src, opts, cb) {
      var head = document.head || document.getElementsByTagName("head")[0];
      var script = document.createElement("script");
      if (typeof opts === "function") {
        cb = opts;
        opts = {};
      }
      opts = opts || {};
      cb = cb || function() {
      };
      script.type = opts.type || "text/javascript";
      script.charset = opts.charset || "utf8";
      script.async = "async" in opts ? !!opts.async : true;
      script.src = src;
      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }
      if (opts.text) {
        script.text = "" + opts.text;
      }
      var onend = "onload" in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);
      if (!script.onload) {
        stdOnEnd(script, cb);
      }
      head.appendChild(script);
    };
    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }
    function stdOnEnd(script, cb) {
      script.onload = function() {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function() {
        this.onerror = this.onload = null;
        cb(new Error("Failed to load " + this.src), script);
      };
    }
    function ieOnEnd(script, cb) {
      script.onreadystatechange = function() {
        if (this.readyState != "complete" && this.readyState != "loaded")
          return;
        this.onreadystatechange = null;
        cb(null, script);
      };
    }
  }
});

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module.exports = deepmerge_1;
  }
});

// test/utils/parseStartTime.js
import { test } from "zora";

// src/utils.js
var import_load_script = __toESM(require_load_script());
var import_deepmerge = __toESM(require_cjs());
var MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;
var MATCH_START_STAMP = /(\d+)(h|m|s)/g;
var MATCH_NUMERIC = /^\d+$/;
function parseTimeParam(url, pattern) {
  if (url instanceof Array) {
    return void 0;
  }
  const match = url.match(pattern);
  if (match) {
    const stamp = match[1];
    if (stamp.match(MATCH_START_STAMP)) {
      return parseTimeString(stamp);
    }
    if (MATCH_NUMERIC.test(stamp)) {
      return parseInt(stamp);
    }
  }
  return void 0;
}
function parseTimeString(stamp) {
  let seconds = 0;
  let array = MATCH_START_STAMP.exec(stamp);
  while (array !== null) {
    const [, count, period] = array;
    if (period === "h")
      seconds += parseInt(count, 10) * 60 * 60;
    if (period === "m")
      seconds += parseInt(count, 10) * 60;
    if (period === "s")
      seconds += parseInt(count, 10);
    array = MATCH_START_STAMP.exec(stamp);
  }
  return seconds;
}
function parseStartTime(url) {
  return parseTimeParam(url, MATCH_START_QUERY);
}
function getGlobal(key) {
  if (window[key]) {
    return window[key];
  }
  if (window.exports && window.exports[key]) {
    return window.exports[key];
  }
  if (window.module && window.module.exports && window.module.exports[key]) {
    return window.module.exports[key];
  }
  return null;
}
var requests = {};
var getSDK = enableStubOn(function getSDK2(url, sdkGlobal, sdkReady = null, isLoaded = () => true, fetchScript = import_load_script.default) {
  const existingGlobal = getGlobal(sdkGlobal);
  if (existingGlobal && isLoaded(existingGlobal)) {
    return Promise.resolve(existingGlobal);
  }
  return new Promise((resolve, reject) => {
    if (requests[url]) {
      requests[url].push({ resolve, reject });
      return;
    }
    requests[url] = [{ resolve, reject }];
    const onLoaded = (sdk) => {
      requests[url].forEach((request) => request.resolve(sdk));
    };
    if (sdkReady) {
      const previousOnReady = window[sdkReady];
      window[sdkReady] = function() {
        if (previousOnReady)
          previousOnReady();
        onLoaded(getGlobal(sdkGlobal));
      };
    }
    fetchScript(url, (err) => {
      if (err) {
        requests[url].forEach((request) => request.reject(err));
        requests[url] = null;
      } else if (!sdkReady) {
        onLoaded(getGlobal(sdkGlobal));
      }
    });
  });
});
function enableStubOn(fn) {
  if (true) {
    const wrap = (...args) => wrap.stub(...args);
    wrap.stub = fn;
    return wrap;
  }
  return fn;
}

// test/utils/parseStartTime.js
var YOUTUBE_URL = "http://youtu.be/12345678901";
test("parses seconds", (t) => {
  t.is(parseStartTime(YOUTUBE_URL + "?start=162"), 162);
});
test("parses stamps", (t) => {
  t.is(parseStartTime(YOUTUBE_URL + "?start=48s"), 48);
  t.is(parseStartTime(YOUTUBE_URL + "?start=3m15s"), 195);
  t.is(parseStartTime(YOUTUBE_URL + "?start=1h36m17s"), 5777);
});
test("parses with other params", (t) => {
  t.is(parseStartTime(YOUTUBE_URL + "?param=1&start=32"), 32);
});
test("parses using t", (t) => {
  t.is(parseStartTime(YOUTUBE_URL + "?t=32"), 32);
});
test("parses using a hash", (t) => {
  t.is(parseStartTime(YOUTUBE_URL + "#t=32"), 32);
  t.is(parseStartTime(YOUTUBE_URL + "#start=32"), 32);
});
test("returns undefined for invalid stamps", (t) => {
  t.is(parseStartTime(YOUTUBE_URL), void 0);
  t.is(parseStartTime(YOUTUBE_URL + "?start="), void 0);
  t.is(parseStartTime(YOUTUBE_URL + "?start=hms"), void 0);
  t.is(parseStartTime(YOUTUBE_URL + "?start=invalid"), void 0);
  t.is(parseStartTime(YOUTUBE_URL + "?strat=32"), void 0);
  t.is(parseStartTime(YOUTUBE_URL + "#s=32"), void 0);
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vbm9kZV9tb2R1bGVzL2xvYWQtc2NyaXB0L2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9kZWVwbWVyZ2UvZGlzdC9janMuanMiLCAiLi4vLi4vdGVzdC91dGlscy9wYXJzZVN0YXJ0VGltZS5qcyIsICIuLi8uLi9zcmMvdXRpbHMuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsb2FkIChzcmMsIG9wdHMsIGNiKSB7XG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdXG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0c1xuICAgIG9wdHMgPSB7fVxuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge31cbiAgY2IgPSBjYiB8fCBmdW5jdGlvbigpIHt9XG5cbiAgc2NyaXB0LnR5cGUgPSBvcHRzLnR5cGUgfHwgJ3RleHQvamF2YXNjcmlwdCdcbiAgc2NyaXB0LmNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgJ3V0ZjgnO1xuICBzY3JpcHQuYXN5bmMgPSAnYXN5bmMnIGluIG9wdHMgPyAhIW9wdHMuYXN5bmMgOiB0cnVlXG4gIHNjcmlwdC5zcmMgPSBzcmNcblxuICBpZiAob3B0cy5hdHRycykge1xuICAgIHNldEF0dHJpYnV0ZXMoc2NyaXB0LCBvcHRzLmF0dHJzKVxuICB9XG5cbiAgaWYgKG9wdHMudGV4dCkge1xuICAgIHNjcmlwdC50ZXh0ID0gJycgKyBvcHRzLnRleHRcbiAgfVxuXG4gIHZhciBvbmVuZCA9ICdvbmxvYWQnIGluIHNjcmlwdCA/IHN0ZE9uRW5kIDogaWVPbkVuZFxuICBvbmVuZChzY3JpcHQsIGNiKVxuXG4gIC8vIHNvbWUgZ29vZCBsZWdhY3kgYnJvd3NlcnMgKGZpcmVmb3gpIGZhaWwgdGhlICdpbicgZGV0ZWN0aW9uIGFib3ZlXG4gIC8vIHNvIGFzIGEgZmFsbGJhY2sgd2UgYWx3YXlzIHNldCBvbmxvYWRcbiAgLy8gb2xkIElFIHdpbGwgaWdub3JlIHRoaXMgYW5kIG5ldyBJRSB3aWxsIHNldCBvbmxvYWRcbiAgaWYgKCFzY3JpcHQub25sb2FkKSB7XG4gICAgc3RkT25FbmQoc2NyaXB0LCBjYik7XG4gIH1cblxuICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdClcbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhzY3JpcHQsIGF0dHJzKSB7XG4gIGZvciAodmFyIGF0dHIgaW4gYXR0cnMpIHtcbiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGRPbkVuZCAoc2NyaXB0LCBjYikge1xuICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMub25lcnJvciA9IHRoaXMub25sb2FkID0gbnVsbFxuICAgIGNiKG51bGwsIHNjcmlwdClcbiAgfVxuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyB0aGlzLm9ubG9hZCA9IG51bGwgaGVyZSBpcyBuZWNlc3NhcnlcbiAgICAvLyBiZWNhdXNlIGV2ZW4gSUU5IHdvcmtzIG5vdCBsaWtlIG90aGVyc1xuICAgIHRoaXMub25lcnJvciA9IHRoaXMub25sb2FkID0gbnVsbFxuICAgIGNiKG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgJyArIHRoaXMuc3JjKSwgc2NyaXB0KVxuICB9XG59XG5cbmZ1bmN0aW9uIGllT25FbmQgKHNjcmlwdCwgY2IpIHtcbiAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9ICdjb21wbGV0ZScgJiYgdGhpcy5yZWFkeVN0YXRlICE9ICdsb2FkZWQnKSByZXR1cm5cbiAgICB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGxcbiAgICBjYihudWxsLCBzY3JpcHQpIC8vIHRoZXJlIGlzIG5vIHdheSB0byBjYXRjaCBsb2FkaW5nIGVycm9ycyBpbiBJRThcbiAgfVxufVxuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcblx0aWYgKCFvcHRpb25zLmN1c3RvbU1lcmdlKSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZVxuXHR9XG5cdHZhciBjdXN0b21NZXJnZSA9IG9wdGlvbnMuY3VzdG9tTWVyZ2Uoa2V5KTtcblx0cmV0dXJuIHR5cGVvZiBjdXN0b21NZXJnZSA9PT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbU1lcmdlIDogZGVlcG1lcmdlXG59XG5cbmZ1bmN0aW9uIGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzXG5cdFx0PyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRhcmdldCwgc3ltYm9sKVxuXHRcdH0pXG5cdFx0OiBbXVxufVxuXG5mdW5jdGlvbiBnZXRLZXlzKHRhcmdldCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXModGFyZ2V0KS5jb25jYXQoZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKVxufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUlzT25PYmplY3Qob2JqZWN0LCBwcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdHJldHVybiBwcm9wZXJ0eSBpbiBvYmplY3Rcblx0fSBjYXRjaChfKSB7XG5cdFx0cmV0dXJuIGZhbHNlXG5cdH1cbn1cblxuLy8gUHJvdGVjdHMgZnJvbSBwcm90b3R5cGUgcG9pc29uaW5nIGFuZCB1bmV4cGVjdGVkIG1lcmdpbmcgdXAgdGhlIHByb3RvdHlwZSBjaGFpbi5cbmZ1bmN0aW9uIHByb3BlcnR5SXNVbnNhZmUodGFyZ2V0LCBrZXkpIHtcblx0cmV0dXJuIHByb3BlcnR5SXNPbk9iamVjdCh0YXJnZXQsIGtleSkgLy8gUHJvcGVydGllcyBhcmUgc2FmZSB0byBtZXJnZSBpZiB0aGV5IGRvbid0IGV4aXN0IGluIHRoZSB0YXJnZXQgeWV0LFxuXHRcdCYmICEoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpIC8vIHVuc2FmZSBpZiB0aGV5IGV4aXN0IHVwIHRoZSBwcm90b3R5cGUgY2hhaW4sXG5cdFx0XHQmJiBPYmplY3QucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh0YXJnZXQsIGtleSkpIC8vIGFuZCBhbHNvIHVuc2FmZSBpZiB0aGV5J3JlIG5vbmVudW1lcmFibGUuXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRpZiAob3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG5cdFx0Z2V0S2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodGFyZ2V0W2tleV0sIG9wdGlvbnMpO1xuXHRcdH0pO1xuXHR9XG5cdGdldEtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdGlmIChwcm9wZXJ0eUlzVW5zYWZlKHRhcmdldCwga2V5KSkge1xuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXG5cdFx0aWYgKHByb3BlcnR5SXNPbk9iamVjdCh0YXJnZXQsIGtleSkgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBnZXRNZXJnZUZ1bmN0aW9uKGtleSwgb3B0aW9ucykodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRvcHRpb25zLmFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cdG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgPSBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0IHx8IGlzTWVyZ2VhYmxlT2JqZWN0O1xuXHQvLyBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCBpcyBhZGRlZCB0byBgb3B0aW9uc2Agc28gdGhhdCBjdXN0b20gYXJyYXlNZXJnZSgpXG5cdC8vIGltcGxlbWVudGF0aW9ucyBjYW4gdXNlIGl0LiBUaGUgY2FsbGVyIG1heSBub3QgcmVwbGFjZSBpdC5cblx0b3B0aW9ucy5jbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkO1xuXG5cdHZhciBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuXHR2YXIgdGFyZ2V0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkodGFyZ2V0KTtcblx0dmFyIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2ggPSBzb3VyY2VJc0FycmF5ID09PSB0YXJnZXRJc0FycmF5O1xuXG5cdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSBpZiAoc291cmNlSXNBcnJheSkge1xuXHRcdHJldHVybiBvcHRpb25zLmFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnMpIHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5Jylcblx0fVxuXG5cdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9ucylcblx0fSwge30pXG59O1xuXG52YXIgZGVlcG1lcmdlXzEgPSBkZWVwbWVyZ2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcG1lcmdlXzE7XG4iLCAiaW1wb3J0IHsgdGVzdCB9IGZyb20gJ3pvcmEnXG5pbXBvcnQgeyBwYXJzZVN0YXJ0VGltZSB9IGZyb20gJy4uLy4uL3NyYy91dGlscydcblxuY29uc3QgWU9VVFVCRV9VUkwgPSAnaHR0cDovL3lvdXR1LmJlLzEyMzQ1Njc4OTAxJ1xuXG50ZXN0KCdwYXJzZXMgc2Vjb25kcycsIHQgPT4ge1xuICB0LmlzKHBhcnNlU3RhcnRUaW1lKFlPVVRVQkVfVVJMICsgJz9zdGFydD0xNjInKSwgMTYyKVxufSlcblxudGVzdCgncGFyc2VzIHN0YW1wcycsIHQgPT4ge1xuICB0LmlzKHBhcnNlU3RhcnRUaW1lKFlPVVRVQkVfVVJMICsgJz9zdGFydD00OHMnKSwgNDgpXG4gIHQuaXMocGFyc2VTdGFydFRpbWUoWU9VVFVCRV9VUkwgKyAnP3N0YXJ0PTNtMTVzJyksIDE5NSlcbiAgdC5pcyhwYXJzZVN0YXJ0VGltZShZT1VUVUJFX1VSTCArICc/c3RhcnQ9MWgzNm0xN3MnKSwgNTc3Nylcbn0pXG5cbnRlc3QoJ3BhcnNlcyB3aXRoIG90aGVyIHBhcmFtcycsIHQgPT4ge1xuICB0LmlzKHBhcnNlU3RhcnRUaW1lKFlPVVRVQkVfVVJMICsgJz9wYXJhbT0xJnN0YXJ0PTMyJyksIDMyKVxufSlcblxudGVzdCgncGFyc2VzIHVzaW5nIHQnLCB0ID0+IHtcbiAgdC5pcyhwYXJzZVN0YXJ0VGltZShZT1VUVUJFX1VSTCArICc/dD0zMicpLCAzMilcbn0pXG5cbnRlc3QoJ3BhcnNlcyB1c2luZyBhIGhhc2gnLCB0ID0+IHtcbiAgdC5pcyhwYXJzZVN0YXJ0VGltZShZT1VUVUJFX1VSTCArICcjdD0zMicpLCAzMilcbiAgdC5pcyhwYXJzZVN0YXJ0VGltZShZT1VUVUJFX1VSTCArICcjc3RhcnQ9MzInKSwgMzIpXG59KVxuXG50ZXN0KCdyZXR1cm5zIHVuZGVmaW5lZCBmb3IgaW52YWxpZCBzdGFtcHMnLCB0ID0+IHtcbiAgdC5pcyhwYXJzZVN0YXJ0VGltZShZT1VUVUJFX1VSTCksIHVuZGVmaW5lZClcbiAgdC5pcyhwYXJzZVN0YXJ0VGltZShZT1VUVUJFX1VSTCArICc/c3RhcnQ9JyksIHVuZGVmaW5lZClcbiAgdC5pcyhwYXJzZVN0YXJ0VGltZShZT1VUVUJFX1VSTCArICc/c3RhcnQ9aG1zJyksIHVuZGVmaW5lZClcbiAgdC5pcyhwYXJzZVN0YXJ0VGltZShZT1VUVUJFX1VSTCArICc/c3RhcnQ9aW52YWxpZCcpLCB1bmRlZmluZWQpXG4gIHQuaXMocGFyc2VTdGFydFRpbWUoWU9VVFVCRV9VUkwgKyAnP3N0cmF0PTMyJyksIHVuZGVmaW5lZClcbiAgdC5pcyhwYXJzZVN0YXJ0VGltZShZT1VUVUJFX1VSTCArICcjcz0zMicpLCB1bmRlZmluZWQpXG59KVxuIiwgImltcG9ydCBsb2FkU2NyaXB0IGZyb20gJ2xvYWQtc2NyaXB0J1xuaW1wb3J0IG1lcmdlIGZyb20gJ2RlZXBtZXJnZSdcblxuY29uc3QgTUFUQ0hfU1RBUlRfUVVFUlkgPSAvWz8mI10oPzpzdGFydHx0KT0oWzAtOWhtc10rKS9cbmNvbnN0IE1BVENIX0VORF9RVUVSWSA9IC9bPyYjXWVuZD0oWzAtOWhtc10rKS9cbmNvbnN0IE1BVENIX1NUQVJUX1NUQU1QID0gLyhcXGQrKShofG18cykvZ1xuY29uc3QgTUFUQ0hfTlVNRVJJQyA9IC9eXFxkKyQvXG5cbi8vIFBhcnNlIFlvdVR1YmUgVVJMIGZvciBhIHN0YXJ0IHRpbWUgcGFyYW0sIGllID90PTFoMTRtMzBzXG4vLyBhbmQgcmV0dXJuIHRoZSBzdGFydCB0aW1lIGluIHNlY29uZHNcbmZ1bmN0aW9uIHBhcnNlVGltZVBhcmFtICh1cmwsIHBhdHRlcm4pIHtcbiAgaWYgKHVybCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKHBhdHRlcm4pXG4gIGlmIChtYXRjaCkge1xuICAgIGNvbnN0IHN0YW1wID0gbWF0Y2hbMV1cbiAgICBpZiAoc3RhbXAubWF0Y2goTUFUQ0hfU1RBUlRfU1RBTVApKSB7XG4gICAgICByZXR1cm4gcGFyc2VUaW1lU3RyaW5nKHN0YW1wKVxuICAgIH1cbiAgICBpZiAoTUFUQ0hfTlVNRVJJQy50ZXN0KHN0YW1wKSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHN0YW1wKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZVN0cmluZyAoc3RhbXApIHtcbiAgbGV0IHNlY29uZHMgPSAwXG4gIGxldCBhcnJheSA9IE1BVENIX1NUQVJUX1NUQU1QLmV4ZWMoc3RhbXApXG4gIHdoaWxlIChhcnJheSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IFssIGNvdW50LCBwZXJpb2RdID0gYXJyYXlcbiAgICBpZiAocGVyaW9kID09PSAnaCcpIHNlY29uZHMgKz0gcGFyc2VJbnQoY291bnQsIDEwKSAqIDYwICogNjBcbiAgICBpZiAocGVyaW9kID09PSAnbScpIHNlY29uZHMgKz0gcGFyc2VJbnQoY291bnQsIDEwKSAqIDYwXG4gICAgaWYgKHBlcmlvZCA9PT0gJ3MnKSBzZWNvbmRzICs9IHBhcnNlSW50KGNvdW50LCAxMClcbiAgICBhcnJheSA9IE1BVENIX1NUQVJUX1NUQU1QLmV4ZWMoc3RhbXApXG4gIH1cbiAgcmV0dXJuIHNlY29uZHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3RhcnRUaW1lICh1cmwpIHtcbiAgcmV0dXJuIHBhcnNlVGltZVBhcmFtKHVybCwgTUFUQ0hfU1RBUlRfUVVFUlkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUVuZFRpbWUgKHVybCkge1xuICByZXR1cm4gcGFyc2VUaW1lUGFyYW0odXJsLCBNQVRDSF9FTkRfUVVFUlkpXG59XG5cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM4NjIyNTQ1XG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tU3RyaW5nICgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA1KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlTdHJpbmcgKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0XG4gICAgLmtleXMob2JqZWN0KVxuICAgIC5tYXAoa2V5ID0+IGAke2tleX09JHtvYmplY3Rba2V5XX1gKVxuICAgIC5qb2luKCcmJylcbn1cblxuZnVuY3Rpb24gZ2V0R2xvYmFsIChrZXkpIHtcbiAgaWYgKHdpbmRvd1trZXldKSB7XG4gICAgcmV0dXJuIHdpbmRvd1trZXldXG4gIH1cbiAgaWYgKHdpbmRvdy5leHBvcnRzICYmIHdpbmRvdy5leHBvcnRzW2tleV0pIHtcbiAgICByZXR1cm4gd2luZG93LmV4cG9ydHNba2V5XVxuICB9XG4gIGlmICh3aW5kb3cubW9kdWxlICYmIHdpbmRvdy5tb2R1bGUuZXhwb3J0cyAmJiB3aW5kb3cubW9kdWxlLmV4cG9ydHNba2V5XSkge1xuICAgIHJldHVybiB3aW5kb3cubW9kdWxlLmV4cG9ydHNba2V5XVxuICB9XG4gIHJldHVybiBudWxsXG59XG5cbi8vIFV0aWwgZnVuY3Rpb24gdG8gbG9hZCBhbiBleHRlcm5hbCBTREtcbi8vIG9yIHJldHVybiB0aGUgU0RLIGlmIGl0IGlzIGFscmVhZHkgbG9hZGVkXG5jb25zdCByZXF1ZXN0cyA9IHt9XG5leHBvcnQgY29uc3QgZ2V0U0RLID0gZW5hYmxlU3R1Yk9uKGZ1bmN0aW9uIGdldFNESyAodXJsLCBzZGtHbG9iYWwsIHNka1JlYWR5ID0gbnVsbCwgaXNMb2FkZWQgPSAoKSA9PiB0cnVlLCBmZXRjaFNjcmlwdCA9IGxvYWRTY3JpcHQpIHtcbiAgY29uc3QgZXhpc3RpbmdHbG9iYWwgPSBnZXRHbG9iYWwoc2RrR2xvYmFsKVxuICBpZiAoZXhpc3RpbmdHbG9iYWwgJiYgaXNMb2FkZWQoZXhpc3RpbmdHbG9iYWwpKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShleGlzdGluZ0dsb2JhbClcbiAgfVxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vIElmIHdlIGFyZSBhbHJlYWR5IGxvYWRpbmcgdGhlIFNESywgYWRkIHRoZSByZXNvbHZlIGFuZCByZWplY3RcbiAgICAvLyBmdW5jdGlvbnMgdG8gdGhlIGV4aXN0aW5nIGFycmF5IG9mIHJlcXVlc3RzXG4gICAgaWYgKHJlcXVlc3RzW3VybF0pIHtcbiAgICAgIHJlcXVlc3RzW3VybF0ucHVzaCh7IHJlc29sdmUsIHJlamVjdCB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJlcXVlc3RzW3VybF0gPSBbeyByZXNvbHZlLCByZWplY3QgfV1cbiAgICBjb25zdCBvbkxvYWRlZCA9IHNkayA9PiB7XG4gICAgICAvLyBXaGVuIGxvYWRlZCwgcmVzb2x2ZSBhbGwgcGVuZGluZyByZXF1ZXN0IHByb21pc2VzXG4gICAgICByZXF1ZXN0c1t1cmxdLmZvckVhY2gocmVxdWVzdCA9PiByZXF1ZXN0LnJlc29sdmUoc2RrKSlcbiAgICB9XG4gICAgaWYgKHNka1JlYWR5KSB7XG4gICAgICBjb25zdCBwcmV2aW91c09uUmVhZHkgPSB3aW5kb3dbc2RrUmVhZHldXG4gICAgICB3aW5kb3dbc2RrUmVhZHldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocHJldmlvdXNPblJlYWR5KSBwcmV2aW91c09uUmVhZHkoKVxuICAgICAgICBvbkxvYWRlZChnZXRHbG9iYWwoc2RrR2xvYmFsKSlcbiAgICAgIH1cbiAgICB9XG4gICAgZmV0Y2hTY3JpcHQodXJsLCBlcnIgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAvLyBMb2FkaW5nIHRoZSBTREsgZmFpbGVkIFx1MjAxMyByZWplY3QgYWxsIHJlcXVlc3RzIGFuZFxuICAgICAgICAvLyByZXNldCB0aGUgYXJyYXkgb2YgcmVxdWVzdHMgZm9yIHRoaXMgU0RLXG4gICAgICAgIHJlcXVlc3RzW3VybF0uZm9yRWFjaChyZXF1ZXN0ID0+IHJlcXVlc3QucmVqZWN0KGVycikpXG4gICAgICAgIHJlcXVlc3RzW3VybF0gPSBudWxsXG4gICAgICB9IGVsc2UgaWYgKCFzZGtSZWFkeSkge1xuICAgICAgICBvbkxvYWRlZChnZXRHbG9iYWwoc2RrR2xvYmFsKSlcbiAgICAgIH1cbiAgICB9KVxuICB9KVxufSlcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpZyAocHJvcHMsIGRlZmF1bHRQcm9wcykge1xuICByZXR1cm4gbWVyZ2UoZGVmYXVsdFByb3BzLmNvbmZpZywgcHJvcHMuY29uZmlnKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb21pdCAob2JqZWN0LCAuLi5hcnJheXMpIHtcbiAgY29uc3Qgb21pdEtleXMgPSBbXS5jb25jYXQoLi4uYXJyYXlzKVxuICBjb25zdCBvdXRwdXQgPSB7fVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KVxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgaWYgKG9taXRLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgIG91dHB1dFtrZXldID0gb2JqZWN0W2tleV1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsbFBsYXllciAobWV0aG9kLCAuLi5hcmdzKSB7XG4gIC8vIFV0aWwgbWV0aG9kIGZvciBjYWxsaW5nIGEgbWV0aG9kIG9uIHRoaXMucGxheWVyXG4gIC8vIGJ1dCBndWFyZCBhZ2FpbnN0IGVycm9ycyBhbmQgY29uc29sZS53YXJuIGluc3RlYWRcbiAgaWYgKCF0aGlzLnBsYXllciB8fCAhdGhpcy5wbGF5ZXJbbWV0aG9kXSkge1xuICAgIGxldCBtZXNzYWdlID0gYFJlYWN0UGxheWVyOiAke3RoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWV9IHBsYXllciBjb3VsZCBub3QgY2FsbCAlYyR7bWV0aG9kfSVjIFx1MjAxMyBgXG4gICAgaWYgKCF0aGlzLnBsYXllcikge1xuICAgICAgbWVzc2FnZSArPSAnVGhlIHBsYXllciB3YXMgbm90IGF2YWlsYWJsZSdcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnBsYXllclttZXRob2RdKSB7XG4gICAgICBtZXNzYWdlICs9ICdUaGUgbWV0aG9kIHdhcyBub3QgYXZhaWxhYmxlJ1xuICAgIH1cbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSwgJ2ZvbnQtd2VpZ2h0OiBib2xkJywgJycpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICByZXR1cm4gdGhpcy5wbGF5ZXJbbWV0aG9kXSguLi5hcmdzKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNZWRpYVN0cmVhbSAodXJsKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2Ygd2luZG93Lk1lZGlhU3RyZWFtICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHVybCBpbnN0YW5jZW9mIHdpbmRvdy5NZWRpYVN0cmVhbVxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Jsb2JVcmwgKHVybCkge1xuICByZXR1cm4gL15ibG9iOi8udGVzdCh1cmwpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c1dlYktpdFByZXNlbnRhdGlvbk1vZGUgKHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKSkge1xuICAvLyBDaGVjayBpZiBTYWZhcmkgc3VwcG9ydHMgUGlQLCBhbmQgaXMgbm90IG9uIG1vYmlsZSAob3RoZXIgdGhhbiBpUGFkKVxuICAvLyBpUGhvbmUgc2FmYXJpIGFwcGVhcnMgdG8gXCJzdXBwb3J0XCIgUGlQIHRocm91Z2ggdGhlIGNoZWNrLCBob3dldmVyIFBpUCBkb2VzIG5vdCBmdW5jdGlvblxuICBjb25zdCBub3RNb2JpbGUgPSAvaVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgPT09IGZhbHNlXG4gIHJldHVybiB2aWRlby53ZWJraXRTdXBwb3J0c1ByZXNlbnRhdGlvbk1vZGUgJiYgdHlwZW9mIHZpZGVvLndlYmtpdFNldFByZXNlbnRhdGlvbk1vZGUgPT09ICdmdW5jdGlvbicgJiYgbm90TW9iaWxlXG59XG5cbi8vIFdvcmthcm91bmQgZm9yIGJlaW5nIGFibGUgdG8gc3R1YiBvdXQgZnVuY3Rpb25zIGluIEVTTSBleHBvcnRzLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2V2YW53L2VzYnVpbGQvaXNzdWVzLzQxMiNpc3N1ZWNvbW1lbnQtNzIzMDQ3MjU1XG5mdW5jdGlvbiBlbmFibGVTdHViT24gKGZuKSB7XG4gIGlmIChnbG9iYWxUaGlzLl9fVEVTVF9fKSB7XG4gICAgY29uc3Qgd3JhcCA9ICguLi5hcmdzKSA9PiB3cmFwLnN0dWIoLi4uYXJncylcbiAgICB3cmFwLnN0dWIgPSBmblxuICAgIHJldHVybiB3cmFwXG4gIH1cbiAgcmV0dXJuIGZuXG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQ0EsV0FBTyxVQUFVLFNBQVMsS0FBTSxLQUFLLE1BQU0sSUFBSTtBQUM3QyxVQUFJLE9BQU8sU0FBUyxRQUFRLFNBQVMscUJBQXFCLE1BQU0sRUFBRSxDQUFDO0FBQ25FLFVBQUksU0FBUyxTQUFTLGNBQWMsUUFBUTtBQUU1QyxVQUFJLE9BQU8sU0FBUyxZQUFZO0FBQzlCLGFBQUs7QUFDTCxlQUFPLENBQUM7QUFBQSxNQUNWO0FBRUEsYUFBTyxRQUFRLENBQUM7QUFDaEIsV0FBSyxNQUFNLFdBQVc7QUFBQSxNQUFDO0FBRXZCLGFBQU8sT0FBTyxLQUFLLFFBQVE7QUFDM0IsYUFBTyxVQUFVLEtBQUssV0FBVztBQUNqQyxhQUFPLFFBQVEsV0FBVyxPQUFPLENBQUMsQ0FBQyxLQUFLLFFBQVE7QUFDaEQsYUFBTyxNQUFNO0FBRWIsVUFBSSxLQUFLLE9BQU87QUFDZCxzQkFBYyxRQUFRLEtBQUssS0FBSztBQUFBLE1BQ2xDO0FBRUEsVUFBSSxLQUFLLE1BQU07QUFDYixlQUFPLE9BQU8sS0FBSyxLQUFLO0FBQUEsTUFDMUI7QUFFQSxVQUFJLFFBQVEsWUFBWSxTQUFTLFdBQVc7QUFDNUMsWUFBTSxRQUFRLEVBQUU7QUFLaEIsVUFBSSxDQUFDLE9BQU8sUUFBUTtBQUNsQixpQkFBUyxRQUFRLEVBQUU7QUFBQSxNQUNyQjtBQUVBLFdBQUssWUFBWSxNQUFNO0FBQUEsSUFDekI7QUFFQSxhQUFTLGNBQWMsUUFBUSxPQUFPO0FBQ3BDLGVBQVMsUUFBUSxPQUFPO0FBQ3RCLGVBQU8sYUFBYSxNQUFNLE1BQU0sSUFBSSxD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UUFBUTtBQUN2QyxhQUFPLFFBQVEsSUFBSSxXQUFZO0FBQzdCLFlBQUk7QUFBaUIsMEJBQWdCO0FBQ3JDLGlCQUFTLFVBQVUsU0FBUyxDQUFDO0FBQUEsTUFDL0I7QUFBQSxJQUNGO0FBQ0EsZ0JBQVksS0FBSyxTQUFPO0FBQ3RCLFVBQUksS0FBSztBQUdQLGlCQUFTLEdBQUcsRUFBRSxRQUFRLGFBQVcsUUFBUSxPQUFPLEdBQUcsQ0FBQztBQUNwRCxpQkFBUyxHQUFHLElBQUk7QUFBQSxNQUNsQixXQUFXLENBQUMsVUFBVTtBQUNwQixpQkFBUyxVQUFVLFNBQVMsQ0FBQztBQUFBLE1BQy9CO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSCxDQUFDO0FBQ0gsQ0FBQztBQXVERCxTQUFTLGFBQWMsSUFBSTtBQUN6QixNQUFJLE1BQXFCO0FBQ3ZCLFVBQU0sT0FBTyxJQUFJLFNBQVMsS0FBSyxLQUFLLEdBQUcsSUFBSTtBQUMzQyxTQUFLLE9BQU87QUFDWixXQUFPO0FBQUEsRUFDVDtBQUNBLFNBQU87QUFDVDs7O0FEMUtBLElBQU0sY0FBYztBQUVwQixLQUFLLGtCQUFrQixPQUFLO0FBQzFCLElBQUUsR0FBRyxlQUFlLGNBQWMsWUFBWSxHQUFHLEdBQUc7QUFDdEQsQ0FBQztBQUVELEtBQUssaUJBQWlCLE9BQUs7QUFDekIsSUFBRSxHQUFHLGVBQWUsY0FBYyxZQUFZLEdBQUcsRUFBRTtBQUNuRCxJQUFFLEdBQUcsZUFBZSxjQUFjLGNBQWMsR0FBRyxHQUFHO0FBQ3RELElBQUUsR0FBRyxlQUFlLGNBQWMsaUJBQWlCLEdBQUcsSUFBSTtBQUM1RCxDQUFDO0FBRUQsS0FBSyw0QkFBNEIsT0FBSztBQUNwQyxJQUFFLEdBQUcsZUFBZSxjQUFjLG1CQUFtQixHQUFHLEVBQUU7QUFDNUQsQ0FBQztBQUVELEtBQUssa0JBQWtCLE9BQUs7QUFDMUIsSUFBRSxHQUFHLGVBQWUsY0FBYyxPQUFPLEdBQUcsRUFBRTtBQUNoRCxDQUFDO0FBRUQsS0FBSyx1QkFBdUIsT0FBSztBQUMvQixJQUFFLEdBQUcsZUFBZSxjQUFjLE9BQU8sR0FBRyxFQUFFO0FBQzlDLElBQUUsR0FBRyxlQUFlLGNBQWMsV0FBVyxHQUFHLEVBQUU7QUFDcEQsQ0FBQztBQUVELEtBQUssd0NBQXdDLE9BQUs7QUFDaEQsSUFBRSxHQUFHLGVBQWUsV0FBVyxHQUFHLE1BQVM7QUFDM0MsSUFBRSxHQUFHLGVBQWUsY0FBYyxTQUFTLEdBQUcsTUFBUztBQUN2RCxJQUFFLEdBQUcsZUFBZSxjQUFjLFlBQVksR0FBRyxNQUFTO0FBQzFELElBQUUsR0FBRyxlQUFlLGNBQWMsZ0JBQWdCLEdBQUcsTUFBUztBQUM5RCxJQUFFLEdBQUcsZUFBZSxjQUFjLFdBQVcsR0FBRyxNQUFTO0FBQ3pELElBQUUsR0FBRyxlQUFlLGNBQWMsT0FBTyxHQUFHLE1BQVM7QUFDdkQsQ0FBQzsiLAogICJuYW1lcyI6IFsiaXNNZXJnZWFibGVPYmplY3QiLCAiZ2V0U0RLIiwgImxvYWRTY3JpcHQiXQp9Cg==
